# add better version handling to meta.yaml
# when building as standalone package uncomment line below and set version and build_number to proper values
#{% set data = load_file_data('versions.yaml') %}

{% set version = environ.get('version') %}
{% set build_number = environ.get('build_number',0) %}
{% set numpy_version = environ.get('numpy_version') %}
{% set cc3d_network_solvers_version = environ.get('cc3d_network_solvers_version') %}
{% set cmake_version = environ.get('cmake_version') %}
{% set vtk_version = environ.get('vtk_version') %}
{% set swig_version = environ.get('swig_version') %}
{% set boost_version = environ.get('boost_version') %}
{% set tbb_devel_version = environ.get('tbb_devel_version') %}

#{% set version = data.get('version') %}
#{% set build_number = data.get('build_number',0) %}
#{% set numpy_version = data.get('numpy_version') %}
#{% set cc3d_network_solvers_version = data.get('cc3d_network_solvers_version') %}
#{% set cmake_version = data.get('cmake_version') %}
#{% set vtk_version = data.get('vtk_version') %}
#{% set swig_version = data.get('swig_version') %}
#{% set boost_version = data.get('boost_version') %}
#{% set tbb_devel_version = data.get('tbb_devel_version') %}


#{% set version =  environ.get('VERSION', '4.1.1') %}
##{% set version = "4.5.0" %}
#{% set build_number = 0 %}
#{% set numpy_version = "1.21" %}
#{% set cc3d_network_solvers_version = "0.3.0" %}
#{% set cmake_version = "3.21" %}
#{% set vtk_version = "9.2" %}
#{% set swig_version = "4" %}
#{% set boost_version = "1.78" %}
#{% set tbb_devel_version = "2021" %}
##{% set version = "4.3.0" %}
##{% set build_number = "16" %}

package:
  name: cc3d
  version: {{ version }}

about:
  home: https://compucell3d.org
  license: MIT
  license_file: ../CompuCell3D/License.txt
  summary: Multiscale multicellular virtual tissue modeling and simulation environment

extra:
  maintainers: T.J. Sego, Maciek Swat

source:
  # url: https://github.com/CompuCell3D/CompuCell3D/archive/master.tar.gz
  path: ../

build:
  number: {{ build_number }}
  ignore_run_exports:
    # Mitigating hard dependency on tbb by tbb-devel
    - tbb

requirements:
  host:
    - python {{ python }}
    - numpy={{ numpy_version }}
    - vtk={{ vtk_version }}
    - eigen
    - tbb-devel={{ tbb_devel_version }}
    - boost={{ boost_version }}
    - cmake>={{ cmake_version }}
    - swig>={{ swig_version }}
    - psutil
    - deprecated
    - cc3d-network-solvers>={{ cc3d_network_solvers_version }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ openmp }} # [osx]

  build:
    - cmake>={{ cmake_version }}
    - swig>={{ swig_version }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ openmp }} # [osx]

  run:
    - python {{ python }}
    - numpy={{ numpy_version }}
    - vtk={{ vtk_version }}
    - eigen
    - tbb-devel={{ tbb_devel_version }}
    - boost={{ boost_version }}
    - swig>={{ swig_version }}
    - psutil
    - deprecated
    - scipy
    - pandas
    - jinja2
    - deprecated
    - psutil
    - cmake>={{ cmake_version }}
    - cc3d-network-solvers>={{ cc3d_network_solvers_version }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ openmp }} # [osx]
    - simservice
    - notebook
    - ipywidgets
    - ipyvtklink
    - sphinx
    - graphviz


  run_constrained:
    - tbb={{ tbb_devel_version }}

# on windows we can run conda
#  build . -c conda-forge -c compucell3d to force conda to use
#  specified channels as sources of packages
