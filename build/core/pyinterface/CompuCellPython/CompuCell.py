# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CompuCell')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CompuCell')
    _CompuCell = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CompuCell', [dirname(__file__)])
        except ImportError:
            import _CompuCell
            return _CompuCell
        try:
            _mod = imp.load_module('_CompuCell', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CompuCell = swig_import_helper()
    del swig_import_helper
else:
    import _CompuCell
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CompuCell.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CompuCell.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CompuCell.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CompuCell.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CompuCell.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CompuCell.SwigPyIterator_copy(self)

    def next(self):
        return _CompuCell.SwigPyIterator_next(self)

    def __next__(self):
        return _CompuCell.SwigPyIterator___next__(self)

    def previous(self):
        return _CompuCell.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CompuCell.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CompuCell.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CompuCell.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CompuCell.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CompuCell.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CompuCell.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CompuCell.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CompuCell.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Point3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _CompuCell.Point3D_x_set
    __swig_getmethods__["x"] = _CompuCell.Point3D_x_get
    if _newclass:
        x = _swig_property(_CompuCell.Point3D_x_get, _CompuCell.Point3D_x_set)
    __swig_setmethods__["y"] = _CompuCell.Point3D_y_set
    __swig_getmethods__["y"] = _CompuCell.Point3D_y_get
    if _newclass:
        y = _swig_property(_CompuCell.Point3D_y_get, _CompuCell.Point3D_y_set)
    __swig_setmethods__["z"] = _CompuCell.Point3D_z_set
    __swig_getmethods__["z"] = _CompuCell.Point3D_z_get
    if _newclass:
        z = _swig_property(_CompuCell.Point3D_z_get, _CompuCell.Point3D_z_set)

    def __init__(self, *args):
        this = _CompuCell.new_Point3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, pt):
        return _CompuCell.Point3D___iadd__(self, pt)

    def __isub__(self, pt):
        return _CompuCell.Point3D___isub__(self, pt)

    def __eq__(self, pt):
        return _CompuCell.Point3D___eq__(self, pt)

    def __ne__(self, pt):
        return _CompuCell.Point3D___ne__(self, pt)

    def __lt__(self, _rhs):
        return _CompuCell.Point3D___lt__(self, _rhs)

    def __str__(self):
        return _CompuCell.Point3D___str__(self)

    def __getstate__(self):
        return (self.x,self.y,self.z)

    def __setstate__(self,tup):
        print( 'tuple=',tup)
        self.this = _CompuCell.new_Point3D(tup[0],tup[1],tup[2])
        self.thisown=1

    def to_tuple(self):
        return self.x, self.y, self.z


    __swig_destroy__ = _CompuCell.delete_Point3D
    __del__ = lambda self: None
Point3D_swigregister = _CompuCell.Point3D_swigregister
Point3D_swigregister(Point3D)

class Dim3D(Point3D):
    __swig_setmethods__ = {}
    for _s in [Point3D]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dim3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Point3D]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dim3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Dim3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, pt):
        return _CompuCell.Dim3D___iadd__(self, pt)

    def __isub__(self, pt):
        return _CompuCell.Dim3D___isub__(self, pt)

    def __eq__(self, pt):
        return _CompuCell.Dim3D___eq__(self, pt)

    def __ne__(self, pt):
        return _CompuCell.Dim3D___ne__(self, pt)

    def __lt__(self, _rhs):
        return _CompuCell.Dim3D___lt__(self, _rhs)

    def __str__(self):
        return _CompuCell.Dim3D___str__(self)

    def to_tuple(self):
        return self.x, self.y, self.z


    __swig_destroy__ = _CompuCell.delete_Dim3D
    __del__ = lambda self: None
Dim3D_swigregister = _CompuCell.Dim3D_swigregister
Dim3D_swigregister(Dim3D)


def __sub__(*args):
    return _CompuCell.__sub__(*args)
__sub__ = _CompuCell.__sub__

def __add__(*args):
    return _CompuCell.__add__(*args)
__add__ = _CompuCell.__add__
class Coordinates3DDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinates3DDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinates3DDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Coordinates3DDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def X(self):
        return _CompuCell.Coordinates3DDouble_X(self)

    def Y(self):
        return _CompuCell.Coordinates3DDouble_Y(self)

    def Z(self):
        return _CompuCell.Coordinates3DDouble_Z(self)

    def XRef(self):
        return _CompuCell.Coordinates3DDouble_XRef(self)

    def YRef(self):
        return _CompuCell.Coordinates3DDouble_YRef(self)

    def ZRef(self):
        return _CompuCell.Coordinates3DDouble_ZRef(self)

    def __isub__(self, a):
        return _CompuCell.Coordinates3DDouble___isub__(self, a)

    def __iadd__(self, a):
        return _CompuCell.Coordinates3DDouble___iadd__(self, a)
    __swig_setmethods__["x"] = _CompuCell.Coordinates3DDouble_x_set
    __swig_getmethods__["x"] = _CompuCell.Coordinates3DDouble_x_get
    if _newclass:
        x = _swig_property(_CompuCell.Coordinates3DDouble_x_get, _CompuCell.Coordinates3DDouble_x_set)
    __swig_setmethods__["y"] = _CompuCell.Coordinates3DDouble_y_set
    __swig_getmethods__["y"] = _CompuCell.Coordinates3DDouble_y_get
    if _newclass:
        y = _swig_property(_CompuCell.Coordinates3DDouble_y_get, _CompuCell.Coordinates3DDouble_y_set)
    __swig_setmethods__["z"] = _CompuCell.Coordinates3DDouble_z_set
    __swig_getmethods__["z"] = _CompuCell.Coordinates3DDouble_z_get
    if _newclass:
        z = _swig_property(_CompuCell.Coordinates3DDouble_z_get, _CompuCell.Coordinates3DDouble_z_set)

    def __str__(self):
        return _CompuCell.Coordinates3DDouble___str__(self)
    __swig_destroy__ = _CompuCell.delete_Coordinates3DDouble
    __del__ = lambda self: None
Coordinates3DDouble_swigregister = _CompuCell.Coordinates3DDouble_swigregister
Coordinates3DDouble_swigregister(Coordinates3DDouble)

class Neighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neighbor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pt"] = _CompuCell.Neighbor_pt_set
    __swig_getmethods__["pt"] = _CompuCell.Neighbor_pt_get
    if _newclass:
        pt = _swig_property(_CompuCell.Neighbor_pt_get, _CompuCell.Neighbor_pt_set)
    __swig_setmethods__["distance"] = _CompuCell.Neighbor_distance_set
    __swig_getmethods__["distance"] = _CompuCell.Neighbor_distance_get
    if _newclass:
        distance = _swig_property(_CompuCell.Neighbor_distance_get, _CompuCell.Neighbor_distance_set)
    __swig_setmethods__["ptTrans"] = _CompuCell.Neighbor_ptTrans_set
    __swig_getmethods__["ptTrans"] = _CompuCell.Neighbor_ptTrans_get
    if _newclass:
        ptTrans = _swig_property(_CompuCell.Neighbor_ptTrans_get, _CompuCell.Neighbor_ptTrans_set)

    def __init__(self, *args):
        this = _CompuCell.new_Neighbor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Neighbor
    __del__ = lambda self: None
Neighbor_swigregister = _CompuCell.Neighbor_swigregister
Neighbor_swigregister(Neighbor)


def __lshift__(*args):
    return _CompuCell.__lshift__(*args)
__lshift__ = _CompuCell.__lshift__
class BoundaryStrategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryStrategy, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getLatticeSpanVector(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeSpanVector(self, *args)

    def getLatticeSizeVector(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeSizeVector(self, *args)

    def getLatticeType(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeType(self, *args)

    def getMaxDistance(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxDistance(self, *args)

    def getBoundaryConditionIndicator(self, *args):
        return _CompuCell.BoundaryStrategy_getBoundaryConditionIndicator(self, *args)
    __swig_destroy__ = _CompuCell.delete_BoundaryStrategy
    __del__ = lambda self: None
    if _newclass:
        instantiate = staticmethod(_CompuCell.BoundaryStrategy_instantiate)
    else:
        instantiate = _CompuCell.BoundaryStrategy_instantiate
    if _newclass:
        getInstance = staticmethod(_CompuCell.BoundaryStrategy_getInstance)
    else:
        getInstance = _CompuCell.BoundaryStrategy_getInstance
    if _newclass:
        destroy = staticmethod(_CompuCell.BoundaryStrategy_destroy)
    else:
        destroy = _CompuCell.BoundaryStrategy_destroy

    def calculateDistance(self, *args):
        return _CompuCell.BoundaryStrategy_calculateDistance(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighbor(self, *args)

    def HexCoord(self, *args):
        return _CompuCell.BoundaryStrategy_HexCoord(self, *args)

    def Hex2Cartesian(self, *args):
        return _CompuCell.BoundaryStrategy_Hex2Cartesian(self, *args)

    def getNeighborCustomDim(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighborCustomDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.BoundaryStrategy_isValid(self, *args)

    def isValidCustomDim(self, *args):
        return _CompuCell.BoundaryStrategy_isValidCustomDim(self, *args)

    def prepareNeighborListsSquare(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsSquare(self, *args)

    def generateLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.BoundaryStrategy_generateLatticeMultiplicativeFactors(self, *args)

    def getLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.BoundaryStrategy_getLatticeMultiplicativeFactors(self, *args)

    def prepareNeighborListsHex(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsHex(self, *args)

    def prepareNeighborLists(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborLists(self, *args)

    def getMaxNeighborIndexFromNeighborOrderNoGen(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromNeighborOrderNoGen(self, *args)

    def getMaxNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborOrder(self, *args)

    def prepareNeighborListsBasedOnNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_prepareNeighborListsBasedOnNeighborOrder(self, *args)

    def getMaxNeighborIndexFromNeighborOrder(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromNeighborOrder(self, *args)

    def getMaxNeighborIndexFromDepth(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxNeighborIndexFromDepth(self, *args)

    def getNeighborDirect(self, *args):
        return _CompuCell.BoundaryStrategy_getNeighborDirect(self, *args)

    def calculatePointCoordinates(self, *args):
        return _CompuCell.BoundaryStrategy_calculatePointCoordinates(self, *args)

    def setDim(self, *args):
        return _CompuCell.BoundaryStrategy_setDim(self, *args)

    def getOffsetVec(self, *args):
        return _CompuCell.BoundaryStrategy_getOffsetVec(self, *args)

    def getHexOffsetArray(self, *args):
        return _CompuCell.BoundaryStrategy_getHexOffsetArray(self, *args)

    def getMaxOffset(self, *args):
        return _CompuCell.BoundaryStrategy_getMaxOffset(self, *args)
BoundaryStrategy_swigregister = _CompuCell.BoundaryStrategy_swigregister
BoundaryStrategy_swigregister(BoundaryStrategy)

def BoundaryStrategy_instantiate(*args):
    return _CompuCell.BoundaryStrategy_instantiate(*args)
BoundaryStrategy_instantiate = _CompuCell.BoundaryStrategy_instantiate

def BoundaryStrategy_getInstance(*args):
    return _CompuCell.BoundaryStrategy_getInstance(*args)
BoundaryStrategy_getInstance = _CompuCell.BoundaryStrategy_getInstance

def BoundaryStrategy_destroy(*args):
    return _CompuCell.BoundaryStrategy_destroy(*args)
BoundaryStrategy_destroy = _CompuCell.BoundaryStrategy_destroy

class CellG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellG, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellG(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["volume"] = _CompuCell.CellG_volume_set
    __swig_getmethods__["volume"] = _CompuCell.CellG_volume_get
    if _newclass:
        volume = _swig_property(_CompuCell.CellG_volume_get, _CompuCell.CellG_volume_set)
    __swig_setmethods__["targetVolume"] = _CompuCell.CellG_targetVolume_set
    __swig_getmethods__["targetVolume"] = _CompuCell.CellG_targetVolume_get
    if _newclass:
        targetVolume = _swig_property(_CompuCell.CellG_targetVolume_get, _CompuCell.CellG_targetVolume_set)
    __swig_setmethods__["lambdaVolume"] = _CompuCell.CellG_lambdaVolume_set
    __swig_getmethods__["lambdaVolume"] = _CompuCell.CellG_lambdaVolume_get
    if _newclass:
        lambdaVolume = _swig_property(_CompuCell.CellG_lambdaVolume_get, _CompuCell.CellG_lambdaVolume_set)
    __swig_setmethods__["surface"] = _CompuCell.CellG_surface_set
    __swig_getmethods__["surface"] = _CompuCell.CellG_surface_get
    if _newclass:
        surface = _swig_property(_CompuCell.CellG_surface_get, _CompuCell.CellG_surface_set)
    __swig_setmethods__["targetSurface"] = _CompuCell.CellG_targetSurface_set
    __swig_getmethods__["targetSurface"] = _CompuCell.CellG_targetSurface_get
    if _newclass:
        targetSurface = _swig_property(_CompuCell.CellG_targetSurface_get, _CompuCell.CellG_targetSurface_set)
    __swig_setmethods__["angle"] = _CompuCell.CellG_angle_set
    __swig_getmethods__["angle"] = _CompuCell.CellG_angle_get
    if _newclass:
        angle = _swig_property(_CompuCell.CellG_angle_get, _CompuCell.CellG_angle_set)
    __swig_setmethods__["lambdaSurface"] = _CompuCell.CellG_lambdaSurface_set
    __swig_getmethods__["lambdaSurface"] = _CompuCell.CellG_lambdaSurface_get
    if _newclass:
        lambdaSurface = _swig_property(_CompuCell.CellG_lambdaSurface_get, _CompuCell.CellG_lambdaSurface_set)
    __swig_setmethods__["clusterSurface"] = _CompuCell.CellG_clusterSurface_set
    __swig_getmethods__["clusterSurface"] = _CompuCell.CellG_clusterSurface_get
    if _newclass:
        clusterSurface = _swig_property(_CompuCell.CellG_clusterSurface_get, _CompuCell.CellG_clusterSurface_set)
    __swig_setmethods__["targetClusterSurface"] = _CompuCell.CellG_targetClusterSurface_set
    __swig_getmethods__["targetClusterSurface"] = _CompuCell.CellG_targetClusterSurface_get
    if _newclass:
        targetClusterSurface = _swig_property(_CompuCell.CellG_targetClusterSurface_get, _CompuCell.CellG_targetClusterSurface_set)
    __swig_setmethods__["lambdaClusterSurface"] = _CompuCell.CellG_lambdaClusterSurface_set
    __swig_getmethods__["lambdaClusterSurface"] = _CompuCell.CellG_lambdaClusterSurface_get
    if _newclass:
        lambdaClusterSurface = _swig_property(_CompuCell.CellG_lambdaClusterSurface_get, _CompuCell.CellG_lambdaClusterSurface_set)
    __swig_setmethods__["type"] = _CompuCell.CellG_type_set
    __swig_getmethods__["type"] = _CompuCell.CellG_type_get
    if _newclass:
        type = _swig_property(_CompuCell.CellG_type_get, _CompuCell.CellG_type_set)
    __swig_setmethods__["subtype"] = _CompuCell.CellG_subtype_set
    __swig_getmethods__["subtype"] = _CompuCell.CellG_subtype_get
    if _newclass:
        subtype = _swig_property(_CompuCell.CellG_subtype_get, _CompuCell.CellG_subtype_set)
    __swig_setmethods__["xCM"] = _CompuCell.CellG_xCM_set
    __swig_getmethods__["xCM"] = _CompuCell.CellG_xCM_get
    if _newclass:
        xCM = _swig_property(_CompuCell.CellG_xCM_get, _CompuCell.CellG_xCM_set)
    __swig_setmethods__["yCM"] = _CompuCell.CellG_yCM_set
    __swig_getmethods__["yCM"] = _CompuCell.CellG_yCM_get
    if _newclass:
        yCM = _swig_property(_CompuCell.CellG_yCM_get, _CompuCell.CellG_yCM_set)
    __swig_setmethods__["zCM"] = _CompuCell.CellG_zCM_set
    __swig_getmethods__["zCM"] = _CompuCell.CellG_zCM_get
    if _newclass:
        zCM = _swig_property(_CompuCell.CellG_zCM_get, _CompuCell.CellG_zCM_set)
    __swig_setmethods__["xCOM"] = _CompuCell.CellG_xCOM_set
    __swig_getmethods__["xCOM"] = _CompuCell.CellG_xCOM_get
    if _newclass:
        xCOM = _swig_property(_CompuCell.CellG_xCOM_get, _CompuCell.CellG_xCOM_set)
    __swig_setmethods__["yCOM"] = _CompuCell.CellG_yCOM_set
    __swig_getmethods__["yCOM"] = _CompuCell.CellG_yCOM_get
    if _newclass:
        yCOM = _swig_property(_CompuCell.CellG_yCOM_get, _CompuCell.CellG_yCOM_set)
    __swig_setmethods__["zCOM"] = _CompuCell.CellG_zCOM_set
    __swig_getmethods__["zCOM"] = _CompuCell.CellG_zCOM_get
    if _newclass:
        zCOM = _swig_property(_CompuCell.CellG_zCOM_get, _CompuCell.CellG_zCOM_set)
    __swig_setmethods__["xCOMPrev"] = _CompuCell.CellG_xCOMPrev_set
    __swig_getmethods__["xCOMPrev"] = _CompuCell.CellG_xCOMPrev_get
    if _newclass:
        xCOMPrev = _swig_property(_CompuCell.CellG_xCOMPrev_get, _CompuCell.CellG_xCOMPrev_set)
    __swig_setmethods__["yCOMPrev"] = _CompuCell.CellG_yCOMPrev_set
    __swig_getmethods__["yCOMPrev"] = _CompuCell.CellG_yCOMPrev_get
    if _newclass:
        yCOMPrev = _swig_property(_CompuCell.CellG_yCOMPrev_get, _CompuCell.CellG_yCOMPrev_set)
    __swig_setmethods__["zCOMPrev"] = _CompuCell.CellG_zCOMPrev_set
    __swig_getmethods__["zCOMPrev"] = _CompuCell.CellG_zCOMPrev_get
    if _newclass:
        zCOMPrev = _swig_property(_CompuCell.CellG_zCOMPrev_get, _CompuCell.CellG_zCOMPrev_set)
    __swig_setmethods__["iXX"] = _CompuCell.CellG_iXX_set
    __swig_getmethods__["iXX"] = _CompuCell.CellG_iXX_get
    if _newclass:
        iXX = _swig_property(_CompuCell.CellG_iXX_get, _CompuCell.CellG_iXX_set)
    __swig_setmethods__["iXY"] = _CompuCell.CellG_iXY_set
    __swig_getmethods__["iXY"] = _CompuCell.CellG_iXY_get
    if _newclass:
        iXY = _swig_property(_CompuCell.CellG_iXY_get, _CompuCell.CellG_iXY_set)
    __swig_setmethods__["iXZ"] = _CompuCell.CellG_iXZ_set
    __swig_getmethods__["iXZ"] = _CompuCell.CellG_iXZ_get
    if _newclass:
        iXZ = _swig_property(_CompuCell.CellG_iXZ_get, _CompuCell.CellG_iXZ_set)
    __swig_setmethods__["iYY"] = _CompuCell.CellG_iYY_set
    __swig_getmethods__["iYY"] = _CompuCell.CellG_iYY_get
    if _newclass:
        iYY = _swig_property(_CompuCell.CellG_iYY_get, _CompuCell.CellG_iYY_set)
    __swig_setmethods__["iYZ"] = _CompuCell.CellG_iYZ_set
    __swig_getmethods__["iYZ"] = _CompuCell.CellG_iYZ_get
    if _newclass:
        iYZ = _swig_property(_CompuCell.CellG_iYZ_get, _CompuCell.CellG_iYZ_set)
    __swig_setmethods__["iZZ"] = _CompuCell.CellG_iZZ_set
    __swig_getmethods__["iZZ"] = _CompuCell.CellG_iZZ_get
    if _newclass:
        iZZ = _swig_property(_CompuCell.CellG_iZZ_get, _CompuCell.CellG_iZZ_set)
    __swig_setmethods__["lX"] = _CompuCell.CellG_lX_set
    __swig_getmethods__["lX"] = _CompuCell.CellG_lX_get
    if _newclass:
        lX = _swig_property(_CompuCell.CellG_lX_get, _CompuCell.CellG_lX_set)
    __swig_setmethods__["lY"] = _CompuCell.CellG_lY_set
    __swig_getmethods__["lY"] = _CompuCell.CellG_lY_get
    if _newclass:
        lY = _swig_property(_CompuCell.CellG_lY_get, _CompuCell.CellG_lY_set)
    __swig_setmethods__["lZ"] = _CompuCell.CellG_lZ_set
    __swig_getmethods__["lZ"] = _CompuCell.CellG_lZ_get
    if _newclass:
        lZ = _swig_property(_CompuCell.CellG_lZ_get, _CompuCell.CellG_lZ_set)
    __swig_setmethods__["ecc"] = _CompuCell.CellG_ecc_set
    __swig_getmethods__["ecc"] = _CompuCell.CellG_ecc_get
    if _newclass:
        ecc = _swig_property(_CompuCell.CellG_ecc_get, _CompuCell.CellG_ecc_set)
    __swig_setmethods__["lambdaVecX"] = _CompuCell.CellG_lambdaVecX_set
    __swig_getmethods__["lambdaVecX"] = _CompuCell.CellG_lambdaVecX_get
    if _newclass:
        lambdaVecX = _swig_property(_CompuCell.CellG_lambdaVecX_get, _CompuCell.CellG_lambdaVecX_set)
    __swig_setmethods__["lambdaVecY"] = _CompuCell.CellG_lambdaVecY_set
    __swig_getmethods__["lambdaVecY"] = _CompuCell.CellG_lambdaVecY_get
    if _newclass:
        lambdaVecY = _swig_property(_CompuCell.CellG_lambdaVecY_get, _CompuCell.CellG_lambdaVecY_set)
    __swig_setmethods__["lambdaVecZ"] = _CompuCell.CellG_lambdaVecZ_set
    __swig_getmethods__["lambdaVecZ"] = _CompuCell.CellG_lambdaVecZ_get
    if _newclass:
        lambdaVecZ = _swig_property(_CompuCell.CellG_lambdaVecZ_get, _CompuCell.CellG_lambdaVecZ_set)
    __swig_setmethods__["flag"] = _CompuCell.CellG_flag_set
    __swig_getmethods__["flag"] = _CompuCell.CellG_flag_get
    if _newclass:
        flag = _swig_property(_CompuCell.CellG_flag_get, _CompuCell.CellG_flag_set)
    __swig_setmethods__["averageConcentration"] = _CompuCell.CellG_averageConcentration_set
    __swig_getmethods__["averageConcentration"] = _CompuCell.CellG_averageConcentration_get
    if _newclass:
        averageConcentration = _swig_property(_CompuCell.CellG_averageConcentration_get, _CompuCell.CellG_averageConcentration_set)
    __swig_setmethods__["id"] = _CompuCell.CellG_id_set
    __swig_getmethods__["id"] = _CompuCell.CellG_id_get
    if _newclass:
        id = _swig_property(_CompuCell.CellG_id_get, _CompuCell.CellG_id_set)
    __swig_setmethods__["clusterId"] = _CompuCell.CellG_clusterId_set
    __swig_getmethods__["clusterId"] = _CompuCell.CellG_clusterId_get
    if _newclass:
        clusterId = _swig_property(_CompuCell.CellG_clusterId_get, _CompuCell.CellG_clusterId_set)
    __swig_setmethods__["fluctAmpl"] = _CompuCell.CellG_fluctAmpl_set
    __swig_getmethods__["fluctAmpl"] = _CompuCell.CellG_fluctAmpl_get
    if _newclass:
        fluctAmpl = _swig_property(_CompuCell.CellG_fluctAmpl_get, _CompuCell.CellG_fluctAmpl_set)
    __swig_setmethods__["lambdaMotility"] = _CompuCell.CellG_lambdaMotility_set
    __swig_getmethods__["lambdaMotility"] = _CompuCell.CellG_lambdaMotility_get
    if _newclass:
        lambdaMotility = _swig_property(_CompuCell.CellG_lambdaMotility_get, _CompuCell.CellG_lambdaMotility_set)
    __swig_setmethods__["biasVecX"] = _CompuCell.CellG_biasVecX_set
    __swig_getmethods__["biasVecX"] = _CompuCell.CellG_biasVecX_get
    if _newclass:
        biasVecX = _swig_property(_CompuCell.CellG_biasVecX_get, _CompuCell.CellG_biasVecX_set)
    __swig_setmethods__["biasVecY"] = _CompuCell.CellG_biasVecY_set
    __swig_getmethods__["biasVecY"] = _CompuCell.CellG_biasVecY_get
    if _newclass:
        biasVecY = _swig_property(_CompuCell.CellG_biasVecY_get, _CompuCell.CellG_biasVecY_set)
    __swig_setmethods__["biasVecZ"] = _CompuCell.CellG_biasVecZ_set
    __swig_getmethods__["biasVecZ"] = _CompuCell.CellG_biasVecZ_get
    if _newclass:
        biasVecZ = _swig_property(_CompuCell.CellG_biasVecZ_get, _CompuCell.CellG_biasVecZ_set)
    __swig_setmethods__["connectivityOn"] = _CompuCell.CellG_connectivityOn_set
    __swig_getmethods__["connectivityOn"] = _CompuCell.CellG_connectivityOn_get
    if _newclass:
        connectivityOn = _swig_property(_CompuCell.CellG_connectivityOn_get, _CompuCell.CellG_connectivityOn_set)
    __swig_setmethods__["extraAttribPtr"] = _CompuCell.CellG_extraAttribPtr_set
    __swig_getmethods__["extraAttribPtr"] = _CompuCell.CellG_extraAttribPtr_get
    if _newclass:
        extraAttribPtr = _swig_property(_CompuCell.CellG_extraAttribPtr_get, _CompuCell.CellG_extraAttribPtr_set)
    __swig_setmethods__["pyAttrib"] = _CompuCell.CellG_pyAttrib_set
    __swig_getmethods__["pyAttrib"] = _CompuCell.CellG_pyAttrib_get
    if _newclass:
        pyAttrib = _swig_property(_CompuCell.CellG_pyAttrib_get, _CompuCell.CellG_pyAttrib_set)

    def getPressure(self, *args):
        return _CompuCell.CellG_getPressure(self, *args)

    def getSurfaceTension(self, *args):
        return _CompuCell.CellG_getSurfaceTension(self, *args)

    def getClusterSurfaceTension(self, *args):
        return _CompuCell.CellG_getClusterSurfaceTension(self, *args)
    __swig_setmethods__["pressure"] = _CompuCell.CellG_pressure_set
    __swig_getmethods__["pressure"] = _CompuCell.CellG_pressure_get
    if _newclass:
        pressure = _swig_property(_CompuCell.CellG_pressure_get, _CompuCell.CellG_pressure_set)
    __swig_setmethods__["surfaceTension"] = _CompuCell.CellG_surfaceTension_set
    __swig_getmethods__["surfaceTension"] = _CompuCell.CellG_surfaceTension_get
    if _newclass:
        surfaceTension = _swig_property(_CompuCell.CellG_surfaceTension_get, _CompuCell.CellG_surfaceTension_set)
    __swig_setmethods__["clusterSurfaceTension"] = _CompuCell.CellG_clusterSurfaceTension_set
    __swig_getmethods__["clusterSurfaceTension"] = _CompuCell.CellG_clusterSurfaceTension_get
    if _newclass:
        clusterSurfaceTension = _swig_property(_CompuCell.CellG_clusterSurfaceTension_get, _CompuCell.CellG_clusterSurfaceTension_set)

    def setVolume(self,_volume):
        raise AttributeError('ASSIGNMENT cell.volume=%s is illegal. volume is read only variable'%(_volume))

    __swig_setmethods__["volume"] = setVolume     
    if _newclass: volume = property(_CompuCell.CellG_volume_get,setVolume)

    def setSurface(self,_surface):
        raise AttributeError('ASSIGNMENT cell.surface=%s is illegal. surface is read only variable'%(_surface))

    __swig_setmethods__["surface"] = setSurface     
    if _newclass: surface = property(_CompuCell.CellG_surface_get,setSurface)

    def setxCM(self,_xCM):
        raise AttributeError('ASSIGNMENT cell.xCM=%s is illegal. xCM is read only variable'%(_xCM))

    __swig_setmethods__["xCM"] = setxCM     
    if _newclass: xCM = property(_CompuCell.CellG_xCM_get,setxCM)


    def setyCM(self,_yCM):
        raise AttributeError('ASSIGNMENT cell.yCM=%s is illegal. yCM is read only variable'%(_yCM))

    __swig_setmethods__["yCM"] = setyCM     
    if _newclass: yCM = property(_CompuCell.CellG_yCM_get,setyCM)

    def setzCM(self,_zCM):
        raise AttributeError('ASSIGNMENT cell.zCM=%s is illegal. zCM is read only variable'%(_zCM))

    __swig_setmethods__["zCM"] = setzCM     
    if _newclass: zCM = property(_CompuCell.CellG_zCM_get,setzCM)


    def setxCOM(self,_xCOM):
        raise AttributeError('ASSIGNMENT cell.xCOM=%s is illegal. xCOM is read only variable'%(_xCOM))

    __swig_setmethods__["xCOM"] = setxCOM     
    if _newclass: xCOM = property(_CompuCell.CellG_xCOM_get,setxCOM)

    def setyCOM(self,_yCOM):
        raise AttributeError('ASSIGNMENT cell.yCOM=%s is illegal. yCOM is read only variable'%(_yCOM))

    __swig_setmethods__["yCOM"] = setyCOM     
    if _newclass: yCOM = property(_CompuCell.CellG_yCOM_get,setyCOM)

    def setzCOM(self,_zCOM):
        raise AttributeError('ASSIGNMENT cell.zCOM=%s is illegal. zCOM is read only variable'%(_zCOM))

    __swig_setmethods__["zCOM"] = setzCOM     
    if _newclass: zCOM = property(_CompuCell.CellG_zCOM_get,setzCOM)

    def setxCOMPrev(self,_xCOMPrev):
        raise AttributeError('ASSIGNMENT cell.xCOMPrev=%s is illegal. xCOMPrev is read only variable'%(_xCOMPrev))

    __swig_setmethods__["xCOMPrev"] = setxCOMPrev     
    if _newclass: xCOMPrev = property(_CompuCell.CellG_xCOMPrev_get,setxCOMPrev)


    def setyCOMPrev(self,_yCOMPrev):
        raise AttributeError('ASSIGNMENT cell.yCOMPrev=%s is illegal. yCOMPrev is read only variable'%(_yCOMPrev))

    __swig_setmethods__["yCOMPrev"] = setyCOMPrev     
    if _newclass: yCOMPrev = property(_CompuCell.CellG_yCOMPrev_get,setyCOMPrev)

    def setzCOMPrev(self,_zCOMPrev):
        raise AttributeError('ASSIGNMENT cell.zCOMPrev=%s is illegal. zCOMPrev is read only variable'%(_zCOMPrev))

    __swig_setmethods__["zCOMPrev"] = setzCOMPrev     
    if _newclass: zCOMPrev = property(_CompuCell.CellG_zCOMPrev_get,setzCOMPrev)


    def setiXX(self,_iXX):
        raise AttributeError('ASSIGNMENT cell.iXX=%s is illegal. iXX is read only variable'%(_iXX))

    __swig_setmethods__["iXX"] = setiXX     
    if _newclass: iXX = property(_CompuCell.CellG_iXX_get,setiXX)


    def setiXY(self,_iXY):
        raise AttributeError('ASSIGNMENT cell.iXY=%s is illegal. iXY is read only variable'%(_iXY))

    __swig_setmethods__["iXY"] = setiXY     
    if _newclass: iXY = property(_CompuCell.CellG_iXY_get,setiXY)

    def setiXZ(self,_iXZ):
        raise AttributeError('ASSIGNMENT cell.iXZ=%s is illegal. iXZ is read only variable'%(_iXZ))

    __swig_setmethods__["iXZ"] = setiXZ     
    if _newclass: iXZ = property(_CompuCell.CellG_iXZ_get,setiXZ)


    def setiYY(self,_iYY):
        raise AttributeError('ASSIGNMENT cell.iYY=%s is illegal. iYY is read only variable'%(_iYY))

    __swig_setmethods__["iYY"] = setiYY     
    if _newclass: iYY = property(_CompuCell.CellG_iYY_get,setiYY)    

    def setiYZ(self,_iYZ):
        raise AttributeError('ASSIGNMENT cell.iYZ=%s is illegal. iYZ is read only variable'%(_iYZ))

    __swig_setmethods__["iYZ"] = setiYZ     
    if _newclass: iYZ = property(_CompuCell.CellG_iYZ_get,setiYZ)    

    def setiZZ(self,_iZZ):
        raise AttributeError('ASSIGNMENT cell.iZZ=%s is illegal. iZZ is read only variable'%(_iZZ))

    __swig_setmethods__["iZZ"] = setiZZ     
    if _newclass: iZZ = property(_CompuCell.CellG_iZZ_get,setiZZ)    

    def setlX(self,_lX):
        raise AttributeError('ASSIGNMENT cell.lX=%s is illegal. lX is read only variable'%(_lX))

    __swig_setmethods__["lX"] = setlX     
    if _newclass: lX = property(_CompuCell.CellG_lX_get,setlX)

    def setlY(self,_lY):
        raise AttributeError('ASSIGNMENT cell.lY=%s is illegal. lY is read only variable'%(_lY))

    __swig_setmethods__["lY"] = setlY     
    if _newclass: lY = property(_CompuCell.CellG_lY_get,setlY)

    def setlX(self,_lX):
        raise AttributeError('ASSIGNMENT cell.lX=%s is illegal. lX is read only variable'%(_lX))

    __swig_setmethods__["lX"] = setlX     
    if _newclass: lX = property(_CompuCell.CellG_lX_get,setlX)

    def setecc(self,_ecc):
        raise AttributeError('ASSIGNMENT cell.ecc=%s is illegal. ecc is read only variable'%(_ecc))

    __swig_setmethods__["ecc"] = setecc     
    if _newclass: ecc = property(_CompuCell.CellG_ecc_get,setecc)

    def setid(self,_id):
        raise AttributeError('ASSIGNMENT cell.id=%s is illegal. id is read only variable'%(_id))

    __swig_setmethods__["id"] = setid     
    if _newclass: id = property(_CompuCell.CellG_id_get,setid)

    def setclusterId(self,_clusterId):
        raise AttributeError('ASSIGNMENT cell.clusterId=%s is illegal. Please use self.inventory.reassignClusterId(cell,NEW_CLUSTER_ID) function'%(_clusterId))

    __swig_setmethods__["clusterId"] = setclusterId     
    if _newclass: clusterId = property(_CompuCell.CellG_clusterId_get,setclusterId)


    def setextraAttribPtr(self,_extraAttribPtr):
        raise AttributeError('ASSIGNMENT cell.extraAttribPtr=%s is illegal. extraAttribPtr is read only variable'%(_extraAttribPtr))

    __swig_setmethods__["extraAttribPtr"] = setextraAttribPtr     
    if _newclass: extraAttribPtr = property(_CompuCell.CellG_extraAttribPtr_get,setextraAttribPtr)

    def setpyAttrib(self,_pyAttrib):
        raise AttributeError('ASSIGNMENT cell.pyAttrib=%s is illegal. pyAttrib is read only variable'%(_pyAttrib))

    __swig_setmethods__["pyAttrib"] = setpyAttrib     
    if _newclass: pyAttrib = property(_CompuCell.CellG_pyAttrib_get,setpyAttrib)


    # simplifying access to cell's Python dictionary
    def setdict(self,_dict):
    # raise AttributeError('ASSIGNMENT cell.dict=%s is illegal. dict can only be modified but not replaced'%(_dict))
        raise AttributeError('ASSIGNMENT cell.dict=%s is illegal. Dictionary "dict" can only be modified but not replaced'%(_dict))

    def getdict(self):
        dict_object = _CompuCell.getPyAttrib(self)
        return _CompuCell.getPyAttrib(self)

    __swig_setmethods__["dict"] = setdict
    __swig_getmethods__["dict"] = getdict

    if _newclass: dict = property(getdict,setdict)    

    # simplifying access to sbml models
    def setsbml(self, sbml) :		
        raise AttributeError('ASSIGNMENT cell.sbml = %s is illegal. '
                             '"sbml" attribute can only be modified but not replaced' % (sbml))

    def getsbml(self) :
        import weakref
        try:

            sbml_fetcher = self.dict['__sbml_fetcher']

            sbml_fetcher.cell_obj = weakref.ref(self)

    # sbml_fetcher.cell_ref = weakref.ref(self)

            return sbml_fetcher
        except (KeyError,AttributeError):

            class SBMLFetcher :
                def __init__(self, cell=None) :
                    import weakref
                    self.cell_id = -1
                    self.cell_obj = None
                    if cell is not None:
                        self.cell_id = cell.id



                def __getattr__(self, item) :
                    if item == 'cell_id':
                        return self.__dict__['cell_id']

                    cell_obj = self.cell_obj()
                    cell_dict = cell_obj.dict

                    try :
                        sbml_solver_dict = cell_dict['SBMLSolver']
                    except KeyError :
                        raise KeyError('Cell id={cell_id} has no SBML solvers'.format(cell_id = self.cell_id))

                    item_to_search = item
                    rr_flag = False
                    if item.startswith('_rr_'):
                        item_to_search = item[4:]
                        rr_flag = True

                    try :
                        rr_object =  sbml_solver_dict[item_to_search]
                    except KeyError :
                        raise KeyError('Could not find SBML solver with id={sbml_solver_id} in cell id={cell_id} '.format(
                            sbml_solver_id = item_to_search, cell_id = self.cell_id))

                    if rr_flag:
                        return rr_object
                    else:
                        return rr_object.model

            sbml_fetcher = SBMLFetcher(cell=self)
            self.dict['__sbml_fetcher'] = sbml_fetcher
            sbml_fetcher.cell_obj = weakref.ref(self)
            return sbml_fetcher


    __swig_setmethods__["sbml"] = setsbml
    __swig_getmethods__["sbml"] = getsbml

    if _newclass : sbml = property(getsbml, setsbml)

    __maboss__ = '__maboss__'

    def _get_maboss(self):
        cell_dict = self.dict
        class MaBoSSAccessor:
            def __getattr__(self, item):
                if CellG.__maboss__ not in cell_dict.keys():
                    raise KeyError('No registered MaBoSS models.')
                elif item not in cell_dict[CellG.__maboss__].keys():
                    raise KeyError(f'Could not find MaBoSS solver with name {item}.')
                return cell_dict[CellG.__maboss__][item]
        return MaBoSSAccessor()

    def _set_maboss(self, val):
        raise AttributeError('ASSIGNMENT cell.maboss = %s is illegal. '
                             '"maboss" attribute can only be modified but not replaced' % (maboss))

    __swig_getmethods__["maboss"] = _get_maboss
    __swig_setmethods__["maboss"] = _set_maboss

    if _newclass : maboss = property(_get_maboss, _set_maboss)



    def derived_property_getpressure(self):
    	return self.getPressure()

    __swig_getmethods__["pressure"] = derived_property_getpressure

    def derived_property_setpressure(self, _val):
    	raise AttributeError('Assignment of derived property pressure is illegal.')

    __swig_setmethods__["pressure"] = derived_property_setpressure

    if _newclass : pressure = property(derived_property_getpressure, derived_property_setpressure)



    def derived_property_getsurfaceTension(self):
    	return self.getSurfaceTension()

    __swig_getmethods__["surfaceTension"] = derived_property_getsurfaceTension

    def derived_property_setsurfaceTension(self, _val):
    	raise AttributeError('Assignment of derived property surfaceTension is illegal.')

    __swig_setmethods__["surfaceTension"] = derived_property_setsurfaceTension

    if _newclass : surfaceTension = property(derived_property_getsurfaceTension, derived_property_setsurfaceTension)



    def derived_property_getclusterSurfaceTension(self):
    	return self.getClusterSurfaceTension()

    __swig_getmethods__["clusterSurfaceTension"] = derived_property_getclusterSurfaceTension

    def derived_property_setclusterSurfaceTension(self, _val):
    	raise AttributeError('Assignment of derived property clusterSurfaceTension is illegal.')

    __swig_setmethods__["clusterSurfaceTension"] = derived_property_setclusterSurfaceTension

    if _newclass : clusterSurfaceTension = property(derived_property_getclusterSurfaceTension, derived_property_setclusterSurfaceTension)


    __swig_destroy__ = _CompuCell.delete_CellG
    __del__ = lambda self: None
CellG_swigregister = _CompuCell.CellG_swigregister
CellG_swigregister(CellG)

class Cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Cell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Cell
    __del__ = lambda self: None
Cell_swigregister = _CompuCell.Cell_swigregister
Cell_swigregister(Cell)

class CellPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellPtr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cellPtr"] = _CompuCell.CellPtr_cellPtr_set
    __swig_getmethods__["cellPtr"] = _CompuCell.CellPtr_cellPtr_get
    if _newclass:
        cellPtr = _swig_property(_CompuCell.CellPtr_cellPtr_get, _CompuCell.CellPtr_cellPtr_set)

    def __init__(self, *args):
        this = _CompuCell.new_CellPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CellPtr
    __del__ = lambda self: None
CellPtr_swigregister = _CompuCell.CellPtr_swigregister
CellPtr_swigregister(CellPtr)

class NeighborFinderParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeighborFinderParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeighborFinderParams, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_NeighborFinderParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_NeighborFinderParams
    __del__ = lambda self: None

    def reset(self, *args):
        return _CompuCell.NeighborFinderParams_reset(self, *args)
    __swig_setmethods__["pt"] = _CompuCell.NeighborFinderParams_pt_set
    __swig_getmethods__["pt"] = _CompuCell.NeighborFinderParams_pt_get
    if _newclass:
        pt = _swig_property(_CompuCell.NeighborFinderParams_pt_get, _CompuCell.NeighborFinderParams_pt_set)
    __swig_setmethods__["token"] = _CompuCell.NeighborFinderParams_token_set
    __swig_getmethods__["token"] = _CompuCell.NeighborFinderParams_token_get
    if _newclass:
        token = _swig_property(_CompuCell.NeighborFinderParams_token_get, _CompuCell.NeighborFinderParams_token_set)
    __swig_setmethods__["distance"] = _CompuCell.NeighborFinderParams_distance_set
    __swig_getmethods__["distance"] = _CompuCell.NeighborFinderParams_distance_get
    if _newclass:
        distance = _swig_property(_CompuCell.NeighborFinderParams_distance_get, _CompuCell.NeighborFinderParams_distance_set)
    __swig_setmethods__["checkBounds"] = _CompuCell.NeighborFinderParams_checkBounds_set
    __swig_getmethods__["checkBounds"] = _CompuCell.NeighborFinderParams_checkBounds_get
    if _newclass:
        checkBounds = _swig_property(_CompuCell.NeighborFinderParams_checkBounds_get, _CompuCell.NeighborFinderParams_checkBounds_set)
NeighborFinderParams_swigregister = _CompuCell.NeighborFinderParams_swigregister
NeighborFinderParams_swigregister(NeighborFinderParams)

class bpmPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bpmPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bpmPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_bpmPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_bpmPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.bpmPlugin_init(self, *args)

    def destroyPlugin(self, *args):
        return _CompuCell.bpmPlugin_destroyPlugin(self, *args)

    def unload(self, *args):
        return _CompuCell.bpmPlugin_unload(self, *args)

    def clearInfos(self, *args):
        return _CompuCell.bpmPlugin_clearInfos(self, *args)

    def closeLibraries(self, *args):
        return _CompuCell.bpmPlugin_closeLibraries(self, *args)

    def dependsOn(self, *args):
        return _CompuCell.bpmPlugin_dependsOn(self, *args)

    def get(self, *args):
        return _CompuCell.bpmPlugin_get(self, *args)

    def isLoaded(self, *args):
        return _CompuCell.bpmPlugin_isLoaded(self, *args)

    def getPluginInfo(self, *args):
        return _CompuCell.bpmPlugin_getPluginInfo(self, *args)

    def getPluginInfos(self, *args):
        return _CompuCell.bpmPlugin_getPluginInfos(self, *args)

    def loadLibraries(self, *args):
        return _CompuCell.bpmPlugin_loadLibraries(self, *args)

    def loadLibrary(self, *args):
        return _CompuCell.bpmPlugin_loadLibrary(self, *args)

    def registerPlugin(self, *args):
        return _CompuCell.bpmPlugin_registerPlugin(self, *args)

    def setPluginException(self, *args):
        return _CompuCell.bpmPlugin_setPluginException(self, *args)
bpmPlugin_swigregister = _CompuCell.bpmPlugin_swigregister
bpmPlugin_swigregister(bpmPlugin)
cvar = _CompuCell.cvar
bpmPlugin.libExtension = _CompuCell.cvar.bpmPlugin_libExtension

class bpmSteppable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bpmSteppable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bpmSteppable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_bpmSteppable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_bpmSteppable
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.bpmSteppable_init(self, *args)

    def destroyPlugin(self, *args):
        return _CompuCell.bpmSteppable_destroyPlugin(self, *args)

    def unload(self, *args):
        return _CompuCell.bpmSteppable_unload(self, *args)

    def clearInfos(self, *args):
        return _CompuCell.bpmSteppable_clearInfos(self, *args)

    def closeLibraries(self, *args):
        return _CompuCell.bpmSteppable_closeLibraries(self, *args)

    def dependsOn(self, *args):
        return _CompuCell.bpmSteppable_dependsOn(self, *args)

    def get(self, *args):
        return _CompuCell.bpmSteppable_get(self, *args)

    def isLoaded(self, *args):
        return _CompuCell.bpmSteppable_isLoaded(self, *args)

    def getPluginInfo(self, *args):
        return _CompuCell.bpmSteppable_getPluginInfo(self, *args)

    def getPluginInfos(self, *args):
        return _CompuCell.bpmSteppable_getPluginInfos(self, *args)

    def loadLibraries(self, *args):
        return _CompuCell.bpmSteppable_loadLibraries(self, *args)

    def loadLibrary(self, *args):
        return _CompuCell.bpmSteppable_loadLibrary(self, *args)

    def registerPlugin(self, *args):
        return _CompuCell.bpmSteppable_registerPlugin(self, *args)

    def setPluginException(self, *args):
        return _CompuCell.bpmSteppable_setPluginException(self, *args)
bpmSteppable_swigregister = _CompuCell.bpmSteppable_swigregister
bpmSteppable_swigregister(bpmSteppable)
bpmSteppable.libExtension = _CompuCell.cvar.bpmSteppable_libExtension

class pluginmanagertemplate(bpmPlugin):
    __swig_setmethods__ = {}
    for _s in [bpmPlugin]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pluginmanagertemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [bpmPlugin]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, pluginmanagertemplate, name)
    __repr__ = _swig_repr

    def getPluginMap(self, *args):
        return _CompuCell.pluginmanagertemplate_getPluginMap(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_pluginmanagertemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_pluginmanagertemplate
    __del__ = lambda self: None

    def setSimulator(self, *args):
        return _CompuCell.pluginmanagertemplate_setSimulator(self, *args)

    def init(self, *args):
        return _CompuCell.pluginmanagertemplate_init(self, *args)
pluginmanagertemplate_swigregister = _CompuCell.pluginmanagertemplate_swigregister
pluginmanagertemplate_swigregister(pluginmanagertemplate)

class steppablemanagertemplate(bpmSteppable):
    __swig_setmethods__ = {}
    for _s in [bpmSteppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, steppablemanagertemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [bpmSteppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, steppablemanagertemplate, name)
    __repr__ = _swig_repr

    def getPluginMap(self, *args):
        return _CompuCell.steppablemanagertemplate_getPluginMap(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_steppablemanagertemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_steppablemanagertemplate
    __del__ = lambda self: None

    def setSimulator(self, *args):
        return _CompuCell.steppablemanagertemplate_setSimulator(self, *args)

    def init(self, *args):
        return _CompuCell.steppablemanagertemplate_init(self, *args)
steppablemanagertemplate_swigregister = _CompuCell.steppablemanagertemplate_swigregister
steppablemanagertemplate_swigregister(steppablemanagertemplate)


def round(*args):
    return _CompuCell.round(*args)
round = _CompuCell.round
class floatfield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatfield, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        createInstance = staticmethod(_CompuCell.floatfield_createInstance)
    else:
        createInstance = _CompuCell.floatfield_createInstance

    def set(self, *args):
        return _CompuCell.floatfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.floatfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.floatfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.floatfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.floatfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.floatfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.floatfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.floatfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.floatfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.floatfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.floatfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.floatfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.floatfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.floatfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.floatfield___getitem__(self, *args)


    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))  
        self.setitem(newSliceTuple,_val)



    def setitem(self, *args):
        return _CompuCell.floatfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_floatfield
    __del__ = lambda self: None
floatfield_swigregister = _CompuCell.floatfield_swigregister
floatfield_swigregister(floatfield)

def floatfield_createInstance(*args):
    return _CompuCell.floatfield_createInstance(*args)
floatfield_createInstance = _CompuCell.floatfield_createInstance

class floatfieldImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatfieldImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatfieldImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_floatfieldImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_floatfieldImpl
    __del__ = lambda self: None

    def set(self, *args):
        return _CompuCell.floatfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.floatfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.floatfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.floatfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.floatfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.floatfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.floatfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.floatfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.floatfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.floatfieldImpl_isValid(self, *args)
floatfieldImpl_swigregister = _CompuCell.floatfieldImpl_swigregister
floatfieldImpl_swigregister(floatfieldImpl)

class intfield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intfield, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        createInstance = staticmethod(_CompuCell.intfield_createInstance)
    else:
        createInstance = _CompuCell.intfield_createInstance

    def set(self, *args):
        return _CompuCell.intfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.intfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.intfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.intfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.intfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.intfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.intfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.intfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.intfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.intfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.intfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.intfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.intfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.intfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.intfield___getitem__(self, *args)


    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))  
        self.setitem(newSliceTuple,_val)



    def setitem(self, *args):
        return _CompuCell.intfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_intfield
    __del__ = lambda self: None
intfield_swigregister = _CompuCell.intfield_swigregister
intfield_swigregister(intfield)

def intfield_createInstance(*args):
    return _CompuCell.intfield_createInstance(*args)
intfield_createInstance = _CompuCell.intfield_createInstance

class intfieldImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intfieldImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intfieldImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_intfieldImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_intfieldImpl
    __del__ = lambda self: None

    def set(self, *args):
        return _CompuCell.intfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.intfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.intfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.intfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.intfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.intfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.intfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.intfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.intfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.intfieldImpl_isValid(self, *args)
intfieldImpl_swigregister = _CompuCell.intfieldImpl_swigregister
intfieldImpl_swigregister(intfieldImpl)

class cellfield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellfield, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        createInstance = staticmethod(_CompuCell.cellfield_createInstance)
    else:
        createInstance = _CompuCell.cellfield_createInstance

    def set(self, *args):
        return _CompuCell.cellfield_set(self, *args)

    def get(self, *args):
        return _CompuCell.cellfield_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.cellfield_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.cellfield_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.cellfield_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.cellfield_isValid(self, *args)

    def setDim(self, *args):
        return _CompuCell.cellfield_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.cellfield_resizeAndShift(self, *args)

    def clearSecData(self, *args):
        return _CompuCell.cellfield_clearSecData(self, *args)

    def getNeighbor(self, *args):
        return _CompuCell.cellfield_getNeighbor(self, *args)

    def isLittleEndian(self, *args):
        return _CompuCell.cellfield_isLittleEndian(self, *args)

    def __str__(self, *args):
        return _CompuCell.cellfield___str__(self, *args)

    def min(self, *args):
        return _CompuCell.cellfield_min(self, *args)

    def max(self, *args):
        return _CompuCell.cellfield_max(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.cellfield___getitem__(self, *args)


    def normalizeSlice(self, s):
        norm = lambda x : x if x is None else int(round(x))
        return slice ( norm(s.start),norm(s.stop), norm(s.step) )

    def __setitem__(self,_indexTyple,_val):
        newSliceTuple = tuple(map(lambda x : self.normalizeSlice(x) if isinstance(x,slice) else x , _indexTyple))  
        self.setitem(newSliceTuple,_val,self.volumeTrackerPlugin)



    def setitem(self, *args):
        return _CompuCell.cellfield_setitem(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellfield
    __del__ = lambda self: None
cellfield_swigregister = _CompuCell.cellfield_swigregister
cellfield_swigregister(cellfield)

def cellfield_createInstance(*args):
    return _CompuCell.cellfield_createInstance(*args)
cellfield_createInstance = _CompuCell.cellfield_createInstance

class cellfieldImpl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellfieldImpl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellfieldImpl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_cellfieldImpl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_cellfieldImpl
    __del__ = lambda self: None

    def set(self, *args):
        return _CompuCell.cellfieldImpl_set(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.cellfieldImpl_resizeAndShift(self, *args)

    def setDim(self, *args):
        return _CompuCell.cellfieldImpl_setDim(self, *args)

    def getQuick(self, *args):
        return _CompuCell.cellfieldImpl_getQuick(self, *args)

    def setQuick(self, *args):
        return _CompuCell.cellfieldImpl_setQuick(self, *args)

    def get(self, *args):
        return _CompuCell.cellfieldImpl_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.cellfieldImpl_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.cellfieldImpl_setByIndex(self, *args)

    def getDim(self, *args):
        return _CompuCell.cellfieldImpl_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.cellfieldImpl_isValid(self, *args)
cellfieldImpl_swigregister = _CompuCell.cellfieldImpl_swigregister
cellfieldImpl_swigregister(cellfieldImpl)

class watchablecellfield(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, watchablecellfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, watchablecellfield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_watchablecellfield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_watchablecellfield
    __del__ = lambda self: None

    def addChangeWatcher(self, *args):
        return _CompuCell.watchablecellfield_addChangeWatcher(self, *args)

    def set(self, *args):
        return _CompuCell.watchablecellfield_set(self, *args)
watchablecellfield_swigregister = _CompuCell.watchablecellfield_swigregister
watchablecellfield_swigregister(watchablecellfield)

class vectorstdstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstdstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstdstring, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorstdstring_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorstdstring___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorstdstring___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorstdstring___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorstdstring___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorstdstring___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorstdstring___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorstdstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorstdstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorstdstring___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorstdstring_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorstdstring_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorstdstring_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorstdstring_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorstdstring_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorstdstring_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorstdstring_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorstdstring_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorstdstring_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorstdstring_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorstdstring_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorstdstring_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorstdstring_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectorstdstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectorstdstring_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorstdstring_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorstdstring_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorstdstring_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorstdstring_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorstdstring_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorstdstring_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorstdstring_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorstdstring
    __del__ = lambda self: None
vectorstdstring_swigregister = _CompuCell.vectorstdstring_swigregister
vectorstdstring_swigregister(vectorstdstring)

class vectordouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectordouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectordouble, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectordouble_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectordouble___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectordouble___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectordouble___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectordouble___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectordouble___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectordouble___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectordouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectordouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectordouble___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectordouble_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectordouble_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectordouble_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectordouble_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectordouble_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectordouble_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectordouble_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectordouble_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectordouble_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectordouble_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectordouble_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectordouble_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectordouble_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectordouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectordouble_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectordouble_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectordouble_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectordouble_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectordouble_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectordouble_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectordouble_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectordouble_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectordouble
    __del__ = lambda self: None
vectordouble_swigregister = _CompuCell.vectordouble_swigregister
vectordouble_swigregister(vectordouble)

class vectorvectordouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorvectordouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorvectordouble, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorvectordouble_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorvectordouble___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorvectordouble___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorvectordouble___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorvectordouble___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorvectordouble___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorvectordouble___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorvectordouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorvectordouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorvectordouble___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorvectordouble_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorvectordouble_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorvectordouble_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorvectordouble_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorvectordouble_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorvectordouble_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorvectordouble_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorvectordouble_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorvectordouble_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorvectordouble_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorvectordouble_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorvectordouble_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorvectordouble_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectorvectordouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectorvectordouble_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorvectordouble_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorvectordouble_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorvectordouble_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorvectordouble_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorvectordouble_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorvectordouble_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorvectordouble_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorvectordouble
    __del__ = lambda self: None
vectorvectordouble_swigregister = _CompuCell.vectorvectordouble_swigregister
vectorvectordouble_swigregister(vectorvectordouble)

class vectorint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorint, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorint_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorint___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorint___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorint___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorint___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorint___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorint___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorint___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorint_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorint_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorint_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorint_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorint_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorint_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorint_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorint_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorint_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorint_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorint_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorint_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorint_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectorint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectorint_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorint_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorint_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorint_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorint_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorint_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorint_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorint_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorint
    __del__ = lambda self: None
vectorint_swigregister = _CompuCell.vectorint_swigregister
vectorint_swigregister(vectorint)

class vectorunsignedchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorunsignedchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorunsignedchar, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorunsignedchar_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorunsignedchar___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorunsignedchar___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorunsignedchar___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorunsignedchar___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorunsignedchar___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorunsignedchar___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorunsignedchar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorunsignedchar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorunsignedchar___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorunsignedchar_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorunsignedchar_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorunsignedchar_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorunsignedchar_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorunsignedchar_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorunsignedchar_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorunsignedchar_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorunsignedchar_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorunsignedchar_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorunsignedchar_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorunsignedchar_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorunsignedchar_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorunsignedchar_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectorunsignedchar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectorunsignedchar_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorunsignedchar_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorunsignedchar_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorunsignedchar_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorunsignedchar_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorunsignedchar_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorunsignedchar_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorunsignedchar_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorunsignedchar
    __del__ = lambda self: None
vectorunsignedchar_swigregister = _CompuCell.vectorunsignedchar_swigregister
vectorunsignedchar_swigregister(vectorunsignedchar)

class vectorbool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorbool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorbool, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.vectorbool_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.vectorbool___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.vectorbool___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.vectorbool___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.vectorbool___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.vectorbool___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.vectorbool___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.vectorbool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.vectorbool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.vectorbool___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.vectorbool_pop(self, *args)

    def append(self, *args):
        return _CompuCell.vectorbool_append(self, *args)

    def empty(self, *args):
        return _CompuCell.vectorbool_empty(self, *args)

    def size(self, *args):
        return _CompuCell.vectorbool_size(self, *args)

    def swap(self, *args):
        return _CompuCell.vectorbool_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.vectorbool_begin(self, *args)

    def end(self, *args):
        return _CompuCell.vectorbool_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.vectorbool_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.vectorbool_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.vectorbool_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.vectorbool_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.vectorbool_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.vectorbool_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_vectorbool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.vectorbool_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.vectorbool_front(self, *args)

    def back(self, *args):
        return _CompuCell.vectorbool_back(self, *args)

    def assign(self, *args):
        return _CompuCell.vectorbool_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.vectorbool_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.vectorbool_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.vectorbool_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.vectorbool_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_vectorbool
    __del__ = lambda self: None
vectorbool_swigregister = _CompuCell.vectorbool_swigregister
vectorbool_swigregister(vectorbool)

class cellgchangewatcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellgchangewatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellgchangewatcher, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def field3DChange(self, *args):
        return _CompuCell.cellgchangewatcher_field3DChange(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellgchangewatcher
    __del__ = lambda self: None
cellgchangewatcher_swigregister = _CompuCell.cellgchangewatcher_swigregister
cellgchangewatcher_swigregister(cellgchangewatcher)

class mvectorCellGPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mvectorCellGPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mvectorCellGPtr, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mvectorCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mvectorCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mvectorCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mvectorCellGPtr___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.mvectorCellGPtr___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mvectorCellGPtr___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.mvectorCellGPtr_pop(self, *args)

    def append(self, *args):
        return _CompuCell.mvectorCellGPtr_append(self, *args)

    def empty(self, *args):
        return _CompuCell.mvectorCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mvectorCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mvectorCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mvectorCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mvectorCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mvectorCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mvectorCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mvectorCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mvectorCellGPtr_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.mvectorCellGPtr_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.mvectorCellGPtr_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_mvectorCellGPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.mvectorCellGPtr_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.mvectorCellGPtr_front(self, *args)

    def back(self, *args):
        return _CompuCell.mvectorCellGPtr_back(self, *args)

    def assign(self, *args):
        return _CompuCell.mvectorCellGPtr_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.mvectorCellGPtr_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.mvectorCellGPtr_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.mvectorCellGPtr_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.mvectorCellGPtr_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_mvectorCellGPtr
    __del__ = lambda self: None
mvectorCellGPtr_swigregister = _CompuCell.mvectorCellGPtr_swigregister
mvectorCellGPtr_swigregister(mvectorCellGPtr)

class mapLongCellGPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapLongCellGPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapLongCellGPtr, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongCellGPtr___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongCellGPtr_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongCellGPtr_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongCellGPtr_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongCellGPtr_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongCellGPtr___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongCellGPtr_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongCellGPtr___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongCellGPtr_asdict(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_mapLongCellGPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.mapLongCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongCellGPtr_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongCellGPtr_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongCellGPtr_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongCellGPtr_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongCellGPtr_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongCellGPtr_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongCellGPtr
    __del__ = lambda self: None
mapLongCellGPtr_swigregister = _CompuCell.mapLongCellGPtr_swigregister
mapLongCellGPtr_swigregister(mapLongCellGPtr)

class mapLongFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapLongFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapLongFloat, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongFloat_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongFloat___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongFloat___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongFloat___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongFloat___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongFloat___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongFloat_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongFloat_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongFloat_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongFloat_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongFloat___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongFloat_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongFloat_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongFloat___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongFloat_asdict(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_mapLongFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.mapLongFloat_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongFloat_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongFloat_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongFloat_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongFloat_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongFloat_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongFloat_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongFloat_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongFloat_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongFloat_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongFloat_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongFloat_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongFloat_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongFloat_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongFloat
    __del__ = lambda self: None
mapLongFloat_swigregister = _CompuCell.mapLongFloat_swigregister
mapLongFloat_swigregister(mapLongFloat)

class mapLongmapLongCellGPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapLongmapLongCellGPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapLongmapLongCellGPtr, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_keys(self, *args)

    def values(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_values(self, *args)

    def items(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_asdict(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_mapLongmapLongCellGPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_count(self, *args)

    def erase(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_erase(self, *args)

    def find(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.mapLongmapLongCellGPtr_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongmapLongCellGPtr
    __del__ = lambda self: None
mapLongmapLongCellGPtr_swigregister = _CompuCell.mapLongmapLongCellGPtr_swigregister
mapLongmapLongCellGPtr_swigregister(mapLongmapLongCellGPtr)

class CellGChangeWatcher(cellgchangewatcher):
    __swig_setmethods__ = {}
    for _s in [cellgchangewatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellGChangeWatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [cellgchangewatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellGChangeWatcher, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_CellGChangeWatcher
    __del__ = lambda self: None
CellGChangeWatcher_swigregister = _CompuCell.CellGChangeWatcher_swigregister
CellGChangeWatcher_swigregister(CellGChangeWatcher)

class TypeChangeWatcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeChangeWatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeChangeWatcher, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_TypeChangeWatcher
    __del__ = lambda self: None

    def typeChange(self, *args):
        return _CompuCell.TypeChangeWatcher_typeChange(self, *args)
TypeChangeWatcher_swigregister = _CompuCell.TypeChangeWatcher_swigregister
TypeChangeWatcher_swigregister(TypeChangeWatcher)

class TypeTransition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeTransition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeTransition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_TypeTransition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_TypeTransition
    __del__ = lambda self: None

    def registerTypeChangeWatcher(self, *args):
        return _CompuCell.TypeTransition_registerTypeChangeWatcher(self, *args)

    def setType(self, *args):
        return _CompuCell.TypeTransition_setType(self, *args)
TypeTransition_swigregister = _CompuCell.TypeTransition_swigregister
TypeTransition_swigregister(TypeTransition)

class Automaton(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Automaton, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Automaton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_Automaton
    __del__ = lambda self: None

    def creation(self, *args):
        return _CompuCell.Automaton_creation(self, *args)

    def updateVariables(self, *args):
        return _CompuCell.Automaton_updateVariables(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.Automaton_field3DChange(self, *args)

    def getCellType(self, *args):
        return _CompuCell.Automaton_getCellType(self, *args)

    def getTypeName(self, *args):
        return _CompuCell.Automaton_getTypeName(self, *args)

    def getTypeId(self, *args):
        return _CompuCell.Automaton_getTypeId(self, *args)

    def getMaxTypeId(self, *args):
        return _CompuCell.Automaton_getMaxTypeId(self, *args)
Automaton_swigregister = _CompuCell.Automaton_swigregister
Automaton_swigregister(Automaton)

class CC3DCellList(mvectorCellGPtr):
    __swig_setmethods__ = {}
    for _s in [mvectorCellGPtr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DCellList, name, value)
    __swig_getmethods__ = {}
    for _s in [mvectorCellGPtr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DCellList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_CC3DCellList
    __del__ = lambda self: None

    def getBaseClass(self, *args):
        return _CompuCell.CC3DCellList_getBaseClass(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_CC3DCellList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CC3DCellList_swigregister = _CompuCell.CC3DCellList_swigregister
CC3DCellList_swigregister(CC3DCellList)

class CompartmentInventory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentInventory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentInventory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CompartmentInventory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CompartmentInventory
    __del__ = lambda self: None

    def setPotts3DPtr(self, *args):
        return _CompuCell.CompartmentInventory_setPotts3DPtr(self, *args)

    def getClusterCells(self, *args):
        return _CompuCell.CompartmentInventory_getClusterCells(self, *args)

    def addToInventory(self, *args):
        return _CompuCell.CompartmentInventory_addToInventory(self, *args)

    def removeClusterFromInventory(self, *args):
        return _CompuCell.CompartmentInventory_removeClusterFromInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell.CompartmentInventory_removeFromInventory(self, *args)

    def getContainer(self, *args):
        return _CompuCell.CompartmentInventory_getContainer(self, *args)

    def getInventorySize(self, *args):
        return _CompuCell.CompartmentInventory_getInventorySize(self, *args)

    def getSize(self, *args):
        return _CompuCell.CompartmentInventory_getSize(self, *args)

    def inventoryBegin(self, *args):
        return _CompuCell.CompartmentInventory_inventoryBegin(self, *args)

    def inventoryEnd(self, *args):
        return _CompuCell.CompartmentInventory_inventoryEnd(self, *args)

    def incrementIterator(self, *args):
        return _CompuCell.CompartmentInventory_incrementIterator(self, *args)

    def decrementIterator(self, *args):
        return _CompuCell.CompartmentInventory_decrementIterator(self, *args)
CompartmentInventory_swigregister = _CompuCell.CompartmentInventory_swigregister
CompartmentInventory_swigregister(CompartmentInventory)

class CellIdentifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellIdentifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellIdentifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["cellId"] = _CompuCell.CellIdentifier_cellId_set
    __swig_getmethods__["cellId"] = _CompuCell.CellIdentifier_cellId_get
    if _newclass:
        cellId = _swig_property(_CompuCell.CellIdentifier_cellId_get, _CompuCell.CellIdentifier_cellId_set)
    __swig_setmethods__["clusterId"] = _CompuCell.CellIdentifier_clusterId_set
    __swig_getmethods__["clusterId"] = _CompuCell.CellIdentifier_clusterId_get
    if _newclass:
        clusterId = _swig_property(_CompuCell.CellIdentifier_clusterId_get, _CompuCell.CellIdentifier_clusterId_set)

    def __lt__(self, *args):
        return _CompuCell.CellIdentifier___lt__(self, *args)
    __swig_destroy__ = _CompuCell.delete_CellIdentifier
    __del__ = lambda self: None
CellIdentifier_swigregister = _CompuCell.CellIdentifier_swigregister
CellIdentifier_swigregister(CellIdentifier)

class CellInventory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellInventory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellInventory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellInventory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CellInventory
    __del__ = lambda self: None

    def addToInventory(self, *args):
        return _CompuCell.CellInventory_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell.CellInventory_removeFromInventory(self, *args)

    def getCellInventorySize(self, *args):
        return _CompuCell.CellInventory_getCellInventorySize(self, *args)

    def getSize(self, *args):
        return _CompuCell.CellInventory_getSize(self, *args)

    def cellInventoryBegin(self, *args):
        return _CompuCell.CellInventory_cellInventoryBegin(self, *args)

    def cellInventoryEnd(self, *args):
        return _CompuCell.CellInventory_cellInventoryEnd(self, *args)

    def incrementIterator(self, *args):
        return _CompuCell.CellInventory_incrementIterator(self, *args)

    def decrementIterator(self, *args):
        return _CompuCell.CellInventory_decrementIterator(self, *args)

    def reassignClusterId(self, *args):
        return _CompuCell.CellInventory_reassignClusterId(self, *args)

    def find(self, *args):
        return _CompuCell.CellInventory_find(self, *args)

    def getContainer(self, *args):
        return _CompuCell.CellInventory_getContainer(self, *args)

    def setPotts3DPtr(self, *args):
        return _CompuCell.CellInventory_setPotts3DPtr(self, *args)

    def getCellById(self, *args):
        return _CompuCell.CellInventory_getCellById(self, *args)

    def getCellByIds(self, *args):
        return _CompuCell.CellInventory_getCellByIds(self, *args)

    def attemptFetchingCellById(self, *args):
        return _CompuCell.CellInventory_attemptFetchingCellById(self, *args)

    def getCell(self, *args):
        return _CompuCell.CellInventory_getCell(self, *args)

    def getClusterCells(self, *args):
        return _CompuCell.CellInventory_getClusterCells(self, *args)

    def initCellInventoryByType(self, *args):
        return _CompuCell.CellInventory_initCellInventoryByType(self, *args)

    def initCellInventoryByMultiType(self, *args):
        return _CompuCell.CellInventory_initCellInventoryByMultiType(self, *args)

    def getClusterInventory(self, *args):
        return _CompuCell.CellInventory_getClusterInventory(self, *args)

    def cleanInventory(self, *args):
        return _CompuCell.CellInventory_cleanInventory(self, *args)
CellInventory_swigregister = _CompuCell.CellInventory_swigregister
CellInventory_swigregister(CellInventory)

class EnergyFunctionCalculator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyFunctionCalculator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyFunctionCalculator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_EnergyFunctionCalculator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculator
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.EnergyFunctionCalculator_init(self, *args)

    def registerEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionCalculator_registerEnergyFunction(self, *args)

    def registerEnergyFunctionWithName(self, *args):
        return _CompuCell.EnergyFunctionCalculator_registerEnergyFunctionWithName(self, *args)

    def unregisterEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionCalculator_unregisterEnergyFunction(self, *args)

    def configureEnergyCalculator(self, *args):
        return _CompuCell.EnergyFunctionCalculator_configureEnergyCalculator(self, *args)

    def get_number_energy_fcn_calculations(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_number_energy_fcn_calculations(self, *args)

    def range(self, *args):
        return _CompuCell.EnergyFunctionCalculator_range(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.EnergyFunctionCalculator_changeEnergy(self, *args)

    def setPotts(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setPotts(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setSimulator(self, *args)

    def get_current_mcs_accepted_mask_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_accepted_mask_npy_array(self, *args)

    def get_current_mcs_prob_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_prob_npy_array(self, *args)

    def get_current_mcs_flip_attempt_points_npy_array(self, *args):
        return _CompuCell.EnergyFunctionCalculator_get_current_mcs_flip_attempt_points_npy_array(self, *args)

    def setLastFlipAccepted(self, *args):
        return _CompuCell.EnergyFunctionCalculator_setLastFlipAccepted(self, *args)

    def set_acceptance_probability(self, *args):
        return _CompuCell.EnergyFunctionCalculator_set_acceptance_probability(self, *args)

    def getEnergyFunctionNames(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getEnergyFunctionNames(self, *args)

    def getCurrentEnergyChanges(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getCurrentEnergyChanges(self, *args)

    def getCurrentFlipResults(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getCurrentFlipResults(self, *args)

    def getEnergyFunctionNameToValueMap(self, *args):
        return _CompuCell.EnergyFunctionCalculator_getEnergyFunctionNameToValueMap(self, *args)

    def log_output(self, *args):
        return _CompuCell.EnergyFunctionCalculator_log_output(self, *args)
EnergyFunctionCalculator_swigregister = _CompuCell.EnergyFunctionCalculator_swigregister
EnergyFunctionCalculator_swigregister(EnergyFunctionCalculator)

class Point3DHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3DHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3DHasher, name)
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.Point3DHasher___call__(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_Point3DHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Point3DHasher
    __del__ = lambda self: None
Point3DHasher_swigregister = _CompuCell.Point3DHasher_swigregister
Point3DHasher_swigregister(Point3DHasher)

class Point3DComparator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3DComparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3DComparator, name)
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.Point3DComparator___call__(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_Point3DComparator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Point3DComparator
    __del__ = lambda self: None
Point3DComparator_swigregister = _CompuCell.Point3DComparator_swigregister
Point3DComparator_swigregister(Point3DComparator)

class Potts3D(_object):
    """Potts3D class used for getting information about the lattice and cells"""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Potts3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Potts3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Potts3D class used for getting information about the lattice and cells
        Potts3D class used for getting information about the lattice and cells
        """
        this = _CompuCell.new_Potts3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Potts3D
    __del__ = lambda self: None

    def createCellField(self, *args):
        return _CompuCell.Potts3D_createCellField(self, *args)

    def resizeCellField(self, *args):
        return _CompuCell.Potts3D_resizeCellField(self, *args)

    def getTemperature(self, *args):
        return _CompuCell.Potts3D_getTemperature(self, *args)

    def getCurrentAttempt(self, *args):
        return _CompuCell.Potts3D_getCurrentAttempt(self, *args)

    def getNumberOfAttempts(self, *args):
        """Returns the number of attempted flips in a Monte Carlo step"""
        return _CompuCell.Potts3D_getNumberOfAttempts(self, *args)


    def getNumberOfAttemptedEnergyCalculations(self, *args):
        """I don't know"""
        return _CompuCell.Potts3D_getNumberOfAttemptedEnergyCalculations(self, *args)


    def getNumberOfAcceptedSpinFlips(self, *args):
        return _CompuCell.Potts3D_getNumberOfAcceptedSpinFlips(self, *args)

    def registerConnectivityConstraint(self, *args):
        return _CompuCell.Potts3D_registerConnectivityConstraint(self, *args)

    def getConnectivityConstraint(self, *args):
        return _CompuCell.Potts3D_getConnectivityConstraint(self, *args)

    def checkIfFrozen(self, *args):
        return _CompuCell.Potts3D_checkIfFrozen(self, *args)

    def getBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getBoundaryPixelSetPtr(self, *args)

    def getJustInsertedBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getJustInsertedBoundaryPixelSetPtr(self, *args)

    def getJustDeletedBoundaryPixelSetPtr(self, *args):
        return _CompuCell.Potts3D_getJustDeletedBoundaryPixelSetPtr(self, *args)

    def getBoundaryPixelVectorPtr(self, *args):
        return _CompuCell.Potts3D_getBoundaryPixelVectorPtr(self, *args)

    def add_step_output(self, *args):
        return _CompuCell.Potts3D_add_step_output(self, *args)

    def get_step_output(self, *args):
        return _CompuCell.Potts3D_get_step_output(self, *args)

    def getLatticeType(self, *args):
        return _CompuCell.Potts3D_getLatticeType(self, *args)

    def getDepth(self, *args):
        """Return the Depth"""
        return _CompuCell.Potts3D_getDepth(self, *args)


    def setDepth(self, *args):
        """Function to set the Depth (neighbor distance)"""
        return _CompuCell.Potts3D_setDepth(self, *args)


    def setNeighborOrder(self, *args):
        return _CompuCell.Potts3D_setNeighborOrder(self, *args)

    def set_test_output_generate_flag(self, *args):
        return _CompuCell.Potts3D_set_test_output_generate_flag(self, *args)

    def get_test_output_generate_flag(self, *args):
        return _CompuCell.Potts3D_get_test_output_generate_flag(self, *args)

    def set_test_run_flag(self, *args):
        return _CompuCell.Potts3D_set_test_run_flag(self, *args)

    def get_test_run_flag(self, *args):
        return _CompuCell.Potts3D_get_test_run_flag(self, *args)

    def set_simulation_input_dir(self, *args):
        return _CompuCell.Potts3D_set_simulation_input_dir(self, *args)

    def get_simulation_input_dir(self, *args):
        return _CompuCell.Potts3D_get_simulation_input_dir(self, *args)

    def initializeCellTypeMotility(self, *args):
        return _CompuCell.Potts3D_initializeCellTypeMotility(self, *args)

    def setCellTypeMotilityVec(self, *args):
        return _CompuCell.Potts3D_setCellTypeMotilityVec(self, *args)

    def getCellTypeMotilityVec(self, *args):
        return _CompuCell.Potts3D_getCellTypeMotilityVec(self, *args)

    def setDebugOutputFrequency(self, *args):
        """Function to set output frequency of debug statements"""
        return _CompuCell.Potts3D_setDebugOutputFrequency(self, *args)


    def setSimulator(self, *args):
        return _CompuCell.Potts3D_setSimulator(self, *args)

    def setFrozenTypeVector(self, *args):
        return _CompuCell.Potts3D_setFrozenTypeVector(self, *args)

    def getFrozenTypeVector(self, *args):
        return _CompuCell.Potts3D_getFrozenTypeVector(self, *args)

    def setMassUnit(self, *args):
        return _CompuCell.Potts3D_setMassUnit(self, *args)

    def setLengthUnit(self, *args):
        return _CompuCell.Potts3D_setLengthUnit(self, *args)

    def setTimeUnit(self, *args):
        return _CompuCell.Potts3D_setTimeUnit(self, *args)

    def setEnergyUnit(self, *args):
        return _CompuCell.Potts3D_setEnergyUnit(self, *args)

    def getMassUnit(self, *args):
        return _CompuCell.Potts3D_getMassUnit(self, *args)

    def getLengthUnit(self, *args):
        return _CompuCell.Potts3D_getLengthUnit(self, *args)

    def getTimeUnit(self, *args):
        return _CompuCell.Potts3D_getTimeUnit(self, *args)

    def getEnergyUnit(self, *args):
        return _CompuCell.Potts3D_getEnergyUnit(self, *args)

    def getDisplayUnitsFlag(self, *args):
        return _CompuCell.Potts3D_getDisplayUnitsFlag(self, *args)

    def updateUnits(self, *args):
        return _CompuCell.Potts3D_updateUnits(self, *args)

    def getFlipNeighbor(self, *args):
        return _CompuCell.Potts3D_getFlipNeighbor(self, *args)

    def setBoundaryXName(self, *args):
        return _CompuCell.Potts3D_setBoundaryXName(self, *args)

    def setBoundaryYName(self, *args):
        return _CompuCell.Potts3D_setBoundaryYName(self, *args)

    def setBoundaryZName(self, *args):
        return _CompuCell.Potts3D_setBoundaryZName(self, *args)

    def getBoundaryXName(self, *args):
        return _CompuCell.Potts3D_getBoundaryXName(self, *args)

    def getBoundaryYName(self, *args):
        return _CompuCell.Potts3D_getBoundaryYName(self, *args)

    def getBoundaryZName(self, *args):
        return _CompuCell.Potts3D_getBoundaryZName(self, *args)

    def setMinCoordinates(self, *args):
        return _CompuCell.Potts3D_setMinCoordinates(self, *args)

    def setMaxCoordinates(self, *args):
        return _CompuCell.Potts3D_setMaxCoordinates(self, *args)

    def getMinCoordinates(self, *args):
        return _CompuCell.Potts3D_getMinCoordinates(self, *args)

    def getMaxCoordinates(self, *args):
        return _CompuCell.Potts3D_getMaxCoordinates(self, *args)

    def getTypeTransition(self, *args):
        return _CompuCell.Potts3D_getTypeTransition(self, *args)

    def createEnergyFunction(self, *args):
        return _CompuCell.Potts3D_createEnergyFunction(self, *args)

    def getEnergyFunctionCalculator(self, *args):
        return _CompuCell.Potts3D_getEnergyFunctionCalculator(self, *args)

    def getCellInventory(self, *args):
        """Returns a list of all the cells in the simulation"""
        return _CompuCell.Potts3D_getCellInventory(self, *args)


    def clean_cell_field(self, *args):
        return _CompuCell.Potts3D_clean_cell_field(self, *args)

    def registerAttributeAdder(self, *args):
        return _CompuCell.Potts3D_registerAttributeAdder(self, *args)

    def registerEnergyFunction(self, *args):
        return _CompuCell.Potts3D_registerEnergyFunction(self, *args)

    def registerEnergyFunctionWithName(self, *args):
        return _CompuCell.Potts3D_registerEnergyFunctionWithName(self, *args)

    def unregisterEnergyFunction(self, *args):
        return _CompuCell.Potts3D_unregisterEnergyFunction(self, *args)

    def getNewNumber(self, *args):
        return _CompuCell.Potts3D_getNewNumber(self, *args)

    def registerAutomaton(self, *args):
        return _CompuCell.Potts3D_registerAutomaton(self, *args)

    def getAutomaton(self, *args):
        return _CompuCell.Potts3D_getAutomaton(self, *args)

    def setParallelUtils(self, *args):
        return _CompuCell.Potts3D_setParallelUtils(self, *args)

    def registerAcceptanceFunction(self, *args):
        return _CompuCell.Potts3D_registerAcceptanceFunction(self, *args)

    def setAcceptanceFunctionByName(self, *args):
        return _CompuCell.Potts3D_setAcceptanceFunctionByName(self, *args)

    def getAcceptanceFunction(self, *args):
        return _CompuCell.Potts3D_getAcceptanceFunction(self, *args)

    def setFluctuationAmplitudeFunctionByName(self, *args):
        return _CompuCell.Potts3D_setFluctuationAmplitudeFunctionByName(self, *args)

    def registerCellGChangeWatcher(self, *args):
        return _CompuCell.Potts3D_registerCellGChangeWatcher(self, *args)

    def registerClassAccessor(self, *args):
        return _CompuCell.Potts3D_registerClassAccessor(self, *args)

    def registerStepper(self, *args):
        return _CompuCell.Potts3D_registerStepper(self, *args)

    def registerFixedStepper(self, *args):
        return _CompuCell.Potts3D_registerFixedStepper(self, *args)

    def unregisterFixedStepper(self, *args):
        return _CompuCell.Potts3D_unregisterFixedStepper(self, *args)

    def getEnergy(self, *args):
        return _CompuCell.Potts3D_getEnergy(self, *args)

    def getEnergyFunctionNames(self, *args):
        return _CompuCell.Potts3D_getEnergyFunctionNames(self, *args)

    def getCurrentEnergyChanges(self, *args):
        return _CompuCell.Potts3D_getCurrentEnergyChanges(self, *args)

    def getCurrentFlipResults(self, *args):
        return _CompuCell.Potts3D_getCurrentFlipResults(self, *args)

    def createCellG(self, *args):
        return _CompuCell.Potts3D_createCellG(self, *args)

    def createCellGSpecifiedIds(self, *args):
        return _CompuCell.Potts3D_createCellGSpecifiedIds(self, *args)

    def createCell(self, *args):
        return _CompuCell.Potts3D_createCell(self, *args)

    def createCellSpecifiedIds(self, *args):
        return _CompuCell.Potts3D_createCellSpecifiedIds(self, *args)

    def destroyCellG(self, *args):
        return _CompuCell.Potts3D_destroyCellG(self, *args)

    def getCellFactoryGroupPtr(self, *args):
        return _CompuCell.Potts3D_getCellFactoryGroupPtr(self, *args)

    def getNumCells(self, *args):
        return _CompuCell.Potts3D_getNumCells(self, *args)

    def totalEnergy(self, *args):
        return _CompuCell.Potts3D_totalEnergy(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.Potts3D_changeEnergy(self, *args)

    def metropolis(self, *args):
        return _CompuCell.Potts3D_metropolis(self, *args)
    __swig_setmethods__["metropolisFcnPtr"] = _CompuCell.Potts3D_metropolisFcnPtr_set
    __swig_getmethods__["metropolisFcnPtr"] = _CompuCell.Potts3D_metropolisFcnPtr_get
    if _newclass:
        metropolisFcnPtr = _swig_property(_CompuCell.Potts3D_metropolisFcnPtr_get, _CompuCell.Potts3D_metropolisFcnPtr_set)

    def metropolisList(self, *args):
        return _CompuCell.Potts3D_metropolisList(self, *args)

    def metropolisFast(self, *args):
        return _CompuCell.Potts3D_metropolisFast(self, *args)

    def metropolisBoundaryWalker(self, *args):
        return _CompuCell.Potts3D_metropolisBoundaryWalker(self, *args)

    def metropolisTestRun(self, *args):
        return _CompuCell.Potts3D_metropolisTestRun(self, *args)

    def setMetropolisAlgorithm(self, *args):
        return _CompuCell.Potts3D_setMetropolisAlgorithm(self, *args)

    def getCellFieldG(self, *args):
        return _CompuCell.Potts3D_getCellFieldG(self, *args)

    def getCellFieldGImpl(self, *args):
        return _CompuCell.Potts3D_getCellFieldGImpl(self, *args)

    def update(self, *args):
        return _CompuCell.Potts3D_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.Potts3D_steerableName(self, *args)

    def runSteppers(self, *args):
        return _CompuCell.Potts3D_runSteppers(self, *args)

    def getRecentlyCreatedClusterId(self, *args):
        return _CompuCell.Potts3D_getRecentlyCreatedClusterId(self, *args)

    def getRecentlyCreatedCellId(self, *args):
        return _CompuCell.Potts3D_getRecentlyCreatedCellId(self, *args)
Potts3D_swigregister = _CompuCell.Potts3D_swigregister
Potts3D_swigregister(Potts3D)

class Steppable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Steppable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Steppable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frequency"] = _CompuCell.Steppable_frequency_set
    __swig_getmethods__["frequency"] = _CompuCell.Steppable_frequency_get
    if _newclass:
        frequency = _swig_property(_CompuCell.Steppable_frequency_get, _CompuCell.Steppable_frequency_set)

    def __init__(self, *args):
        this = _CompuCell.new_Steppable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Steppable
    __del__ = lambda self: None

    def start(self, *args):
        return _CompuCell.Steppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.Steppable_step(self, *args)

    def finish(self, *args):
        return _CompuCell.Steppable_finish(self, *args)

    def toString(self, *args):
        return _CompuCell.Steppable_toString(self, *args)
Steppable_swigregister = _CompuCell.Steppable_swigregister
Steppable_swigregister(Steppable)

class ClassRegistry(Steppable):
    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClassRegistry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ClassRegistry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ClassRegistry
    __del__ = lambda self: None

    def getStepper(self, *args):
        return _CompuCell.ClassRegistry_getStepper(self, *args)

    def addStepper(self, *args):
        return _CompuCell.ClassRegistry_addStepper(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClassRegistry_extraInit(self, *args)

    def start(self, *args):
        return _CompuCell.ClassRegistry_start(self, *args)

    def step(self, *args):
        return _CompuCell.ClassRegistry_step(self, *args)

    def finish(self, *args):
        return _CompuCell.ClassRegistry_finish(self, *args)

    def initModules(self, *args):
        return _CompuCell.ClassRegistry_initModules(self, *args)
ClassRegistry_swigregister = _CompuCell.ClassRegistry_swigregister
ClassRegistry_swigregister(ClassRegistry)

class SteerableObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteerableObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteerableObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_SteerableObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_SteerableObject
    __del__ = lambda self: None

    def update(self, *args):
        return _CompuCell.SteerableObject_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.SteerableObject_steerableName(self, *args)
SteerableObject_swigregister = _CompuCell.SteerableObject_swigregister
SteerableObject_swigregister(SteerableObject)

class Simulator(Steppable):
    """Simulation class used for getting information about the simulation"""

    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulator, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Simulator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ps"] = _CompuCell.Simulator_ps_set
    __swig_getmethods__["ps"] = _CompuCell.Simulator_ps_get
    if _newclass:
        ps = _swig_property(_CompuCell.Simulator_ps_get, _CompuCell.Simulator_ps_set)
    __swig_setmethods__["ppdCC3DPtr"] = _CompuCell.Simulator_ppdCC3DPtr_set
    __swig_getmethods__["ppdCC3DPtr"] = _CompuCell.Simulator_ppdCC3DPtr_get
    if _newclass:
        ppdCC3DPtr = _swig_property(_CompuCell.Simulator_ppdCC3DPtr_get, _CompuCell.Simulator_ppdCC3DPtr_set)
    __swig_setmethods__["ppd"] = _CompuCell.Simulator_ppd_set
    __swig_getmethods__["ppd"] = _CompuCell.Simulator_ppd_get
    if _newclass:
        ppd = _swig_property(_CompuCell.Simulator_ppd_get, _CompuCell.Simulator_ppd_set)
    __swig_setmethods__["ppdPtr"] = _CompuCell.Simulator_ppdPtr_set
    __swig_getmethods__["ppdPtr"] = _CompuCell.Simulator_ppdPtr_get
    if _newclass:
        ppdPtr = _swig_property(_CompuCell.Simulator_ppdPtr_get, _CompuCell.Simulator_ppdPtr_set)
    __swig_setmethods__["pUtils"] = _CompuCell.Simulator_pUtils_set
    __swig_getmethods__["pUtils"] = _CompuCell.Simulator_pUtils_get
    if _newclass:
        pUtils = _swig_property(_CompuCell.Simulator_pUtils_get, _CompuCell.Simulator_pUtils_set)
    __swig_setmethods__["pUtilsSingle"] = _CompuCell.Simulator_pUtilsSingle_set
    __swig_getmethods__["pUtilsSingle"] = _CompuCell.Simulator_pUtilsSingle_get
    if _newclass:
        pUtilsSingle = _swig_property(_CompuCell.Simulator_pUtilsSingle_get, _CompuCell.Simulator_pUtilsSingle_set)
    __swig_setmethods__["output_directory"] = _CompuCell.Simulator_output_directory_set
    __swig_getmethods__["output_directory"] = _CompuCell.Simulator_output_directory_get
    if _newclass:
        output_directory = _swig_property(_CompuCell.Simulator_output_directory_get, _CompuCell.Simulator_output_directory_set)
    __swig_setmethods__["simValue"] = _CompuCell.Simulator_simValue_set
    __swig_getmethods__["simValue"] = _CompuCell.Simulator_simValue_get
    if _newclass:
        simValue = _swig_property(_CompuCell.Simulator_simValue_get, _CompuCell.Simulator_simValue_set)

    def setOutputDirectory(self, *args):
        return _CompuCell.Simulator_setOutputDirectory(self, *args)

    def getOutputDirectory(self, *args):
        return _CompuCell.Simulator_getOutputDirectory(self, *args)

    def setOutputRedirectionTarget(self, *args):
        return _CompuCell.Simulator_setOutputRedirectionTarget(self, *args)

    def getCerrStreamBufOrig(self, *args):
        return _CompuCell.Simulator_getCerrStreamBufOrig(self, *args)

    def restoreCerrStreamBufOrig(self, *args):
        return _CompuCell.Simulator_restoreCerrStreamBufOrig(self, *args)

    def setRestartEnabled(self, *args):
        return _CompuCell.Simulator_setRestartEnabled(self, *args)

    def getRestartEnabled(self, *args):
        return _CompuCell.Simulator_getRestartEnabled(self, *args)
    __swig_setmethods__["pluginManager"] = _CompuCell.Simulator_pluginManager_set
    __swig_getmethods__["pluginManager"] = _CompuCell.Simulator_pluginManager_get
    if _newclass:
        pluginManager = _swig_property(_CompuCell.Simulator_pluginManager_get, _CompuCell.Simulator_pluginManager_set)
    __swig_setmethods__["steppableManager"] = _CompuCell.Simulator_steppableManager_set
    __swig_getmethods__["steppableManager"] = _CompuCell.Simulator_steppableManager_get
    if _newclass:
        steppableManager = _swig_property(_CompuCell.Simulator_steppableManager_get, _CompuCell.Simulator_steppableManager_set)
    __swig_setmethods__["pluginBaseManager"] = _CompuCell.Simulator_pluginBaseManager_set
    __swig_getmethods__["pluginBaseManager"] = _CompuCell.Simulator_pluginBaseManager_get
    if _newclass:
        pluginBaseManager = _swig_property(_CompuCell.Simulator_pluginBaseManager_get, _CompuCell.Simulator_pluginBaseManager_set)

    def __init__(self, *args):
        """Simulation class used for getting information about the simulation"""
        this = _CompuCell.new_Simulator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Simulator
    __del__ = lambda self: None

    def add_step_output(self, *args):
        return _CompuCell.Simulator_add_step_output(self, *args)

    def get_step_output(self, *args):
        return _CompuCell.Simulator_get_step_output(self, *args)

    def getRecentErrorMessage(self, *args):
        return _CompuCell.Simulator_getRecentErrorMessage(self, *args)

    def setNewPlayerFlag(self, *args):
        return _CompuCell.Simulator_setNewPlayerFlag(self, *args)

    def getNewPlayerFlag(self, *args):
        return _CompuCell.Simulator_getNewPlayerFlag(self, *args)

    def getBasePath(self, *args):
        return _CompuCell.Simulator_getBasePath(self, *args)

    def setBasePath(self, *args):
        return _CompuCell.Simulator_setBasePath(self, *args)

    def getParallelUtils(self, *args):
        return _CompuCell.Simulator_getParallelUtils(self, *args)

    def getParallelUtilsSingleThread(self, *args):
        return _CompuCell.Simulator_getParallelUtilsSingleThread(self, *args)

    def getBoundaryStrategy(self, *args):
        return _CompuCell.Simulator_getBoundaryStrategy(self, *args)

    def registerSteerableObject(self, *args):
        return _CompuCell.Simulator_registerSteerableObject(self, *args)

    def unregisterSteerableObject(self, *args):
        return _CompuCell.Simulator_unregisterSteerableObject(self, *args)

    def getSteerableObject(self, *args):
        return _CompuCell.Simulator_getSteerableObject(self, *args)

    def setNumSteps(self, *args):
        return _CompuCell.Simulator_setNumSteps(self, *args)

    def getNumSteps(self, *args):
        """Returns the number of Monte Carlo steps the simulation will perform"""
        return _CompuCell.Simulator_getNumSteps(self, *args)


    def getStep(self, *args):
        """Returns the current Monte Carlo step"""
        return _CompuCell.Simulator_getStep(self, *args)


    def setStep(self, *args):
        return _CompuCell.Simulator_setStep(self, *args)

    def isStepping(self, *args):
        """Returns a bool value on the condition of whether the simulation is currently running"""
        return _CompuCell.Simulator_isStepping(self, *args)


    def getFlip2DimRatio(self, *args):
        return _CompuCell.Simulator_getFlip2DimRatio(self, *args)

    def setRandomSeed(self, *args):
        return _CompuCell.Simulator_setRandomSeed(self, *args)

    def getRandomSeed(self, *args):
        return _CompuCell.Simulator_getRandomSeed(self, *args)

    def getPotts(self, *args):
        """Returns a pointer to the Potts class"""
        return _CompuCell.Simulator_getPotts(self, *args)


    def getSimulatorPtr(self, *args):
        return _CompuCell.Simulator_getSimulatorPtr(self, *args)

    def getClassRegistry(self, *args):
        return _CompuCell.Simulator_getClassRegistry(self, *args)

    def formatErrorMessage(self, *args):
        return _CompuCell.Simulator_formatErrorMessage(self, *args)

    def registerConcentrationField(self, *args):
        return _CompuCell.Simulator_registerConcentrationField(self, *args)

    def getConcentrationFieldNameMap(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldNameMap(self, *args)

    def postEvent(self, *args):
        return _CompuCell.Simulator_postEvent(self, *args)

    def getConcentrationFieldNameVector(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldNameVector(self, *args)

    def getConcentrationFieldByName(self, *args):
        return _CompuCell.Simulator_getConcentrationFieldByName(self, *args)

    def registerSerializer(self, *args):
        return _CompuCell.Simulator_registerSerializer(self, *args)

    def serialize(self, *args):
        return _CompuCell.Simulator_serialize(self, *args)

    def start(self, *args):
        return _CompuCell.Simulator_start(self, *args)

    def extraInit(self, *args):
        return _CompuCell.Simulator_extraInit(self, *args)

    def step(self, *args):
        return _CompuCell.Simulator_step(self, *args)

    def finish(self, *args):
        return _CompuCell.Simulator_finish(self, *args)

    def cleanAfterSimulation(self, *args):
        return _CompuCell.Simulator_cleanAfterSimulation(self, *args)

    def unloadModules(self, *args):
        return _CompuCell.Simulator_unloadModules(self, *args)

    def initializePottsCC3D(self, *args):
        return _CompuCell.Simulator_initializePottsCC3D(self, *args)

    def processMetadataCC3D(self, *args):
        return _CompuCell.Simulator_processMetadataCC3D(self, *args)

    def initializeCC3D(self, *args):
        return _CompuCell.Simulator_initializeCC3D(self, *args)

    def setPottsParseData(self, *args):
        return _CompuCell.Simulator_setPottsParseData(self, *args)

    def getCC3DModuleData(self, *args):
        return _CompuCell.Simulator_getCC3DModuleData(self, *args)

    def updateCC3DModule(self, *args):
        return _CompuCell.Simulator_updateCC3DModule(self, *args)

    def steer(self, *args):
        return _CompuCell.Simulator_steer(self, *args)
Simulator_swigregister = _CompuCell.Simulator_swigregister
Simulator_swigregister(Simulator)

BASE = _CompuCell.BASE
LATTICE_RESIZE = _CompuCell.LATTICE_RESIZE
CHANGE_NUMBER_OF_WORK_NODES = _CompuCell.CHANGE_NUMBER_OF_WORK_NODES
class CC3DEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CC3DEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _CompuCell.CC3DEvent_id_set
    __swig_getmethods__["id"] = _CompuCell.CC3DEvent_id_get
    if _newclass:
        id = _swig_property(_CompuCell.CC3DEvent_id_get, _CompuCell.CC3DEvent_id_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEvent
    __del__ = lambda self: None
CC3DEvent_swigregister = _CompuCell.CC3DEvent_swigregister
CC3DEvent_swigregister(CC3DEvent)

class CC3DEventLatticeResize(CC3DEvent):
    __swig_setmethods__ = {}
    for _s in [CC3DEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DEventLatticeResize, name, value)
    __swig_getmethods__ = {}
    for _s in [CC3DEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DEventLatticeResize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CC3DEventLatticeResize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["newDim"] = _CompuCell.CC3DEventLatticeResize_newDim_set
    __swig_getmethods__["newDim"] = _CompuCell.CC3DEventLatticeResize_newDim_get
    if _newclass:
        newDim = _swig_property(_CompuCell.CC3DEventLatticeResize_newDim_get, _CompuCell.CC3DEventLatticeResize_newDim_set)
    __swig_setmethods__["oldDim"] = _CompuCell.CC3DEventLatticeResize_oldDim_set
    __swig_getmethods__["oldDim"] = _CompuCell.CC3DEventLatticeResize_oldDim_get
    if _newclass:
        oldDim = _swig_property(_CompuCell.CC3DEventLatticeResize_oldDim_get, _CompuCell.CC3DEventLatticeResize_oldDim_set)
    __swig_setmethods__["shiftVec"] = _CompuCell.CC3DEventLatticeResize_shiftVec_set
    __swig_getmethods__["shiftVec"] = _CompuCell.CC3DEventLatticeResize_shiftVec_get
    if _newclass:
        shiftVec = _swig_property(_CompuCell.CC3DEventLatticeResize_shiftVec_get, _CompuCell.CC3DEventLatticeResize_shiftVec_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEventLatticeResize
    __del__ = lambda self: None
CC3DEventLatticeResize_swigregister = _CompuCell.CC3DEventLatticeResize_swigregister
CC3DEventLatticeResize_swigregister(CC3DEventLatticeResize)

class CC3DEventChangeNumberOfWorkNodes(CC3DEvent):
    __swig_setmethods__ = {}
    for _s in [CC3DEvent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DEventChangeNumberOfWorkNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [CC3DEvent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DEventChangeNumberOfWorkNodes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CC3DEventChangeNumberOfWorkNodes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["oldNumberOfNodes"] = _CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_set
    __swig_getmethods__["oldNumberOfNodes"] = _CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_get
    if _newclass:
        oldNumberOfNodes = _swig_property(_CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_get, _CompuCell.CC3DEventChangeNumberOfWorkNodes_oldNumberOfNodes_set)
    __swig_setmethods__["newNumberOfNodes"] = _CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_set
    __swig_getmethods__["newNumberOfNodes"] = _CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_get
    if _newclass:
        newNumberOfNodes = _swig_property(_CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_get, _CompuCell.CC3DEventChangeNumberOfWorkNodes_newNumberOfNodes_set)
    __swig_destroy__ = _CompuCell.delete_CC3DEventChangeNumberOfWorkNodes
    __del__ = lambda self: None
CC3DEventChangeNumberOfWorkNodes_swigregister = _CompuCell.CC3DEventChangeNumberOfWorkNodes_swigregister
CC3DEventChangeNumberOfWorkNodes_swigregister(CC3DEventChangeNumberOfWorkNodes)

class ParseData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParseData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ParseData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["moduleName"] = _CompuCell.ParseData_moduleName_set
    __swig_getmethods__["moduleName"] = _CompuCell.ParseData_moduleName_get
    if _newclass:
        moduleName = _swig_property(_CompuCell.ParseData_moduleName_get, _CompuCell.ParseData_moduleName_set)
    __swig_setmethods__["frequency"] = _CompuCell.ParseData_frequency_set
    __swig_getmethods__["frequency"] = _CompuCell.ParseData_frequency_get
    if _newclass:
        frequency = _swig_property(_CompuCell.ParseData_frequency_get, _CompuCell.ParseData_frequency_set)

    def Frequency(self, *args):
        return _CompuCell.ParseData_Frequency(self, *args)

    def ModuleName(self, *args):
        return _CompuCell.ParseData_ModuleName(self, *args)
    __swig_destroy__ = _CompuCell.delete_ParseData
    __del__ = lambda self: None
ParseData_swigregister = _CompuCell.ParseData_swigregister
ParseData_swigregister(ParseData)

class ParserStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParserStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParserStorage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ParserStorage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["steppableCC3DXMLElementVector"] = _CompuCell.ParserStorage_steppableCC3DXMLElementVector_set
    __swig_getmethods__["steppableCC3DXMLElementVector"] = _CompuCell.ParserStorage_steppableCC3DXMLElementVector_get
    if _newclass:
        steppableCC3DXMLElementVector = _swig_property(_CompuCell.ParserStorage_steppableCC3DXMLElementVector_get, _CompuCell.ParserStorage_steppableCC3DXMLElementVector_set)
    __swig_setmethods__["pluginCC3DXMLElementVector"] = _CompuCell.ParserStorage_pluginCC3DXMLElementVector_set
    __swig_getmethods__["pluginCC3DXMLElementVector"] = _CompuCell.ParserStorage_pluginCC3DXMLElementVector_get
    if _newclass:
        pluginCC3DXMLElementVector = _swig_property(_CompuCell.ParserStorage_pluginCC3DXMLElementVector_get, _CompuCell.ParserStorage_pluginCC3DXMLElementVector_set)
    __swig_setmethods__["pottsCC3DXMLElement"] = _CompuCell.ParserStorage_pottsCC3DXMLElement_set
    __swig_getmethods__["pottsCC3DXMLElement"] = _CompuCell.ParserStorage_pottsCC3DXMLElement_get
    if _newclass:
        pottsCC3DXMLElement = _swig_property(_CompuCell.ParserStorage_pottsCC3DXMLElement_get, _CompuCell.ParserStorage_pottsCC3DXMLElement_set)
    __swig_setmethods__["metadataCC3DXMLElement"] = _CompuCell.ParserStorage_metadataCC3DXMLElement_set
    __swig_getmethods__["metadataCC3DXMLElement"] = _CompuCell.ParserStorage_metadataCC3DXMLElement_get
    if _newclass:
        metadataCC3DXMLElement = _swig_property(_CompuCell.ParserStorage_metadataCC3DXMLElement_get, _CompuCell.ParserStorage_metadataCC3DXMLElement_set)
    __swig_setmethods__["updateSteppableCC3DXMLElementVector"] = _CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_set
    __swig_getmethods__["updateSteppableCC3DXMLElementVector"] = _CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_get
    if _newclass:
        updateSteppableCC3DXMLElementVector = _swig_property(_CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_get, _CompuCell.ParserStorage_updateSteppableCC3DXMLElementVector_set)
    __swig_setmethods__["updatePluginCC3DXMLElementVector"] = _CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_set
    __swig_getmethods__["updatePluginCC3DXMLElementVector"] = _CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_get
    if _newclass:
        updatePluginCC3DXMLElementVector = _swig_property(_CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_get, _CompuCell.ParserStorage_updatePluginCC3DXMLElementVector_set)
    __swig_setmethods__["updatePottsCC3DXMLElement"] = _CompuCell.ParserStorage_updatePottsCC3DXMLElement_set
    __swig_getmethods__["updatePottsCC3DXMLElement"] = _CompuCell.ParserStorage_updatePottsCC3DXMLElement_get
    if _newclass:
        updatePottsCC3DXMLElement = _swig_property(_CompuCell.ParserStorage_updatePottsCC3DXMLElement_get, _CompuCell.ParserStorage_updatePottsCC3DXMLElement_set)
    __swig_setmethods__["updateMetadataCC3DXMLElement"] = _CompuCell.ParserStorage_updateMetadataCC3DXMLElement_set
    __swig_getmethods__["updateMetadataCC3DXMLElement"] = _CompuCell.ParserStorage_updateMetadataCC3DXMLElement_get
    if _newclass:
        updateMetadataCC3DXMLElement = _swig_property(_CompuCell.ParserStorage_updateMetadataCC3DXMLElement_get, _CompuCell.ParserStorage_updateMetadataCC3DXMLElement_set)

    def addPottsDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addPottsDataCC3D(self, *args)

    def addMetadataDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addMetadataDataCC3D(self, *args)

    def addPluginDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addPluginDataCC3D(self, *args)

    def addSteppableDataCC3D(self, *args):
        return _CompuCell.ParserStorage_addSteppableDataCC3D(self, *args)
    __swig_destroy__ = _CompuCell.delete_ParserStorage
    __del__ = lambda self: None
ParserStorage_swigregister = _CompuCell.ParserStorage_swigregister
ParserStorage_swigregister(ParserStorage)

class EnergyFunctionCalculatorParseData(ParseData):
    __swig_setmethods__ = {}
    for _s in [ParseData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyFunctionCalculatorParseData, name, value)
    __swig_getmethods__ = {}
    for _s in [ParseData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyFunctionCalculatorParseData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_EnergyFunctionCalculatorParseData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculatorParseData
    __del__ = lambda self: None
EnergyFunctionCalculatorParseData_swigregister = _CompuCell.EnergyFunctionCalculatorParseData_swigregister
EnergyFunctionCalculatorParseData_swigregister(EnergyFunctionCalculatorParseData)

class EnergyFunctionCalculatorStatisticsParseData(EnergyFunctionCalculatorParseData):
    __swig_setmethods__ = {}
    for _s in [EnergyFunctionCalculatorParseData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyFunctionCalculatorStatisticsParseData, name, value)
    __swig_getmethods__ = {}
    for _s in [EnergyFunctionCalculatorParseData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyFunctionCalculatorStatisticsParseData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_EnergyFunctionCalculatorStatisticsParseData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionCalculatorStatisticsParseData
    __del__ = lambda self: None

    def OutputFileName(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputFileName(self, *args)

    def OutputCoreFileNameSpinFlips(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputCoreFileNameSpinFlips(self, *args)

    def GatherResults(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_GatherResults(self, *args)

    def OutputAccepted(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputAccepted(self, *args)

    def OutputRejected(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputRejected(self, *args)

    def OutputTotal(self, *args):
        return _CompuCell.EnergyFunctionCalculatorStatisticsParseData_OutputTotal(self, *args)
    __swig_setmethods__["outFileName"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_set
    __swig_getmethods__["outFileName"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_get
    if _newclass:
        outFileName = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileName_set)
    __swig_setmethods__["analysisFrequency"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_set
    __swig_getmethods__["analysisFrequency"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_get
    if _newclass:
        analysisFrequency = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_analysisFrequency_set)
    __swig_setmethods__["singleSpinFrequency"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_set
    __swig_getmethods__["singleSpinFrequency"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_get
    if _newclass:
        singleSpinFrequency = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_singleSpinFrequency_set)
    __swig_setmethods__["gatherResultsSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_set
    __swig_getmethods__["gatherResultsSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_get
    if _newclass:
        gatherResultsSpinFlip = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_gatherResultsSpinFlip_set)
    __swig_setmethods__["outputAcceptedSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_set
    __swig_getmethods__["outputAcceptedSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_get
    if _newclass:
        outputAcceptedSpinFlip = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputAcceptedSpinFlip_set)
    __swig_setmethods__["outputRejectedSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_set
    __swig_getmethods__["outputRejectedSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_get
    if _newclass:
        outputRejectedSpinFlip = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputRejectedSpinFlip_set)
    __swig_setmethods__["outputTotalSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_set
    __swig_getmethods__["outputTotalSpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_get
    if _newclass:
        outputTotalSpinFlip = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputTotalSpinFlip_set)
    __swig_setmethods__["outputEverySpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_set
    __swig_getmethods__["outputEverySpinFlip"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_get
    if _newclass:
        outputEverySpinFlip = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outputEverySpinFlip_set)
    __swig_setmethods__["outFileCoreNameSpinFlips"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_set
    __swig_getmethods__["outFileCoreNameSpinFlips"] = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_get
    if _newclass:
        outFileCoreNameSpinFlips = _swig_property(_CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_get, _CompuCell.EnergyFunctionCalculatorStatisticsParseData_outFileCoreNameSpinFlips_set)
EnergyFunctionCalculatorStatisticsParseData_swigregister = _CompuCell.EnergyFunctionCalculatorStatisticsParseData_swigregister
EnergyFunctionCalculatorStatisticsParseData_swigregister(EnergyFunctionCalculatorStatisticsParseData)

class PottsParseData(ParseData):
    """
    Class used for defining lattice and simulation.  Gives access to public member variables: Frequency, acceptanceFunctionName, 
    algorithmName, anneal, boundary_x, boundary_y, boundary_z, debugOutputFrequency, depth, depthFlag, dim, energyFcnParseDataPtr, 
    flip2DimRatio, frequency, getEnergyFunctionCalculatorStatisticsParseData, kBoltzman, latticeType, moduleName, neighborOrder, 
    numSteps, offset, seed, shapeAlgorithm, shapeFlag,   shapeIndex, shapeInputfile, shapeReg, shapeSize, temperature
    """

    __swig_setmethods__ = {}
    for _s in [ParseData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PottsParseData, name, value)
    __swig_getmethods__ = {}
    for _s in [ParseData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PottsParseData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Class used for defining lattice and simulation.  Gives access to public member variables: Frequency, acceptanceFunctionName, 
        algorithmName, anneal, boundary_x, boundary_y, boundary_z, debugOutputFrequency, depth, depthFlag, dim, energyFcnParseDataPtr, 
        flip2DimRatio, frequency, getEnergyFunctionCalculatorStatisticsParseData, kBoltzman, latticeType, moduleName, neighborOrder, 
        numSteps, offset, seed, shapeAlgorithm, shapeFlag,   shapeIndex, shapeInputfile, shapeReg, shapeSize, temperature
        """
        this = _CompuCell.new_PottsParseData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PottsParseData
    __del__ = lambda self: None

    def getEnergyFunctionCalculatorStatisticsParseData(self, *args):
        return _CompuCell.PottsParseData_getEnergyFunctionCalculatorStatisticsParseData(self, *args)
    __swig_setmethods__["numSteps"] = _CompuCell.PottsParseData_numSteps_set
    __swig_getmethods__["numSteps"] = _CompuCell.PottsParseData_numSteps_get
    if _newclass:
        numSteps = _swig_property(_CompuCell.PottsParseData_numSteps_get, _CompuCell.PottsParseData_numSteps_set)
    __swig_setmethods__["anneal"] = _CompuCell.PottsParseData_anneal_set
    __swig_getmethods__["anneal"] = _CompuCell.PottsParseData_anneal_get
    if _newclass:
        anneal = _swig_property(_CompuCell.PottsParseData_anneal_get, _CompuCell.PottsParseData_anneal_set)
    __swig_setmethods__["flip2DimRatio"] = _CompuCell.PottsParseData_flip2DimRatio_set
    __swig_getmethods__["flip2DimRatio"] = _CompuCell.PottsParseData_flip2DimRatio_get
    if _newclass:
        flip2DimRatio = _swig_property(_CompuCell.PottsParseData_flip2DimRatio_get, _CompuCell.PottsParseData_flip2DimRatio_set)
    __swig_setmethods__["temperature"] = _CompuCell.PottsParseData_temperature_set
    __swig_getmethods__["temperature"] = _CompuCell.PottsParseData_temperature_get
    if _newclass:
        temperature = _swig_property(_CompuCell.PottsParseData_temperature_get, _CompuCell.PottsParseData_temperature_set)
    __swig_setmethods__["depth"] = _CompuCell.PottsParseData_depth_set
    __swig_getmethods__["depth"] = _CompuCell.PottsParseData_depth_get
    if _newclass:
        depth = _swig_property(_CompuCell.PottsParseData_depth_get, _CompuCell.PottsParseData_depth_set)
    __swig_setmethods__["depthFlag"] = _CompuCell.PottsParseData_depthFlag_set
    __swig_getmethods__["depthFlag"] = _CompuCell.PottsParseData_depthFlag_get
    if _newclass:
        depthFlag = _swig_property(_CompuCell.PottsParseData_depthFlag_get, _CompuCell.PottsParseData_depthFlag_set)
    __swig_setmethods__["seed"] = _CompuCell.PottsParseData_seed_set
    __swig_getmethods__["seed"] = _CompuCell.PottsParseData_seed_get
    if _newclass:
        seed = _swig_property(_CompuCell.PottsParseData_seed_get, _CompuCell.PottsParseData_seed_set)
    __swig_setmethods__["debugOutputFrequency"] = _CompuCell.PottsParseData_debugOutputFrequency_set
    __swig_getmethods__["debugOutputFrequency"] = _CompuCell.PottsParseData_debugOutputFrequency_get
    if _newclass:
        debugOutputFrequency = _swig_property(_CompuCell.PottsParseData_debugOutputFrequency_get, _CompuCell.PottsParseData_debugOutputFrequency_set)
    __swig_setmethods__["boundary_x"] = _CompuCell.PottsParseData_boundary_x_set
    __swig_getmethods__["boundary_x"] = _CompuCell.PottsParseData_boundary_x_get
    if _newclass:
        boundary_x = _swig_property(_CompuCell.PottsParseData_boundary_x_get, _CompuCell.PottsParseData_boundary_x_set)
    __swig_setmethods__["boundary_y"] = _CompuCell.PottsParseData_boundary_y_set
    __swig_getmethods__["boundary_y"] = _CompuCell.PottsParseData_boundary_y_get
    if _newclass:
        boundary_y = _swig_property(_CompuCell.PottsParseData_boundary_y_get, _CompuCell.PottsParseData_boundary_y_set)
    __swig_setmethods__["boundary_z"] = _CompuCell.PottsParseData_boundary_z_set
    __swig_getmethods__["boundary_z"] = _CompuCell.PottsParseData_boundary_z_get
    if _newclass:
        boundary_z = _swig_property(_CompuCell.PottsParseData_boundary_z_get, _CompuCell.PottsParseData_boundary_z_set)
    __swig_setmethods__["algorithmName"] = _CompuCell.PottsParseData_algorithmName_set
    __swig_getmethods__["algorithmName"] = _CompuCell.PottsParseData_algorithmName_get
    if _newclass:
        algorithmName = _swig_property(_CompuCell.PottsParseData_algorithmName_get, _CompuCell.PottsParseData_algorithmName_set)
    __swig_setmethods__["latticeType"] = _CompuCell.PottsParseData_latticeType_set
    __swig_getmethods__["latticeType"] = _CompuCell.PottsParseData_latticeType_get
    if _newclass:
        latticeType = _swig_property(_CompuCell.PottsParseData_latticeType_get, _CompuCell.PottsParseData_latticeType_set)
    __swig_setmethods__["acceptanceFunctionName"] = _CompuCell.PottsParseData_acceptanceFunctionName_set
    __swig_getmethods__["acceptanceFunctionName"] = _CompuCell.PottsParseData_acceptanceFunctionName_get
    if _newclass:
        acceptanceFunctionName = _swig_property(_CompuCell.PottsParseData_acceptanceFunctionName_get, _CompuCell.PottsParseData_acceptanceFunctionName_set)
    __swig_setmethods__["fluctuationAmplitudeFunctionName"] = _CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_set
    __swig_getmethods__["fluctuationAmplitudeFunctionName"] = _CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_get
    if _newclass:
        fluctuationAmplitudeFunctionName = _swig_property(_CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_get, _CompuCell.PottsParseData_fluctuationAmplitudeFunctionName_set)
    __swig_setmethods__["shapeFlag"] = _CompuCell.PottsParseData_shapeFlag_set
    __swig_getmethods__["shapeFlag"] = _CompuCell.PottsParseData_shapeFlag_get
    if _newclass:
        shapeFlag = _swig_property(_CompuCell.PottsParseData_shapeFlag_get, _CompuCell.PottsParseData_shapeFlag_set)
    __swig_setmethods__["shapeAlgorithm"] = _CompuCell.PottsParseData_shapeAlgorithm_set
    __swig_getmethods__["shapeAlgorithm"] = _CompuCell.PottsParseData_shapeAlgorithm_get
    if _newclass:
        shapeAlgorithm = _swig_property(_CompuCell.PottsParseData_shapeAlgorithm_get, _CompuCell.PottsParseData_shapeAlgorithm_set)
    __swig_setmethods__["shapeIndex"] = _CompuCell.PottsParseData_shapeIndex_set
    __swig_getmethods__["shapeIndex"] = _CompuCell.PottsParseData_shapeIndex_get
    if _newclass:
        shapeIndex = _swig_property(_CompuCell.PottsParseData_shapeIndex_get, _CompuCell.PottsParseData_shapeIndex_set)
    __swig_setmethods__["shapeSize"] = _CompuCell.PottsParseData_shapeSize_set
    __swig_getmethods__["shapeSize"] = _CompuCell.PottsParseData_shapeSize_get
    if _newclass:
        shapeSize = _swig_property(_CompuCell.PottsParseData_shapeSize_get, _CompuCell.PottsParseData_shapeSize_set)
    __swig_setmethods__["shapeInputfile"] = _CompuCell.PottsParseData_shapeInputfile_set
    __swig_getmethods__["shapeInputfile"] = _CompuCell.PottsParseData_shapeInputfile_get
    if _newclass:
        shapeInputfile = _swig_property(_CompuCell.PottsParseData_shapeInputfile_get, _CompuCell.PottsParseData_shapeInputfile_set)
    __swig_setmethods__["shapeReg"] = _CompuCell.PottsParseData_shapeReg_set
    __swig_getmethods__["shapeReg"] = _CompuCell.PottsParseData_shapeReg_get
    if _newclass:
        shapeReg = _swig_property(_CompuCell.PottsParseData_shapeReg_get, _CompuCell.PottsParseData_shapeReg_set)
    __swig_setmethods__["offset"] = _CompuCell.PottsParseData_offset_set
    __swig_getmethods__["offset"] = _CompuCell.PottsParseData_offset_get
    if _newclass:
        offset = _swig_property(_CompuCell.PottsParseData_offset_get, _CompuCell.PottsParseData_offset_set)
    __swig_setmethods__["kBoltzman"] = _CompuCell.PottsParseData_kBoltzman_set
    __swig_getmethods__["kBoltzman"] = _CompuCell.PottsParseData_kBoltzman_get
    if _newclass:
        kBoltzman = _swig_property(_CompuCell.PottsParseData_kBoltzman_get, _CompuCell.PottsParseData_kBoltzman_set)
    __swig_setmethods__["neighborOrder"] = _CompuCell.PottsParseData_neighborOrder_set
    __swig_getmethods__["neighborOrder"] = _CompuCell.PottsParseData_neighborOrder_get
    if _newclass:
        neighborOrder = _swig_property(_CompuCell.PottsParseData_neighborOrder_get, _CompuCell.PottsParseData_neighborOrder_set)
    __swig_setmethods__["cellTypeMotilityVector"] = _CompuCell.PottsParseData_cellTypeMotilityVector_set
    __swig_getmethods__["cellTypeMotilityVector"] = _CompuCell.PottsParseData_cellTypeMotilityVector_get
    if _newclass:
        cellTypeMotilityVector = _swig_property(_CompuCell.PottsParseData_cellTypeMotilityVector_get, _CompuCell.PottsParseData_cellTypeMotilityVector_set)
    __swig_setmethods__["dim"] = _CompuCell.PottsParseData_dim_set
    __swig_getmethods__["dim"] = _CompuCell.PottsParseData_dim_get
    if _newclass:
        dim = _swig_property(_CompuCell.PottsParseData_dim_get, _CompuCell.PottsParseData_dim_set)
    __swig_setmethods__["energyFcnParseDataPtr"] = _CompuCell.PottsParseData_energyFcnParseDataPtr_set
    __swig_getmethods__["energyFcnParseDataPtr"] = _CompuCell.PottsParseData_energyFcnParseDataPtr_get
    if _newclass:
        energyFcnParseDataPtr = _swig_property(_CompuCell.PottsParseData_energyFcnParseDataPtr_get, _CompuCell.PottsParseData_energyFcnParseDataPtr_set)

    def Dimensions(self, *args):
        return _CompuCell.PottsParseData_Dimensions(self, *args)

    def Steps(self, *args):
        return _CompuCell.PottsParseData_Steps(self, *args)

    def Anneal(self, *args):
        return _CompuCell.PottsParseData_Anneal(self, *args)

    def FlipNeighborMaxDistance(self, *args):
        return _CompuCell.PottsParseData_FlipNeighborMaxDistance(self, *args)

    def Flip2DimRatio(self, *args):
        return _CompuCell.PottsParseData_Flip2DimRatio(self, *args)

    def Temperature(self, *args):
        return _CompuCell.PottsParseData_Temperature(self, *args)

    def KBoltzman(self, *args):
        return _CompuCell.PottsParseData_KBoltzman(self, *args)

    def Offset(self, *args):
        return _CompuCell.PottsParseData_Offset(self, *args)

    def NeighborOrder(self, *args):
        return _CompuCell.PottsParseData_NeighborOrder(self, *args)

    def LatticeType(self, *args):
        return _CompuCell.PottsParseData_LatticeType(self, *args)

    def AcceptanceFunctionName(self, *args):
        return _CompuCell.PottsParseData_AcceptanceFunctionName(self, *args)

    def FluctuationAmplitudeFunctionName(self, *args):
        return _CompuCell.PottsParseData_FluctuationAmplitudeFunctionName(self, *args)

    def RandomSeed(self, *args):
        return _CompuCell.PottsParseData_RandomSeed(self, *args)

    def DebugOutputFrequency(self, *args):
        return _CompuCell.PottsParseData_DebugOutputFrequency(self, *args)

    def Boundary_x(self, *args):
        return _CompuCell.PottsParseData_Boundary_x(self, *args)

    def Boundary_y(self, *args):
        return _CompuCell.PottsParseData_Boundary_y(self, *args)

    def Boundary_z(self, *args):
        return _CompuCell.PottsParseData_Boundary_z(self, *args)

    def MetropolisAlgorithm(self, *args):
        return _CompuCell.PottsParseData_MetropolisAlgorithm(self, *args)

    def Shape(self, *args):
        return _CompuCell.PottsParseData_Shape(self, *args)
PottsParseData_swigregister = _CompuCell.PottsParseData_swigregister
PottsParseData_swigregister(PottsParseData)


def findMin(*args):
    return _CompuCell.findMin(*args)
findMin = _CompuCell.findMin

def dist(*args):
    return _CompuCell.dist(*args)
dist = _CompuCell.dist

def solveCubicEquationRealCoeeficients(*args):
    return _CompuCell.solveCubicEquationRealCoeeficients(*args)
solveCubicEquationRealCoeeficients = _CompuCell.solveCubicEquationRealCoeeficients
class InertiaTensorComponents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InertiaTensorComponents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InertiaTensorComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_InertiaTensorComponents(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["iXX"] = _CompuCell.InertiaTensorComponents_iXX_set
    __swig_getmethods__["iXX"] = _CompuCell.InertiaTensorComponents_iXX_get
    if _newclass:
        iXX = _swig_property(_CompuCell.InertiaTensorComponents_iXX_get, _CompuCell.InertiaTensorComponents_iXX_set)
    __swig_setmethods__["iYY"] = _CompuCell.InertiaTensorComponents_iYY_set
    __swig_getmethods__["iYY"] = _CompuCell.InertiaTensorComponents_iYY_get
    if _newclass:
        iYY = _swig_property(_CompuCell.InertiaTensorComponents_iYY_get, _CompuCell.InertiaTensorComponents_iYY_set)
    __swig_setmethods__["iZZ"] = _CompuCell.InertiaTensorComponents_iZZ_set
    __swig_getmethods__["iZZ"] = _CompuCell.InertiaTensorComponents_iZZ_get
    if _newclass:
        iZZ = _swig_property(_CompuCell.InertiaTensorComponents_iZZ_get, _CompuCell.InertiaTensorComponents_iZZ_set)
    __swig_setmethods__["iXY"] = _CompuCell.InertiaTensorComponents_iXY_set
    __swig_getmethods__["iXY"] = _CompuCell.InertiaTensorComponents_iXY_get
    if _newclass:
        iXY = _swig_property(_CompuCell.InertiaTensorComponents_iXY_get, _CompuCell.InertiaTensorComponents_iXY_set)
    __swig_setmethods__["iXZ"] = _CompuCell.InertiaTensorComponents_iXZ_set
    __swig_getmethods__["iXZ"] = _CompuCell.InertiaTensorComponents_iXZ_get
    if _newclass:
        iXZ = _swig_property(_CompuCell.InertiaTensorComponents_iXZ_get, _CompuCell.InertiaTensorComponents_iXZ_set)
    __swig_setmethods__["iYZ"] = _CompuCell.InertiaTensorComponents_iYZ_set
    __swig_getmethods__["iYZ"] = _CompuCell.InertiaTensorComponents_iYZ_get
    if _newclass:
        iYZ = _swig_property(_CompuCell.InertiaTensorComponents_iYZ_get, _CompuCell.InertiaTensorComponents_iYZ_set)
    __swig_destroy__ = _CompuCell.delete_InertiaTensorComponents
    __del__ = lambda self: None
InertiaTensorComponents_swigregister = _CompuCell.InertiaTensorComponents_swigregister
InertiaTensorComponents_swigregister(InertiaTensorComponents)


def precalculateCentroid(*args):
    return _CompuCell.precalculateCentroid(*args)
precalculateCentroid = _CompuCell.precalculateCentroid

def distInvariantCM(*args):
    return _CompuCell.distInvariantCM(*args)
distInvariantCM = _CompuCell.distInvariantCM

def distanceVectorInvariant(*args):
    return _CompuCell.distanceVectorInvariant(*args)
distanceVectorInvariant = _CompuCell.distanceVectorInvariant

def distanceVectorCoordinatesInvariant(*args):
    return _CompuCell.distanceVectorCoordinatesInvariant(*args)
distanceVectorCoordinatesInvariant = _CompuCell.distanceVectorCoordinatesInvariant

def unconditionalDistanceVectorInvariant(*args):
    return _CompuCell.unconditionalDistanceVectorInvariant(*args)
unconditionalDistanceVectorInvariant = _CompuCell.unconditionalDistanceVectorInvariant

def unconditionalDistanceVectorCoordinatesInvariant(*args):
    return _CompuCell.unconditionalDistanceVectorCoordinatesInvariant(*args)
unconditionalDistanceVectorCoordinatesInvariant = _CompuCell.unconditionalDistanceVectorCoordinatesInvariant

def precalculateInertiaTensorComponentsAfterFlip(*args):
    return _CompuCell.precalculateInertiaTensorComponentsAfterFlip(*args)
precalculateInertiaTensorComponentsAfterFlip = _CompuCell.precalculateInertiaTensorComponentsAfterFlip

def precalculateAfterFlipCM(*args):
    return _CompuCell.precalculateAfterFlipCM(*args)
precalculateAfterFlipCM = _CompuCell.precalculateAfterFlipCM

def cellVelocity(*args):
    return _CompuCell.cellVelocity(*args)
cellVelocity = _CompuCell.cellVelocity
class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Vector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Vector3
    __del__ = lambda self: None

    def __call__(self, *args):
        return _CompuCell.Vector3___call__(self, *args)

    def Perp(self, *args):
        return _CompuCell.Vector3_Perp(self, *args)

    def Perp2(self, *args):
        return _CompuCell.Vector3_Perp2(self, *args)

    def SetXYZ(self, *args):
        return _CompuCell.Vector3_SetXYZ(self, *args)

    def Phi(self, *args):
        return _CompuCell.Vector3_Phi(self, *args)

    def Theta(self, *args):
        return _CompuCell.Vector3_Theta(self, *args)

    def CosTheta(self, *args):
        return _CompuCell.Vector3_CosTheta(self, *args)

    def Mag2(self, *args):
        return _CompuCell.Vector3_Mag2(self, *args)

    def Mag(self, *args):
        return _CompuCell.Vector3_Mag(self, *args)

    def SetPhi(self, *args):
        return _CompuCell.Vector3_SetPhi(self, *args)

    def SetTheta(self, *args):
        return _CompuCell.Vector3_SetTheta(self, *args)

    def SetMag(self, *args):
        return _CompuCell.Vector3_SetMag(self, *args)

    def SetMagThetaPhi(self, *args):
        return _CompuCell.Vector3_SetMagThetaPhi(self, *args)

    def __eq__(self, *args):
        return _CompuCell.Vector3___eq__(self, *args)

    def __ne__(self, *args):
        return _CompuCell.Vector3___ne__(self, *args)

    def __iadd__(self, *args):
        return _CompuCell.Vector3___iadd__(self, *args)

    def __isub__(self, *args):
        return _CompuCell.Vector3___isub__(self, *args)

    def __neg__(self, *args):
        return _CompuCell.Vector3___neg__(self, *args)

    def __imul__(self, *args):
        return _CompuCell.Vector3___imul__(self, *args)

    def Unit(self, *args):
        return _CompuCell.Vector3_Unit(self, *args)

    def Orthogonal(self, *args):
        return _CompuCell.Vector3_Orthogonal(self, *args)

    def Dot(self, *args):
        return _CompuCell.Vector3_Dot(self, *args)

    def Cross(self, *args):
        return _CompuCell.Vector3_Cross(self, *args)

    def Angle(self, *args):
        return _CompuCell.Vector3_Angle(self, *args)

    def RotateX(self, *args):
        return _CompuCell.Vector3_RotateX(self, *args)

    def RotateY(self, *args):
        return _CompuCell.Vector3_RotateY(self, *args)

    def RotateZ(self, *args):
        return _CompuCell.Vector3_RotateZ(self, *args)

    def RotateUz(self, *args):
        return _CompuCell.Vector3_RotateUz(self, *args)
    __swig_setmethods__["fX"] = _CompuCell.Vector3_fX_set
    __swig_getmethods__["fX"] = _CompuCell.Vector3_fX_get
    if _newclass:
        fX = _swig_property(_CompuCell.Vector3_fX_get, _CompuCell.Vector3_fX_set)
    __swig_setmethods__["fY"] = _CompuCell.Vector3_fY_set
    __swig_getmethods__["fY"] = _CompuCell.Vector3_fY_get
    if _newclass:
        fY = _swig_property(_CompuCell.Vector3_fY_get, _CompuCell.Vector3_fY_set)
    __swig_setmethods__["fZ"] = _CompuCell.Vector3_fZ_set
    __swig_getmethods__["fZ"] = _CompuCell.Vector3_fZ_get
    if _newclass:
        fZ = _swig_property(_CompuCell.Vector3_fZ_get, _CompuCell.Vector3_fZ_set)
Vector3_swigregister = _CompuCell.Vector3_swigregister
Vector3_swigregister(Vector3)

class BasicException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicException, name)
    __repr__ = _swig_repr
    __swig_setmethods__["causePrintLevel"] = _CompuCell.BasicException_causePrintLevel_set
    __swig_getmethods__["causePrintLevel"] = _CompuCell.BasicException_causePrintLevel_get
    if _newclass:
        causePrintLevel = _swig_property(_CompuCell.BasicException_causePrintLevel_get, _CompuCell.BasicException_causePrintLevel_set)
    __swig_setmethods__["enableStackTraces"] = _CompuCell.BasicException_enableStackTraces_set
    __swig_getmethods__["enableStackTraces"] = _CompuCell.BasicException_enableStackTraces_get
    if _newclass:
        enableStackTraces = _swig_property(_CompuCell.BasicException_enableStackTraces_get, _CompuCell.BasicException_enableStackTraces_set)

    def __init__(self, *args):
        this = _CompuCell.new_BasicException(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BasicException
    __del__ = lambda self: None

    def getMessage(self, *args):
        return _CompuCell.BasicException_getMessage(self, *args)

    def getLocation(self, *args):
        return _CompuCell.BasicException_getLocation(self, *args)

    def getCause(self, *args):
        return _CompuCell.BasicException_getCause(self, *args)

    def getTrace(self, *args):
        return _CompuCell.BasicException_getTrace(self, *args)

    def _print(self, *args):
        return _CompuCell.BasicException__print(self, *args)
BasicException_swigregister = _CompuCell.BasicException_swigregister
BasicException_swigregister(BasicException)


def getConcentrationField(*args):
    return _CompuCell.getConcentrationField(*args)
getConcentrationField = _CompuCell.getConcentrationField

def getConcentrationFieldNames(*args):
    return _CompuCell.getConcentrationFieldNames(*args)
getConcentrationFieldNames = _CompuCell.getConcentrationFieldNames

def updateFluctuationCompensators(*args):
    return _CompuCell.updateFluctuationCompensators(*args)
updateFluctuationCompensators = _CompuCell.updateFluctuationCompensators

def areCellsDifferent(*args):
    return _CompuCell.areCellsDifferent(*args)
areCellsDifferent = _CompuCell.areCellsDifferent

def getMediumCell(*args):
    return _CompuCell.getMediumCell(*args)
getMediumCell = _CompuCell.getMediumCell
class cellInvPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellInvPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellInvPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.cellInvPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.cellInvPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.cellInvPyItr_current_get, _CompuCell.cellInvPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.cellInvPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.cellInvPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.cellInvPyItr_begin_get, _CompuCell.cellInvPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.cellInvPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.cellInvPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.cellInvPyItr_end_get, _CompuCell.cellInvPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_cellInvPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.cellInvPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.cellInvPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.cellInvPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.cellInvPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.cellInvPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.cellInvPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.cellInvPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.cellInvPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.cellInvPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_cellInvPyItr
    __del__ = lambda self: None
cellInvPyItr_swigregister = _CompuCell.cellInvPyItr_swigregister
cellInvPyItr_swigregister(cellInvPyItr)

class pairLongCellGPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairLongCellGPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairLongCellGPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_pairLongCellGPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["first"] = _CompuCell.pairLongCellGPtr_first_get
    if _newclass:
        first = _swig_property(_CompuCell.pairLongCellGPtr_first_get)
    __swig_setmethods__["second"] = _CompuCell.pairLongCellGPtr_second_set
    __swig_getmethods__["second"] = _CompuCell.pairLongCellGPtr_second_get
    if _newclass:
        second = _swig_property(_CompuCell.pairLongCellGPtr_second_get, _CompuCell.pairLongCellGPtr_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CompuCell.delete_pairLongCellGPtr
    __del__ = lambda self: None
pairLongCellGPtr_swigregister = _CompuCell.pairLongCellGPtr_swigregister
pairLongCellGPtr_swigregister(pairLongCellGPtr)

class mapLongCellGPtrPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapLongCellGPtrPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapLongCellGPtrPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.mapLongCellGPtrPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.mapLongCellGPtrPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.mapLongCellGPtrPyItr_current_get, _CompuCell.mapLongCellGPtrPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.mapLongCellGPtrPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.mapLongCellGPtrPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.mapLongCellGPtrPyItr_begin_get, _CompuCell.mapLongCellGPtrPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.mapLongCellGPtrPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.mapLongCellGPtrPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.mapLongCellGPtrPyItr_end_get, _CompuCell.mapLongCellGPtrPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_mapLongCellGPtrPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapLongCellGPtrPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapLongCellGPtrPyItr
    __del__ = lambda self: None
mapLongCellGPtrPyItr_swigregister = _CompuCell.mapLongCellGPtrPyItr_swigregister
mapLongCellGPtrPyItr_swigregister(mapLongCellGPtrPyItr)

class compartmentinventoryPtrPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compartmentinventoryPtrPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compartmentinventoryPtrPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.compartmentinventoryPtrPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.compartmentinventoryPtrPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.compartmentinventoryPtrPyItr_current_get, _CompuCell.compartmentinventoryPtrPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.compartmentinventoryPtrPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.compartmentinventoryPtrPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.compartmentinventoryPtrPyItr_begin_get, _CompuCell.compartmentinventoryPtrPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.compartmentinventoryPtrPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.compartmentinventoryPtrPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.compartmentinventoryPtrPyItr_end_get, _CompuCell.compartmentinventoryPtrPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_compartmentinventoryPtrPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.compartmentinventoryPtrPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_compartmentinventoryPtrPyItr
    __del__ = lambda self: None
compartmentinventoryPtrPyItr_swigregister = _CompuCell.compartmentinventoryPtrPyItr_swigregister
compartmentinventoryPtrPyItr_swigregister(compartmentinventoryPtrPyItr)

class STLPyIteratorCINV(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STLPyIteratorCINV, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STLPyIteratorCINV, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.STLPyIteratorCINV_current_set
    __swig_getmethods__["current"] = _CompuCell.STLPyIteratorCINV_current_get
    if _newclass:
        current = _swig_property(_CompuCell.STLPyIteratorCINV_current_get, _CompuCell.STLPyIteratorCINV_current_set)
    __swig_setmethods__["begin"] = _CompuCell.STLPyIteratorCINV_begin_set
    __swig_getmethods__["begin"] = _CompuCell.STLPyIteratorCINV_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.STLPyIteratorCINV_begin_get, _CompuCell.STLPyIteratorCINV_begin_set)
    __swig_setmethods__["end"] = _CompuCell.STLPyIteratorCINV_end_set
    __swig_getmethods__["end"] = _CompuCell.STLPyIteratorCINV_end_get
    if _newclass:
        end = _swig_property(_CompuCell.STLPyIteratorCINV_end_get, _CompuCell.STLPyIteratorCINV_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_STLPyIteratorCINV(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.STLPyIteratorCINV_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.STLPyIteratorCINV_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.STLPyIteratorCINV_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.STLPyIteratorCINV_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.STLPyIteratorCINV_setToBegin(self, *args)

    def previous(self, *args):
        return _CompuCell.STLPyIteratorCINV_previous(self, *args)

    def next(self, *args):
        return _CompuCell.STLPyIteratorCINV_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_STLPyIteratorCINV
    __del__ = lambda self: None
STLPyIteratorCINV_swigregister = _CompuCell.STLPyIteratorCINV_swigregister
STLPyIteratorCINV_swigregister(STLPyIteratorCINV)

class STLPyIteratorCOMPARTMENT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STLPyIteratorCOMPARTMENT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STLPyIteratorCOMPARTMENT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.STLPyIteratorCOMPARTMENT_current_set
    __swig_getmethods__["current"] = _CompuCell.STLPyIteratorCOMPARTMENT_current_get
    if _newclass:
        current = _swig_property(_CompuCell.STLPyIteratorCOMPARTMENT_current_get, _CompuCell.STLPyIteratorCOMPARTMENT_current_set)
    __swig_setmethods__["begin"] = _CompuCell.STLPyIteratorCOMPARTMENT_begin_set
    __swig_getmethods__["begin"] = _CompuCell.STLPyIteratorCOMPARTMENT_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.STLPyIteratorCOMPARTMENT_begin_get, _CompuCell.STLPyIteratorCOMPARTMENT_begin_set)
    __swig_setmethods__["end"] = _CompuCell.STLPyIteratorCOMPARTMENT_end_set
    __swig_getmethods__["end"] = _CompuCell.STLPyIteratorCOMPARTMENT_end_get
    if _newclass:
        end = _swig_property(_CompuCell.STLPyIteratorCOMPARTMENT_end_get, _CompuCell.STLPyIteratorCOMPARTMENT_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_STLPyIteratorCOMPARTMENT(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_setToBegin(self, *args)

    def previous(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_previous(self, *args)

    def next(self, *args):
        return _CompuCell.STLPyIteratorCOMPARTMENT_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_STLPyIteratorCOMPARTMENT
    __del__ = lambda self: None
STLPyIteratorCOMPARTMENT_swigregister = _CompuCell.STLPyIteratorCOMPARTMENT_swigregister
STLPyIteratorCOMPARTMENT_swigregister(STLPyIteratorCOMPARTMENT)


def initializePlugins(*args):
    return _CompuCell.initializePlugins(*args)
initializePlugins = _CompuCell.initializePlugins

def assignParseDataPtr(*args):
    return _CompuCell.assignParseDataPtr(*args)
assignParseDataPtr = _CompuCell.assignParseDataPtr

def printModuleName(*args):
    return _CompuCell.printModuleName(*args)
printModuleName = _CompuCell.printModuleName
class Array3DLinearFortranField3DAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array3DLinearFortranField3DAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array3DLinearFortranField3DAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Array3DLinearFortranField3DAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Array3DLinearFortranField3DAdapter
    __del__ = lambda self: None

    def allocateMemory(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_allocateMemory(self, *args)

    def setDim(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_resizeAndShift(self, *args)

    def getContainerRef(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getContainerRef(self, *args)

    def getContainerArrayPtr(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getContainerArrayPtr(self, *args)

    def index(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_index(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_get(self, *args)

    def setQuick(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setQuick(self, *args)

    def getQuick(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getQuick(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array3DLinearFortranField3DAdapter_setByIndex(self, *args)
Array3DLinearFortranField3DAdapter_swigregister = _CompuCell.Array3DLinearFortranField3DAdapter_swigregister
Array3DLinearFortranField3DAdapter_swigregister(Array3DLinearFortranField3DAdapter)

class Array2DLinearFortranField3DAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2DLinearFortranField3DAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2DLinearFortranField3DAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Array2DLinearFortranField3DAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Array2DLinearFortranField3DAdapter
    __del__ = lambda self: None

    def allocateMemory(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_allocateMemory(self, *args)

    def setDim(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setDim(self, *args)

    def resizeAndShift(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_resizeAndShift(self, *args)

    def getContainerRef(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getContainerRef(self, *args)

    def getContainerArrayPtr(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getContainerArrayPtr(self, *args)

    def index(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_index(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getDim(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_get(self, *args)

    def setQuick(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setQuick(self, *args)

    def getQuick(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getQuick(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array2DLinearFortranField3DAdapter_setByIndex(self, *args)
Array2DLinearFortranField3DAdapter_swigregister = _CompuCell.Array2DLinearFortranField3DAdapter_swigregister
Array2DLinearFortranField3DAdapter_swigregister(Array2DLinearFortranField3DAdapter)

class PyCompuCellObjAdapter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyCompuCellObjAdapter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyCompuCellObjAdapter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PyCompuCellObjAdapter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PyCompuCellObjAdapter
    __del__ = lambda self: None

    def setPotts(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_setPotts(self, *args)

    def setSimulator(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_setSimulator(self, *args)

    def registerPyObject(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_registerPyObject(self, *args)

    def isNewCellValid(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isNewCellValid(self, *args)

    def isOldCellValid(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isOldCellValid(self, *args)

    def isCellMedium(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_isCellMedium(self, *args)

    def getNewCell(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getNewCell(self, *args)

    def getOldCell(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getOldCell(self, *args)

    def getFlipNeighbor(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getFlipNeighbor(self, *args)

    def getChangePoint(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getChangePoint(self, *args)

    def getNewType(self, *args):
        return _CompuCell.PyCompuCellObjAdapter_getNewType(self, *args)
    __swig_setmethods__["sim"] = _CompuCell.PyCompuCellObjAdapter_sim_set
    __swig_getmethods__["sim"] = _CompuCell.PyCompuCellObjAdapter_sim_get
    if _newclass:
        sim = _swig_property(_CompuCell.PyCompuCellObjAdapter_sim_get, _CompuCell.PyCompuCellObjAdapter_sim_set)
    __swig_setmethods__["potts"] = _CompuCell.PyCompuCellObjAdapter_potts_set
    __swig_getmethods__["potts"] = _CompuCell.PyCompuCellObjAdapter_potts_get
    if _newclass:
        potts = _swig_property(_CompuCell.PyCompuCellObjAdapter_potts_get, _CompuCell.PyCompuCellObjAdapter_potts_set)
PyCompuCellObjAdapter_swigregister = _CompuCell.PyCompuCellObjAdapter_swigregister
PyCompuCellObjAdapter_swigregister(PyCompuCellObjAdapter)

class EnergyFunctionPyWrapper(PyCompuCellObjAdapter):
    __swig_setmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyFunctionPyWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyFunctionPyWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_EnergyFunctionPyWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_EnergyFunctionPyWrapper
    __del__ = lambda self: None

    def getEnergyFunctionPyWrapperPtr(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_getEnergyFunctionPyWrapperPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_changeEnergy(self, *args)

    def localEnergy(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_localEnergy(self, *args)

    def registerPyEnergyFunction(self, *args):
        return _CompuCell.EnergyFunctionPyWrapper_registerPyEnergyFunction(self, *args)
EnergyFunctionPyWrapper_swigregister = _CompuCell.EnergyFunctionPyWrapper_swigregister
EnergyFunctionPyWrapper_swigregister(EnergyFunctionPyWrapper)

class ChangeWatcherPyWrapper(PyCompuCellObjAdapter, CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [PyCompuCellObjAdapter, CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChangeWatcherPyWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCompuCellObjAdapter, CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChangeWatcherPyWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ChangeWatcherPyWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ChangeWatcherPyWrapper
    __del__ = lambda self: None

    def field3DChange(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_field3DChange(self, *args)

    def field3DAdditionalPt(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_field3DAdditionalPt(self, *args)

    def getChangeWatcherPyWrapperPtr(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_getChangeWatcherPyWrapperPtr(self, *args)

    def registerPyChangeWatcher(self, *args):
        return _CompuCell.ChangeWatcherPyWrapper_registerPyChangeWatcher(self, *args)
ChangeWatcherPyWrapper_swigregister = _CompuCell.ChangeWatcherPyWrapper_swigregister
ChangeWatcherPyWrapper_swigregister(ChangeWatcherPyWrapper)

class TypeChangeWatcherPyWrapper(PyCompuCellObjAdapter, TypeChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [PyCompuCellObjAdapter, TypeChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeChangeWatcherPyWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCompuCellObjAdapter, TypeChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeChangeWatcherPyWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_TypeChangeWatcherPyWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_TypeChangeWatcherPyWrapper
    __del__ = lambda self: None

    def typeChange(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_typeChange(self, *args)

    def getTypeChangeWatcherPyWrapperPtr(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_getTypeChangeWatcherPyWrapperPtr(self, *args)

    def registerPyTypeChangeWatcher(self, *args):
        return _CompuCell.TypeChangeWatcherPyWrapper_registerPyTypeChangeWatcher(self, *args)
TypeChangeWatcherPyWrapper_swigregister = _CompuCell.TypeChangeWatcherPyWrapper_swigregister
TypeChangeWatcherPyWrapper_swigregister(TypeChangeWatcherPyWrapper)

class StepperPyWrapper(PyCompuCellObjAdapter):
    __swig_setmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StepperPyWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StepperPyWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_StepperPyWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_StepperPyWrapper
    __del__ = lambda self: None

    def step(self, *args):
        return _CompuCell.StepperPyWrapper_step(self, *args)

    def getStepperPyWrapperPtr(self, *args):
        return _CompuCell.StepperPyWrapper_getStepperPyWrapperPtr(self, *args)

    def registerPyStepper(self, *args):
        return _CompuCell.StepperPyWrapper_registerPyStepper(self, *args)
StepperPyWrapper_swigregister = _CompuCell.StepperPyWrapper_swigregister
StepperPyWrapper_swigregister(StepperPyWrapper)

class DiffusableVectorFloat(Steppable):
    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffusableVectorFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffusableVectorFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_DiffusableVectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_DiffusableVectorFloat
    __del__ = lambda self: None

    def getConcentrationField(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationField(self, *args)

    def allocateDiffusableFieldVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_allocateDiffusableFieldVector(self, *args)

    def getConcentrationFieldNameVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationFieldNameVector(self, *args)

    def getConcentrationFieldVector(self, *args):
        return _CompuCell.DiffusableVectorFloat_getConcentrationFieldVector(self, *args)
DiffusableVectorFloat_swigregister = _CompuCell.DiffusableVectorFloat_swigregister
DiffusableVectorFloat_swigregister(DiffusableVectorFloat)

class PyAttributeAdder(PyCompuCellObjAdapter):
    __swig_setmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyAttributeAdder, name, value)
    __swig_getmethods__ = {}
    for _s in [PyCompuCellObjAdapter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyAttributeAdder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PyAttributeAdder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addAttribute(self, *args):
        return _CompuCell.PyAttributeAdder_addAttribute(self, *args)

    def destroyAttribute(self, *args):
        return _CompuCell.PyAttributeAdder_destroyAttribute(self, *args)

    def getPyAttributeAdderPtr(self, *args):
        return _CompuCell.PyAttributeAdder_getPyAttributeAdderPtr(self, *args)

    def registerAdder(self, *args):
        return _CompuCell.PyAttributeAdder_registerAdder(self, *args)

    def registerRefChecker(self, *args):
        return _CompuCell.PyAttributeAdder_registerRefChecker(self, *args)

    def registerDestroyer(self, *args):
        return _CompuCell.PyAttributeAdder_registerDestroyer(self, *args)
    __swig_setmethods__["refChecker"] = _CompuCell.PyAttributeAdder_refChecker_set
    __swig_getmethods__["refChecker"] = _CompuCell.PyAttributeAdder_refChecker_get
    if _newclass:
        refChecker = _swig_property(_CompuCell.PyAttributeAdder_refChecker_get, _CompuCell.PyAttributeAdder_refChecker_set)
    __swig_setmethods__["destroyer"] = _CompuCell.PyAttributeAdder_destroyer_set
    __swig_getmethods__["destroyer"] = _CompuCell.PyAttributeAdder_destroyer_get
    if _newclass:
        destroyer = _swig_property(_CompuCell.PyAttributeAdder_destroyer_get, _CompuCell.PyAttributeAdder_destroyer_set)
    __swig_destroy__ = _CompuCell.delete_PyAttributeAdder
    __del__ = lambda self: None
PyAttributeAdder_swigregister = _CompuCell.PyAttributeAdder_swigregister
PyAttributeAdder_swigregister(PyAttributeAdder)

class VectorParseDataPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorParseDataPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorParseDataPtr, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.VectorParseDataPtr_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.VectorParseDataPtr___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.VectorParseDataPtr___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.VectorParseDataPtr___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.VectorParseDataPtr___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.VectorParseDataPtr___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.VectorParseDataPtr_pop(self, *args)

    def append(self, *args):
        return _CompuCell.VectorParseDataPtr_append(self, *args)

    def empty(self, *args):
        return _CompuCell.VectorParseDataPtr_empty(self, *args)

    def size(self, *args):
        return _CompuCell.VectorParseDataPtr_size(self, *args)

    def swap(self, *args):
        return _CompuCell.VectorParseDataPtr_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.VectorParseDataPtr_begin(self, *args)

    def end(self, *args):
        return _CompuCell.VectorParseDataPtr_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.VectorParseDataPtr_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.VectorParseDataPtr_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.VectorParseDataPtr_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.VectorParseDataPtr_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.VectorParseDataPtr_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.VectorParseDataPtr_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_VectorParseDataPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.VectorParseDataPtr_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.VectorParseDataPtr_front(self, *args)

    def back(self, *args):
        return _CompuCell.VectorParseDataPtr_back(self, *args)

    def assign(self, *args):
        return _CompuCell.VectorParseDataPtr_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.VectorParseDataPtr_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.VectorParseDataPtr_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.VectorParseDataPtr_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.VectorParseDataPtr_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_VectorParseDataPtr
    __del__ = lambda self: None
VectorParseDataPtr_swigregister = _CompuCell.VectorParseDataPtr_swigregister
VectorParseDataPtr_swigregister(VectorParseDataPtr)


def getPyAttrib(*args):
    return _CompuCell.getPyAttrib(*args)
getPyAttrib = _CompuCell.getPyAttrib

def isPyAttribValid(*args):
    return _CompuCell.isPyAttribValid(*args)
isPyAttribValid = _CompuCell.isPyAttribValid
class BasicClassGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicClassGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicClassGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
BasicClassGroup_swigregister = _CompuCell.BasicClassGroup_swigregister
BasicClassGroup_swigregister(BasicClassGroup)


def getPlugin(*args):
    return _CompuCell.getPlugin(*args)
getPlugin = _CompuCell.getPlugin

def getSteppable(*args):
    return _CompuCell.getSteppable(*args)
getSteppable = _CompuCell.getSteppable
class ConnectivityLocalFlexData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectivityLocalFlexData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectivityLocalFlexData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ConnectivityLocalFlexData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["connectivityStrength"] = _CompuCell.ConnectivityLocalFlexData_connectivityStrength_set
    __swig_getmethods__["connectivityStrength"] = _CompuCell.ConnectivityLocalFlexData_connectivityStrength_get
    if _newclass:
        connectivityStrength = _swig_property(_CompuCell.ConnectivityLocalFlexData_connectivityStrength_get, _CompuCell.ConnectivityLocalFlexData_connectivityStrength_set)
    __swig_destroy__ = _CompuCell.delete_ConnectivityLocalFlexData
    __del__ = lambda self: None
ConnectivityLocalFlexData_swigregister = _CompuCell.ConnectivityLocalFlexData_swigregister
ConnectivityLocalFlexData_swigregister(ConnectivityLocalFlexData)

class connectivitylocalflexaccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, connectivitylocalflexaccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, connectivitylocalflexaccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.connectivitylocalflexaccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_connectivitylocalflexaccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_connectivitylocalflexaccessor
    __del__ = lambda self: None
connectivitylocalflexaccessor_swigregister = _CompuCell.connectivitylocalflexaccessor_swigregister
connectivitylocalflexaccessor_swigregister(connectivitylocalflexaccessor)

class ConnectivityLocalFlexPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectivityLocalFlexPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectivityLocalFlexPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ConnectivityLocalFlexPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ConnectivityLocalFlexPlugin
    __del__ = lambda self: None

    def changeEnergy(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_init(self, *args)

    def getConnectivityLocalFlexDataPtr(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_getConnectivityLocalFlexDataPtr(self, *args)

    def setConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_setConnectivityStrength(self, *args)

    def getConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_getConnectivityStrength(self, *args)

    def update(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ConnectivityLocalFlexPlugin_toString(self, *args)
ConnectivityLocalFlexPlugin_swigregister = _CompuCell.ConnectivityLocalFlexPlugin_swigregister
ConnectivityLocalFlexPlugin_swigregister(ConnectivityLocalFlexPlugin)


def getConnectivityLocalFlexPlugin(*args):
    return _CompuCell.getConnectivityLocalFlexPlugin(*args)
getConnectivityLocalFlexPlugin = _CompuCell.getConnectivityLocalFlexPlugin
class ConnectivityGlobalData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectivityGlobalData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectivityGlobalData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ConnectivityGlobalData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["connectivityStrength"] = _CompuCell.ConnectivityGlobalData_connectivityStrength_set
    __swig_getmethods__["connectivityStrength"] = _CompuCell.ConnectivityGlobalData_connectivityStrength_get
    if _newclass:
        connectivityStrength = _swig_property(_CompuCell.ConnectivityGlobalData_connectivityStrength_get, _CompuCell.ConnectivityGlobalData_connectivityStrength_set)
    __swig_destroy__ = _CompuCell.delete_ConnectivityGlobalData
    __del__ = lambda self: None
ConnectivityGlobalData_swigregister = _CompuCell.ConnectivityGlobalData_swigregister
ConnectivityGlobalData_swigregister(ConnectivityGlobalData)

class connectivityGlobalaccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, connectivityGlobalaccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, connectivityGlobalaccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.connectivityGlobalaccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_connectivityGlobalaccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_connectivityGlobalaccessor
    __del__ = lambda self: None
connectivityGlobalaccessor_swigregister = _CompuCell.connectivityGlobalaccessor_swigregister
connectivityGlobalaccessor_swigregister(connectivityGlobalaccessor)

class ConnectivityGlobalPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectivityGlobalPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectivityGlobalPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ConnectivityGlobalPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ConnectivityGlobalPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_init(self, *args)

    def getConnectivityGlobalDataPtr(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_getConnectivityGlobalDataPtr(self, *args)

    def setConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_setConnectivityStrength(self, *args)

    def getConnectivityStrength(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_getConnectivityStrength(self, *args)

    def toString(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_toString(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergy(self, *args)

    def changeEnergyLegacy(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergyLegacy(self, *args)

    def changeEnergyFast(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_changeEnergyFast(self, *args)

    def checkIfCellIsFragmented(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_checkIfCellIsFragmented(self, *args)

    def check_local_connectivity(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_check_local_connectivity(self, *args)

    def update(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ConnectivityGlobalPlugin_steerableName(self, *args)
ConnectivityGlobalPlugin_swigregister = _CompuCell.ConnectivityGlobalPlugin_swigregister
ConnectivityGlobalPlugin_swigregister(ConnectivityGlobalPlugin)


def getConnectivityGlobalPlugin(*args):
    return _CompuCell.getConnectivityGlobalPlugin(*args)
getConnectivityGlobalPlugin = _CompuCell.getConnectivityGlobalPlugin
class LengthConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LengthConstraintData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_LengthConstraintData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["lambdaLength"] = _CompuCell.LengthConstraintData_lambdaLength_set
    __swig_getmethods__["lambdaLength"] = _CompuCell.LengthConstraintData_lambdaLength_get
    if _newclass:
        lambdaLength = _swig_property(_CompuCell.LengthConstraintData_lambdaLength_get, _CompuCell.LengthConstraintData_lambdaLength_set)
    __swig_setmethods__["targetLength"] = _CompuCell.LengthConstraintData_targetLength_set
    __swig_getmethods__["targetLength"] = _CompuCell.LengthConstraintData_targetLength_get
    if _newclass:
        targetLength = _swig_property(_CompuCell.LengthConstraintData_targetLength_get, _CompuCell.LengthConstraintData_targetLength_set)
    __swig_setmethods__["minorTargetLength"] = _CompuCell.LengthConstraintData_minorTargetLength_set
    __swig_getmethods__["minorTargetLength"] = _CompuCell.LengthConstraintData_minorTargetLength_get
    if _newclass:
        minorTargetLength = _swig_property(_CompuCell.LengthConstraintData_minorTargetLength_get, _CompuCell.LengthConstraintData_minorTargetLength_set)
    __swig_destroy__ = _CompuCell.delete_LengthConstraintData
    __del__ = lambda self: None
LengthConstraintData_swigregister = _CompuCell.LengthConstraintData_swigregister
LengthConstraintData_swigregister(LengthConstraintData)

class lengthconstraintccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lengthconstraintccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lengthconstraintccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.lengthconstraintccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_lengthconstraintccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_lengthconstraintccessor
    __del__ = lambda self: None
lengthconstraintccessor_swigregister = _CompuCell.lengthconstraintccessor_swigregister
lengthconstraintccessor_swigregister(lengthconstraintccessor)

class LengthEnergyParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthEnergyParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LengthEnergyParam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_LengthEnergyParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["targetLength"] = _CompuCell.LengthEnergyParam_targetLength_set
    __swig_getmethods__["targetLength"] = _CompuCell.LengthEnergyParam_targetLength_get
    if _newclass:
        targetLength = _swig_property(_CompuCell.LengthEnergyParam_targetLength_get, _CompuCell.LengthEnergyParam_targetLength_set)
    __swig_setmethods__["minorTargetLength"] = _CompuCell.LengthEnergyParam_minorTargetLength_set
    __swig_getmethods__["minorTargetLength"] = _CompuCell.LengthEnergyParam_minorTargetLength_get
    if _newclass:
        minorTargetLength = _swig_property(_CompuCell.LengthEnergyParam_minorTargetLength_get, _CompuCell.LengthEnergyParam_minorTargetLength_set)
    __swig_setmethods__["lambdaLength"] = _CompuCell.LengthEnergyParam_lambdaLength_set
    __swig_getmethods__["lambdaLength"] = _CompuCell.LengthEnergyParam_lambdaLength_get
    if _newclass:
        lambdaLength = _swig_property(_CompuCell.LengthEnergyParam_lambdaLength_get, _CompuCell.LengthEnergyParam_lambdaLength_set)
    __swig_setmethods__["cellTypeName"] = _CompuCell.LengthEnergyParam_cellTypeName_set
    __swig_getmethods__["cellTypeName"] = _CompuCell.LengthEnergyParam_cellTypeName_get
    if _newclass:
        cellTypeName = _swig_property(_CompuCell.LengthEnergyParam_cellTypeName_get, _CompuCell.LengthEnergyParam_cellTypeName_set)
    __swig_destroy__ = _CompuCell.delete_LengthEnergyParam
    __del__ = lambda self: None
LengthEnergyParam_swigregister = _CompuCell.LengthEnergyParam_swigregister
LengthEnergyParam_swigregister(LengthEnergyParam)

class LengthConstraintPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthConstraintPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LengthConstraintPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_LengthConstraintPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_LengthConstraintPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.LengthConstraintPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.LengthConstraintPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.LengthConstraintPlugin_toString(self, *args)

    def getLengthConstraintDataPtr(self, *args):
        return _CompuCell.LengthConstraintPlugin_getLengthConstraintDataPtr(self, *args)

    def setLengthConstraintData(self, *args):
        return _CompuCell.LengthConstraintPlugin_setLengthConstraintData(self, *args)

    def getLambdaLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getLambdaLength(self, *args)

    def getTargetLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getTargetLength(self, *args)

    def getMinorTargetLength(self, *args):
        return _CompuCell.LengthConstraintPlugin_getMinorTargetLength(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy(self, *args)

    def changeEnergy_xz(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_xz(self, *args)

    def changeEnergy_xy(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_xy(self, *args)

    def changeEnergy_yz(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_yz(self, *args)

    def changeEnergy_3D(self, *args):
        return _CompuCell.LengthConstraintPlugin_changeEnergy_3D(self, *args)
    __swig_setmethods__["changeEnergyFcnPtr"] = _CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_set
    __swig_getmethods__["changeEnergyFcnPtr"] = _CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_get
    if _newclass:
        changeEnergyFcnPtr = _swig_property(_CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_get, _CompuCell.LengthConstraintPlugin_changeEnergyFcnPtr_set)

    def initTypeId(self, *args):
        return _CompuCell.LengthConstraintPlugin_initTypeId(self, *args)

    def update(self, *args):
        return _CompuCell.LengthConstraintPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.LengthConstraintPlugin_steerableName(self, *args)
LengthConstraintPlugin_swigregister = _CompuCell.LengthConstraintPlugin_swigregister
LengthConstraintPlugin_swigregister(LengthConstraintPlugin)


def getLengthConstraintPlugin(*args):
    return _CompuCell.getLengthConstraintPlugin(*args)
getLengthConstraintPlugin = _CompuCell.getLengthConstraintPlugin

def getLengthConstraintLocalFlexPlugin(*args):
    return _CompuCell.getLengthConstraintLocalFlexPlugin(*args)
getLengthConstraintLocalFlexPlugin = _CompuCell.getLengthConstraintLocalFlexPlugin
class ChemotaxisData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChemotaxisData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChemotaxisData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ChemotaxisData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["_lambda"] = _CompuCell.ChemotaxisData__lambda_set
    __swig_getmethods__["_lambda"] = _CompuCell.ChemotaxisData__lambda_get
    if _newclass:
        _lambda = _swig_property(_CompuCell.ChemotaxisData__lambda_get, _CompuCell.ChemotaxisData__lambda_set)
    __swig_setmethods__["saturationCoef"] = _CompuCell.ChemotaxisData_saturationCoef_set
    __swig_getmethods__["saturationCoef"] = _CompuCell.ChemotaxisData_saturationCoef_get
    if _newclass:
        saturationCoef = _swig_property(_CompuCell.ChemotaxisData_saturationCoef_get, _CompuCell.ChemotaxisData_saturationCoef_set)
    __swig_setmethods__["powerLevel"] = _CompuCell.ChemotaxisData_powerLevel_set
    __swig_getmethods__["powerLevel"] = _CompuCell.ChemotaxisData_powerLevel_get
    if _newclass:
        powerLevel = _swig_property(_CompuCell.ChemotaxisData_powerLevel_get, _CompuCell.ChemotaxisData_powerLevel_set)
    __swig_setmethods__["concCOM"] = _CompuCell.ChemotaxisData_concCOM_set
    __swig_getmethods__["concCOM"] = _CompuCell.ChemotaxisData_concCOM_get
    if _newclass:
        concCOM = _swig_property(_CompuCell.ChemotaxisData_concCOM_get, _CompuCell.ChemotaxisData_concCOM_set)
    __swig_setmethods__["formulaName"] = _CompuCell.ChemotaxisData_formulaName_set
    __swig_getmethods__["formulaName"] = _CompuCell.ChemotaxisData_formulaName_get
    if _newclass:
        formulaName = _swig_property(_CompuCell.ChemotaxisData_formulaName_get, _CompuCell.ChemotaxisData_formulaName_set)
    __swig_setmethods__["formulaPtr"] = _CompuCell.ChemotaxisData_formulaPtr_set
    __swig_getmethods__["formulaPtr"] = _CompuCell.ChemotaxisData_formulaPtr_get
    if _newclass:
        formulaPtr = _swig_property(_CompuCell.ChemotaxisData_formulaPtr_get, _CompuCell.ChemotaxisData_formulaPtr_set)
    __swig_setmethods__["chemotaxisFormulaDictPtr"] = _CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_set
    __swig_getmethods__["chemotaxisFormulaDictPtr"] = _CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_get
    if _newclass:
        chemotaxisFormulaDictPtr = _swig_property(_CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_get, _CompuCell.ChemotaxisData_chemotaxisFormulaDictPtr_set)
    __swig_setmethods__["allowChemotaxisBetweenCompartmentsGlobal"] = _CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_set
    __swig_getmethods__["allowChemotaxisBetweenCompartmentsGlobal"] = _CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_get
    if _newclass:
        allowChemotaxisBetweenCompartmentsGlobal = _swig_property(_CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_get, _CompuCell.ChemotaxisData_allowChemotaxisBetweenCompartmentsGlobal_set)
    __swig_setmethods__["typeName"] = _CompuCell.ChemotaxisData_typeName_set
    __swig_getmethods__["typeName"] = _CompuCell.ChemotaxisData_typeName_get
    if _newclass:
        typeName = _swig_property(_CompuCell.ChemotaxisData_typeName_get, _CompuCell.ChemotaxisData_typeName_set)
    __swig_setmethods__["chemotactTowardsTypesVec"] = _CompuCell.ChemotaxisData_chemotactTowardsTypesVec_set
    __swig_getmethods__["chemotactTowardsTypesVec"] = _CompuCell.ChemotaxisData_chemotactTowardsTypesVec_get
    if _newclass:
        chemotactTowardsTypesVec = _swig_property(_CompuCell.ChemotaxisData_chemotactTowardsTypesVec_get, _CompuCell.ChemotaxisData_chemotactTowardsTypesVec_set)
    __swig_setmethods__["chemotactTowardsTypesString"] = _CompuCell.ChemotaxisData_chemotactTowardsTypesString_set
    __swig_getmethods__["chemotactTowardsTypesString"] = _CompuCell.ChemotaxisData_chemotactTowardsTypesString_get
    if _newclass:
        chemotactTowardsTypesString = _swig_property(_CompuCell.ChemotaxisData_chemotactTowardsTypesString_get, _CompuCell.ChemotaxisData_chemotactTowardsTypesString_set)
    __swig_setmethods__["automaton"] = _CompuCell.ChemotaxisData_automaton_set
    __swig_getmethods__["automaton"] = _CompuCell.ChemotaxisData_automaton_get
    if _newclass:
        automaton = _swig_property(_CompuCell.ChemotaxisData_automaton_get, _CompuCell.ChemotaxisData_automaton_set)

    def setLambda(self, *args):
        return _CompuCell.ChemotaxisData_setLambda(self, *args)

    def getLambda(self, *args):
        return _CompuCell.ChemotaxisData_getLambda(self, *args)

    def setType(self, *args):
        return _CompuCell.ChemotaxisData_setType(self, *args)

    def setChemotactTowards(self, *args):
        return _CompuCell.ChemotaxisData_setChemotactTowards(self, *args)

    def setChemotaxisFormulaByName(self, *args):
        return _CompuCell.ChemotaxisData_setChemotaxisFormulaByName(self, *args)

    def initializeChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_initializeChemotactTowardsVectorTypes(self, *args)

    def assignChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_assignChemotactTowardsVectorTypes(self, *args)

    def getChemotactTowardsVectorTypes(self, *args):
        return _CompuCell.ChemotaxisData_getChemotactTowardsVectorTypes(self, *args)

    def setSaturationCoef(self, *args):
        return _CompuCell.ChemotaxisData_setSaturationCoef(self, *args)

    def setSaturationLinearCoef(self, *args):
        return _CompuCell.ChemotaxisData_setSaturationLinearCoef(self, *args)

    def setLogScaledCoef(self, *args):
        return _CompuCell.ChemotaxisData_setLogScaledCoef(self, *args)

    def outScr(self, *args):
        return _CompuCell.ChemotaxisData_outScr(self, *args)

    def okToChemotact(self, *args):
        return _CompuCell.ChemotaxisData_okToChemotact(self, *args)
    __swig_destroy__ = _CompuCell.delete_ChemotaxisData
    __del__ = lambda self: None
ChemotaxisData_swigregister = _CompuCell.ChemotaxisData_swigregister
ChemotaxisData_swigregister(ChemotaxisData)

class ChemotaxisFieldData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChemotaxisFieldData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChemotaxisFieldData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ChemotaxisFieldData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["chemicalFieldSource"] = _CompuCell.ChemotaxisFieldData_chemicalFieldSource_set
    __swig_getmethods__["chemicalFieldSource"] = _CompuCell.ChemotaxisFieldData_chemicalFieldSource_get
    if _newclass:
        chemicalFieldSource = _swig_property(_CompuCell.ChemotaxisFieldData_chemicalFieldSource_get, _CompuCell.ChemotaxisFieldData_chemicalFieldSource_set)
    __swig_setmethods__["chemicalFieldName"] = _CompuCell.ChemotaxisFieldData_chemicalFieldName_set
    __swig_getmethods__["chemicalFieldName"] = _CompuCell.ChemotaxisFieldData_chemicalFieldName_get
    if _newclass:
        chemicalFieldName = _swig_property(_CompuCell.ChemotaxisFieldData_chemicalFieldName_get, _CompuCell.ChemotaxisFieldData_chemicalFieldName_set)
    __swig_setmethods__["vecChemotaxisData"] = _CompuCell.ChemotaxisFieldData_vecChemotaxisData_set
    __swig_getmethods__["vecChemotaxisData"] = _CompuCell.ChemotaxisFieldData_vecChemotaxisData_get
    if _newclass:
        vecChemotaxisData = _swig_property(_CompuCell.ChemotaxisFieldData_vecChemotaxisData_get, _CompuCell.ChemotaxisFieldData_vecChemotaxisData_set)

    def ChemotaxisByType(self, *args):
        return _CompuCell.ChemotaxisFieldData_ChemotaxisByType(self, *args)

    def Source(self, *args):
        return _CompuCell.ChemotaxisFieldData_Source(self, *args)

    def Name(self, *args):
        return _CompuCell.ChemotaxisFieldData_Name(self, *args)

    def getChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisFieldData_getChemotaxisData(self, *args)
    __swig_destroy__ = _CompuCell.delete_ChemotaxisFieldData
    __del__ = lambda self: None
ChemotaxisFieldData_swigregister = _CompuCell.ChemotaxisFieldData_swigregister
ChemotaxisFieldData_swigregister(ChemotaxisFieldData)

class ChemotaxisPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChemotaxisPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChemotaxisPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ChemotaxisPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ChemotaxisPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.ChemotaxisPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ChemotaxisPlugin_extraInit(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ChemotaxisPlugin_changeEnergy(self, *args)

    def update(self, *args):
        return _CompuCell.ChemotaxisPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ChemotaxisPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ChemotaxisPlugin_toString(self, *args)

    def regularChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_regularChemotaxis(self, *args)

    def reciprocatedChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_reciprocatedChemotaxis(self, *args)

    def merksChemotaxis(self, *args):
        return _CompuCell.ChemotaxisPlugin_merksChemotaxis(self, *args)

    def addChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_addChemotaxisData(self, *args)

    def getChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_getChemotaxisData(self, *args)

    def getFieldNamesWithChemotaxisData(self, *args):
        return _CompuCell.ChemotaxisPlugin_getFieldNamesWithChemotaxisData(self, *args)
ChemotaxisPlugin_swigregister = _CompuCell.ChemotaxisPlugin_swigregister
ChemotaxisPlugin_swigregister(ChemotaxisPlugin)


def getChemotaxisPlugin(*args):
    return _CompuCell.getChemotaxisPlugin(*args)
getChemotaxisPlugin = _CompuCell.getChemotaxisPlugin
class MitosisPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitosisPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MitosisPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_MitosisPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_MitosisPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.MitosisPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.MitosisPlugin_handleEvent(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.MitosisPlugin_field3DChange(self, *args)

    def step(self, *args):
        return _CompuCell.MitosisPlugin_step(self, *args)

    def update(self, *args):
        return _CompuCell.MitosisPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.MitosisPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.MitosisPlugin_toString(self, *args)

    def turnOn(self, *args):
        return _CompuCell.MitosisPlugin_turnOn(self, *args)

    def turnOff(self, *args):
        return _CompuCell.MitosisPlugin_turnOff(self, *args)

    def doMitosis(self, *args):
        return _CompuCell.MitosisPlugin_doMitosis(self, *args)

    def updateAttributes(self, *args):
        return _CompuCell.MitosisPlugin_updateAttributes(self, *args)

    def getChildCell(self, *args):
        return _CompuCell.MitosisPlugin_getChildCell(self, *args)

    def getParentCell(self, *args):
        return _CompuCell.MitosisPlugin_getParentCell(self, *args)

    def setPotts(self, *args):
        return _CompuCell.MitosisPlugin_setPotts(self, *args)

    def getDoublingVolume(self, *args):
        return _CompuCell.MitosisPlugin_getDoublingVolume(self, *args)

    def setDoublingVolume(self, *args):
        return _CompuCell.MitosisPlugin_setDoublingVolume(self, *args)
MitosisPlugin_swigregister = _CompuCell.MitosisPlugin_swigregister
MitosisPlugin_swigregister(MitosisPlugin)

class OrientationVectorsMitosis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientationVectorsMitosis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrientationVectorsMitosis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_OrientationVectorsMitosis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["semiminorVec"] = _CompuCell.OrientationVectorsMitosis_semiminorVec_set
    __swig_getmethods__["semiminorVec"] = _CompuCell.OrientationVectorsMitosis_semiminorVec_get
    if _newclass:
        semiminorVec = _swig_property(_CompuCell.OrientationVectorsMitosis_semiminorVec_get, _CompuCell.OrientationVectorsMitosis_semiminorVec_set)
    __swig_setmethods__["semimajorVec"] = _CompuCell.OrientationVectorsMitosis_semimajorVec_set
    __swig_getmethods__["semimajorVec"] = _CompuCell.OrientationVectorsMitosis_semimajorVec_get
    if _newclass:
        semimajorVec = _swig_property(_CompuCell.OrientationVectorsMitosis_semimajorVec_get, _CompuCell.OrientationVectorsMitosis_semimajorVec_set)
    __swig_destroy__ = _CompuCell.delete_OrientationVectorsMitosis
    __del__ = lambda self: None
OrientationVectorsMitosis_swigregister = _CompuCell.OrientationVectorsMitosis_swigregister
OrientationVectorsMitosis_swigregister(OrientationVectorsMitosis)

class MitosisSimplePlugin(MitosisPlugin):
    __swig_setmethods__ = {}
    for _s in [MitosisPlugin]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitosisSimplePlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [MitosisPlugin]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MitosisSimplePlugin, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doDirectionalMitosis2DPtr"] = _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_set
    __swig_getmethods__["doDirectionalMitosis2DPtr"] = _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_get
    if _newclass:
        doDirectionalMitosis2DPtr = _swig_property(_CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_get, _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2DPtr_set)
    __swig_setmethods__["getOrientationVectorsMitosis2DPtr"] = _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_set
    __swig_getmethods__["getOrientationVectorsMitosis2DPtr"] = _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_get
    if _newclass:
        getOrientationVectorsMitosis2DPtr = _swig_property(_CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_get, _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2DPtr_set)

    def __init__(self, *args):
        this = _CompuCell.new_MitosisSimplePlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_MitosisSimplePlugin
    __del__ = lambda self: None
    __swig_setmethods__["divideAlongMinorAxisFlag"] = _CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_set
    __swig_getmethods__["divideAlongMinorAxisFlag"] = _CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_get
    if _newclass:
        divideAlongMinorAxisFlag = _swig_property(_CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_get, _CompuCell.MitosisSimplePlugin_divideAlongMinorAxisFlag_set)
    __swig_setmethods__["divideAlongMajorAxisFlag"] = _CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_set
    __swig_getmethods__["divideAlongMajorAxisFlag"] = _CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_get
    if _newclass:
        divideAlongMajorAxisFlag = _swig_property(_CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_get, _CompuCell.MitosisSimplePlugin_divideAlongMajorAxisFlag_set)
    __swig_setmethods__["flag3D"] = _CompuCell.MitosisSimplePlugin_flag3D_set
    __swig_getmethods__["flag3D"] = _CompuCell.MitosisSimplePlugin_flag3D_get
    if _newclass:
        flag3D = _swig_property(_CompuCell.MitosisSimplePlugin_flag3D_get, _CompuCell.MitosisSimplePlugin_flag3D_set)
    __swig_setmethods__["pixelTrackerAccessorPtr"] = _CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_set
    __swig_getmethods__["pixelTrackerAccessorPtr"] = _CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_get
    if _newclass:
        pixelTrackerAccessorPtr = _swig_property(_CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_get, _CompuCell.MitosisSimplePlugin_pixelTrackerAccessorPtr_set)
    __swig_setmethods__["pixelTrackerPlugin"] = _CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_set
    __swig_getmethods__["pixelTrackerPlugin"] = _CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_get
    if _newclass:
        pixelTrackerPlugin = _swig_property(_CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_get, _CompuCell.MitosisSimplePlugin_pixelTrackerPlugin_set)

    def handleEvent(self, *args):
        return _CompuCell.MitosisSimplePlugin_handleEvent(self, *args)

    def init(self, *args):
        return _CompuCell.MitosisSimplePlugin_init(self, *args)

    def setDivideAlongMinorAxis(self, *args):
        return _CompuCell.MitosisSimplePlugin_setDivideAlongMinorAxis(self, *args)

    def setDivideAlongMajorAxis(self, *args):
        return _CompuCell.MitosisSimplePlugin_setDivideAlongMajorAxis(self, *args)

    def getOrientationVectorsMitosis(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis(self, *args)

    def getOrientationVectorsMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_xy(self, *args)

    def getOrientationVectorsMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_xz(self, *args)

    def getOrientationVectorsMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis2D_yz(self, *args)

    def getOrientationVectorsMitosis3D(self, *args):
        return _CompuCell.MitosisSimplePlugin_getOrientationVectorsMitosis3D(self, *args)

    def doDirectionalMitosis(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis(self, *args)

    def doDirectionalMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_xy(self, *args)

    def doDirectionalMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_xz(self, *args)

    def doDirectionalMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis2D_yz(self, *args)

    def doDirectionalMitosis3D(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosis3D(self, *args)

    def doDirectionalMitosisOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSimplePlugin_doDirectionalMitosisOrientationVectorBased(self, *args)

    def setMitosisFlag(self, *args):
        return _CompuCell.MitosisSimplePlugin_setMitosisFlag(self, *args)

    def getMitosisFlag(self, *args):
        return _CompuCell.MitosisSimplePlugin_getMitosisFlag(self, *args)
MitosisSimplePlugin_swigregister = _CompuCell.MitosisSimplePlugin_swigregister
MitosisSimplePlugin_swigregister(MitosisSimplePlugin)

class VolumeTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_VolumeTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_VolumeTrackerPlugin
    __del__ = lambda self: None

    def initVec(self, *args):
        return _CompuCell.VolumeTrackerPlugin_initVec(self, *args)

    def init(self, *args):
        return _CompuCell.VolumeTrackerPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.VolumeTrackerPlugin_handleEvent(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.VolumeTrackerPlugin_field3DChange(self, *args)

    def checkIfOKToResize(self, *args):
        return _CompuCell.VolumeTrackerPlugin_checkIfOKToResize(self, *args)

    def step(self, *args):
        return _CompuCell.VolumeTrackerPlugin_step(self, *args)

    def toString(self, *args):
        return _CompuCell.VolumeTrackerPlugin_toString(self, *args)

    def steerableName(self, *args):
        return _CompuCell.VolumeTrackerPlugin_steerableName(self, *args)
VolumeTrackerPlugin_swigregister = _CompuCell.VolumeTrackerPlugin_swigregister
VolumeTrackerPlugin_swigregister(VolumeTrackerPlugin)


def getVolumeTrackerPlugin(*args):
    return _CompuCell.getVolumeTrackerPlugin(*args)
getVolumeTrackerPlugin = _CompuCell.getVolumeTrackerPlugin
class CenterOfMassPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CenterOfMassPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CenterOfMassPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CenterOfMassPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CenterOfMassPlugin
    __del__ = lambda self: None

    def getCenterOfMass(self, *args):
        return _CompuCell.CenterOfMassPlugin_getCenterOfMass(self, *args)

    def field3DCheck(self, *args):
        return _CompuCell.CenterOfMassPlugin_field3DCheck(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.CenterOfMassPlugin_handleEvent(self, *args)

    def init(self, *args):
        return _CompuCell.CenterOfMassPlugin_init(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.CenterOfMassPlugin_field3DChange(self, *args)

    def toString(self, *args):
        return _CompuCell.CenterOfMassPlugin_toString(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CenterOfMassPlugin_steerableName(self, *args)
CenterOfMassPlugin_swigregister = _CompuCell.CenterOfMassPlugin_swigregister
CenterOfMassPlugin_swigregister(CenterOfMassPlugin)


def getCenterOfMassPlugin(*args):
    return _CompuCell.getCenterOfMassPlugin(*args)
getCenterOfMassPlugin = _CompuCell.getCenterOfMassPlugin
class NeighborSurfaceData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeighborSurfaceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeighborSurfaceData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_NeighborSurfaceData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.NeighborSurfaceData___lt__(self, *args)

    def incrementCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_incrementCommonSurfaceArea(self, *args)

    def decrementCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_decrementCommonSurfaceArea(self, *args)

    def OKToRemove(self, *args):
        return _CompuCell.NeighborSurfaceData_OKToRemove(self, *args)

    def __eq__(self, *args):
        return _CompuCell.NeighborSurfaceData___eq__(self, *args)

    def getCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborSurfaceData_getCommonSurfaceArea(self, *args)
    __swig_setmethods__["neighborAddress"] = _CompuCell.NeighborSurfaceData_neighborAddress_set
    __swig_getmethods__["neighborAddress"] = _CompuCell.NeighborSurfaceData_neighborAddress_get
    if _newclass:
        neighborAddress = _swig_property(_CompuCell.NeighborSurfaceData_neighborAddress_get, _CompuCell.NeighborSurfaceData_neighborAddress_set)
    __swig_setmethods__["commonSurfaceArea"] = _CompuCell.NeighborSurfaceData_commonSurfaceArea_set
    __swig_getmethods__["commonSurfaceArea"] = _CompuCell.NeighborSurfaceData_commonSurfaceArea_get
    if _newclass:
        commonSurfaceArea = _swig_property(_CompuCell.NeighborSurfaceData_commonSurfaceArea_get, _CompuCell.NeighborSurfaceData_commonSurfaceArea_set)
    __swig_destroy__ = _CompuCell.delete_NeighborSurfaceData
    __del__ = lambda self: None
NeighborSurfaceData_swigregister = _CompuCell.NeighborSurfaceData_swigregister
NeighborSurfaceData_swigregister(NeighborSurfaceData)

class NeighborTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeighborTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeighborTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_NeighborTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def trackerNumber(self, *args):
        return _CompuCell.NeighborTracker_trackerNumber(self, *args)
    __swig_destroy__ = _CompuCell.delete_NeighborTracker
    __del__ = lambda self: None
    __swig_setmethods__["cellNeighbors"] = _CompuCell.NeighborTracker_cellNeighbors_set
    __swig_getmethods__["cellNeighbors"] = _CompuCell.NeighborTracker_cellNeighbors_get
    if _newclass:
        cellNeighbors = _swig_property(_CompuCell.NeighborTracker_cellNeighbors_get, _CompuCell.NeighborTracker_cellNeighbors_set)
NeighborTracker_swigregister = _CompuCell.NeighborTracker_swigregister
NeighborTracker_swigregister(NeighborTracker)

class neighbortrackeraccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neighbortrackeraccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neighbortrackeraccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.neighbortrackeraccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_neighbortrackeraccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_neighbortrackeraccessor
    __del__ = lambda self: None
neighbortrackeraccessor_swigregister = _CompuCell.neighbortrackeraccessor_swigregister
neighbortrackeraccessor_swigregister(neighbortrackeraccessor)

class nsdSetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nsdSetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nsdSetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.nsdSetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.nsdSetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.nsdSetPyItr_current_get, _CompuCell.nsdSetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.nsdSetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.nsdSetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.nsdSetPyItr_begin_get, _CompuCell.nsdSetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.nsdSetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.nsdSetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.nsdSetPyItr_end_get, _CompuCell.nsdSetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_nsdSetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.nsdSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.nsdSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.nsdSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.nsdSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.nsdSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.nsdSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.nsdSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.nsdSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.nsdSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_nsdSetPyItr
    __del__ = lambda self: None
nsdSetPyItr_swigregister = _CompuCell.nsdSetPyItr_swigregister
nsdSetPyItr_swigregister(nsdSetPyItr)

class neighborsurfacedataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neighborsurfacedataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neighborsurfacedataset, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.neighborsurfacedataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.neighborsurfacedataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.neighborsurfacedataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.neighborsurfacedataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.neighborsurfacedataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.neighborsurfacedataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.neighborsurfacedataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.neighborsurfacedataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.neighborsurfacedataset_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_neighborsurfacedataset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.neighborsurfacedataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.neighborsurfacedataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.neighborsurfacedataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.neighborsurfacedataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.neighborsurfacedataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.neighborsurfacedataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.neighborsurfacedataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.neighborsurfacedataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.neighborsurfacedataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.neighborsurfacedataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.neighborsurfacedataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.neighborsurfacedataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.neighborsurfacedataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.neighborsurfacedataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.neighborsurfacedataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_neighborsurfacedataset
    __del__ = lambda self: None
neighborsurfacedataset_swigregister = _CompuCell.neighborsurfacedataset_swigregister
neighborsurfacedataset_swigregister(neighborsurfacedataset)

class NeighborTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeighborTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighborTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_NeighborTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_NeighborTrackerPlugin
    __del__ = lambda self: None

    def field3DChange(self, *args):
        return _CompuCell.NeighborTrackerPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.NeighborTrackerPlugin_init(self, *args)

    def toString(self, *args):
        return _CompuCell.NeighborTrackerPlugin_toString(self, *args)

    def getNeighborTrackerAccessorPtr(self, *args):
        return _CompuCell.NeighborTrackerPlugin_getNeighborTrackerAccessorPtr(self, *args)

    def returnNumber(self, *args):
        return _CompuCell.NeighborTrackerPlugin_returnNumber(self, *args)

    def getCommonSurfaceArea(self, *args):
        return _CompuCell.NeighborTrackerPlugin_getCommonSurfaceArea(self, *args)
NeighborTrackerPlugin_swigregister = _CompuCell.NeighborTrackerPlugin_swigregister
NeighborTrackerPlugin_swigregister(NeighborTrackerPlugin)


def getNeighborTrackerPlugin(*args):
    return _CompuCell.getNeighborTrackerPlugin(*args)
getNeighborTrackerPlugin = _CompuCell.getNeighborTrackerPlugin
class PixelTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelTrackerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PixelTrackerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.PixelTrackerData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.PixelTrackerData___eq__(self, *args)
    __swig_setmethods__["pixel"] = _CompuCell.PixelTrackerData_pixel_set
    __swig_getmethods__["pixel"] = _CompuCell.PixelTrackerData_pixel_get
    if _newclass:
        pixel = _swig_property(_CompuCell.PixelTrackerData_pixel_get, _CompuCell.PixelTrackerData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_PixelTrackerData
    __del__ = lambda self: None
PixelTrackerData_swigregister = _CompuCell.PixelTrackerData_swigregister
PixelTrackerData_swigregister(PixelTrackerData)

class PixelTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PixelTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PixelTracker
    __del__ = lambda self: None
    __swig_setmethods__["pixelSet"] = _CompuCell.PixelTracker_pixelSet_set
    __swig_getmethods__["pixelSet"] = _CompuCell.PixelTracker_pixelSet_get
    if _newclass:
        pixelSet = _swig_property(_CompuCell.PixelTracker_pixelSet_get, _CompuCell.PixelTracker_pixelSet_set)
PixelTracker_swigregister = _CompuCell.PixelTracker_swigregister
PixelTracker_swigregister(PixelTracker)

class PixelTrackerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelTrackerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelTrackerAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.PixelTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_PixelTrackerAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PixelTrackerAccessor
    __del__ = lambda self: None
PixelTrackerAccessor_swigregister = _CompuCell.PixelTrackerAccessor_swigregister
PixelTrackerAccessor_swigregister(PixelTrackerAccessor)

class PixelTrackerDataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelTrackerDataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelTrackerDataset, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.PixelTrackerDataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.PixelTrackerDataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.PixelTrackerDataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.PixelTrackerDataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.PixelTrackerDataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.PixelTrackerDataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.PixelTrackerDataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.PixelTrackerDataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.PixelTrackerDataset_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_PixelTrackerDataset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.PixelTrackerDataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.PixelTrackerDataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.PixelTrackerDataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.PixelTrackerDataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.PixelTrackerDataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.PixelTrackerDataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.PixelTrackerDataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.PixelTrackerDataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.PixelTrackerDataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.PixelTrackerDataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.PixelTrackerDataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.PixelTrackerDataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.PixelTrackerDataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.PixelTrackerDataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.PixelTrackerDataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_PixelTrackerDataset
    __del__ = lambda self: None
PixelTrackerDataset_swigregister = _CompuCell.PixelTrackerDataset_swigregister
PixelTrackerDataset_swigregister(PixelTrackerDataset)

class pixelSetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pixelSetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pixelSetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.pixelSetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.pixelSetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.pixelSetPyItr_current_get, _CompuCell.pixelSetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.pixelSetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.pixelSetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.pixelSetPyItr_begin_get, _CompuCell.pixelSetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.pixelSetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.pixelSetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.pixelSetPyItr_end_get, _CompuCell.pixelSetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_pixelSetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.pixelSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.pixelSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.pixelSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.pixelSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.pixelSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.pixelSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.pixelSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.pixelSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.pixelSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_pixelSetPyItr
    __del__ = lambda self: None
pixelSetPyItr_swigregister = _CompuCell.pixelSetPyItr_swigregister
pixelSetPyItr_swigregister(pixelSetPyItr)

class PixelTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PixelTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PixelTrackerPlugin
    __del__ = lambda self: None

    def field3DChange(self, *args):
        return _CompuCell.PixelTrackerPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.PixelTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PixelTrackerPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.PixelTrackerPlugin_toString(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.PixelTrackerPlugin_handleEvent(self, *args)

    def getPixelTrackerAccessorPtr(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelTrackerAccessorPtr(self, *args)

    def getPixelTrackerData(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelTrackerData(self, *args)

    def enableMediumTracker(self, *args):
        return _CompuCell.PixelTrackerPlugin_enableMediumTracker(self, *args)

    def mediumTrackerDataInit(self, *args):
        return _CompuCell.PixelTrackerPlugin_mediumTrackerDataInit(self, *args)

    def trackingMedium(self, *args):
        return _CompuCell.PixelTrackerPlugin_trackingMedium(self, *args)

    def getMediumPixelSet(self, *args):
        return _CompuCell.PixelTrackerPlugin_getMediumPixelSet(self, *args)

    def getPixelWorkerSets(self, *args):
        return _CompuCell.PixelTrackerPlugin_getPixelWorkerSets(self, *args)
PixelTrackerPlugin_swigregister = _CompuCell.PixelTrackerPlugin_swigregister
PixelTrackerPlugin_swigregister(PixelTrackerPlugin)


def getPixelTrackerPlugin(*args):
    return _CompuCell.getPixelTrackerPlugin(*args)
getPixelTrackerPlugin = _CompuCell.getPixelTrackerPlugin
class BoundaryPixelTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryPixelTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryPixelTrackerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryPixelTrackerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.BoundaryPixelTrackerData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.BoundaryPixelTrackerData___eq__(self, *args)
    __swig_setmethods__["pixel"] = _CompuCell.BoundaryPixelTrackerData_pixel_set
    __swig_getmethods__["pixel"] = _CompuCell.BoundaryPixelTrackerData_pixel_get
    if _newclass:
        pixel = _swig_property(_CompuCell.BoundaryPixelTrackerData_pixel_get, _CompuCell.BoundaryPixelTrackerData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerData
    __del__ = lambda self: None
BoundaryPixelTrackerData_swigregister = _CompuCell.BoundaryPixelTrackerData_swigregister
BoundaryPixelTrackerData_swigregister(BoundaryPixelTrackerData)

class BoundaryPixelTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryPixelTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryPixelTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryPixelTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTracker
    __del__ = lambda self: None
    __swig_setmethods__["pixelSet"] = _CompuCell.BoundaryPixelTracker_pixelSet_set
    __swig_getmethods__["pixelSet"] = _CompuCell.BoundaryPixelTracker_pixelSet_get
    if _newclass:
        pixelSet = _swig_property(_CompuCell.BoundaryPixelTracker_pixelSet_get, _CompuCell.BoundaryPixelTracker_pixelSet_set)
    __swig_setmethods__["pixelSetMap"] = _CompuCell.BoundaryPixelTracker_pixelSetMap_set
    __swig_getmethods__["pixelSetMap"] = _CompuCell.BoundaryPixelTracker_pixelSetMap_get
    if _newclass:
        pixelSetMap = _swig_property(_CompuCell.BoundaryPixelTracker_pixelSetMap_get, _CompuCell.BoundaryPixelTracker_pixelSetMap_set)
BoundaryPixelTracker_swigregister = _CompuCell.BoundaryPixelTracker_swigregister
BoundaryPixelTracker_swigregister(BoundaryPixelTracker)

class BoundaryPixelTrackerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryPixelTrackerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryPixelTrackerAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.BoundaryPixelTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryPixelTrackerAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerAccessor
    __del__ = lambda self: None
BoundaryPixelTrackerAccessor_swigregister = _CompuCell.BoundaryPixelTrackerAccessor_swigregister
BoundaryPixelTrackerAccessor_swigregister(BoundaryPixelTrackerAccessor)

class BoundaryPixelTrackerDataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryPixelTrackerDataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryPixelTrackerDataset, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryPixelTrackerDataset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.BoundaryPixelTrackerDataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerDataset
    __del__ = lambda self: None
BoundaryPixelTrackerDataset_swigregister = _CompuCell.BoundaryPixelTrackerDataset_swigregister
BoundaryPixelTrackerDataset_swigregister(BoundaryPixelTrackerDataset)

class IntBoundaryPixelTrackerDataSetMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntBoundaryPixelTrackerDataSetMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntBoundaryPixelTrackerDataSetMap, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___len__(self, *args)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___getitem__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___delitem__(self, *args)

    def has_key(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_has_key(self, *args)

    def keys(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_keys(self, *args)

    def values(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_values(self, *args)

    def items(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_items(self, *args)

    def __contains__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___contains__(self, *args)

    def key_iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_key_iterator(self, *args)

    def value_iterator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_value_iterator(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap___setitem__(self, *args)

    def asdict(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_asdict(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_IntBoundaryPixelTrackerDataSetMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_empty(self, *args)

    def size(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_size(self, *args)

    def swap(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_begin(self, *args)

    def end(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_get_allocator(self, *args)

    def count(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_count(self, *args)

    def erase(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_erase(self, *args)

    def find(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.IntBoundaryPixelTrackerDataSetMap_upper_bound(self, *args)
    __swig_destroy__ = _CompuCell.delete_IntBoundaryPixelTrackerDataSetMap
    __del__ = lambda self: None
IntBoundaryPixelTrackerDataSetMap_swigregister = _CompuCell.IntBoundaryPixelTrackerDataSetMap_swigregister
IntBoundaryPixelTrackerDataSetMap_swigregister(IntBoundaryPixelTrackerDataSetMap)

class boundaryPixelSetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, boundaryPixelSetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, boundaryPixelSetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.boundaryPixelSetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.boundaryPixelSetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.boundaryPixelSetPyItr_current_get, _CompuCell.boundaryPixelSetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.boundaryPixelSetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.boundaryPixelSetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.boundaryPixelSetPyItr_begin_get, _CompuCell.boundaryPixelSetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.boundaryPixelSetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.boundaryPixelSetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.boundaryPixelSetPyItr_end_get, _CompuCell.boundaryPixelSetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_boundaryPixelSetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.boundaryPixelSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_boundaryPixelSetPyItr
    __del__ = lambda self: None
boundaryPixelSetPyItr_swigregister = _CompuCell.boundaryPixelSetPyItr_swigregister
boundaryPixelSetPyItr_swigregister(boundaryPixelSetPyItr)

class BoundaryPixelTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryPixelTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryPixelTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryPixelTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BoundaryPixelTrackerPlugin
    __del__ = lambda self: None

    def field3DChange(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_field3DChange(self, *args)

    def updateBoundaryPixels(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_updateBoundaryPixels(self, *args)

    def init(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_toString(self, *args)

    def getPixelSetForNeighborOrderPtr(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getPixelSetForNeighborOrderPtr(self, *args)

    def getBoundaryPixelTrackerAccessorPtr(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getBoundaryPixelTrackerAccessorPtr(self, *args)

    def getBoundaryPixelTrackerData(self, *args):
        return _CompuCell.BoundaryPixelTrackerPlugin_getBoundaryPixelTrackerData(self, *args)
BoundaryPixelTrackerPlugin_swigregister = _CompuCell.BoundaryPixelTrackerPlugin_swigregister
BoundaryPixelTrackerPlugin_swigregister(BoundaryPixelTrackerPlugin)


def getBoundaryPixelTrackerPlugin(*args):
    return _CompuCell.getBoundaryPixelTrackerPlugin(*args)
getBoundaryPixelTrackerPlugin = _CompuCell.getBoundaryPixelTrackerPlugin
class ContactLocalFlexData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactLocalFlexData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactLocalFlexData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactLocalFlexData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.ContactLocalFlexData___lt__(self, *args)
    __swig_setmethods__["neighborAddress"] = _CompuCell.ContactLocalFlexData_neighborAddress_set
    __swig_getmethods__["neighborAddress"] = _CompuCell.ContactLocalFlexData_neighborAddress_get
    if _newclass:
        neighborAddress = _swig_property(_CompuCell.ContactLocalFlexData_neighborAddress_get, _CompuCell.ContactLocalFlexData_neighborAddress_set)
    __swig_setmethods__["J"] = _CompuCell.ContactLocalFlexData_J_set
    __swig_getmethods__["J"] = _CompuCell.ContactLocalFlexData_J_get
    if _newclass:
        J = _swig_property(_CompuCell.ContactLocalFlexData_J_get, _CompuCell.ContactLocalFlexData_J_set)
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexData
    __del__ = lambda self: None
ContactLocalFlexData_swigregister = _CompuCell.ContactLocalFlexData_swigregister
ContactLocalFlexData_swigregister(ContactLocalFlexData)

class ContactLocalFlexDataContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactLocalFlexDataContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactLocalFlexDataContainer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactLocalFlexDataContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexDataContainer
    __del__ = lambda self: None
    __swig_setmethods__["contactDataContainer"] = _CompuCell.ContactLocalFlexDataContainer_contactDataContainer_set
    __swig_getmethods__["contactDataContainer"] = _CompuCell.ContactLocalFlexDataContainer_contactDataContainer_get
    if _newclass:
        contactDataContainer = _swig_property(_CompuCell.ContactLocalFlexDataContainer_contactDataContainer_get, _CompuCell.ContactLocalFlexDataContainer_contactDataContainer_set)
    __swig_setmethods__["localDefaultContactEnergies"] = _CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_set
    __swig_getmethods__["localDefaultContactEnergies"] = _CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_get
    if _newclass:
        localDefaultContactEnergies = _swig_property(_CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_get, _CompuCell.ContactLocalFlexDataContainer_localDefaultContactEnergies_set)
ContactLocalFlexDataContainer_swigregister = _CompuCell.ContactLocalFlexDataContainer_swigregister
ContactLocalFlexDataContainer_swigregister(ContactLocalFlexDataContainer)

class contactlocalflexcontainerccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contactlocalflexcontainerccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contactlocalflexcontainerccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactlocalflexcontainerccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_contactlocalflexcontainerccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_contactlocalflexcontainerccessor
    __del__ = lambda self: None
contactlocalflexcontainerccessor_swigregister = _CompuCell.contactlocalflexcontainerccessor_swigregister
contactlocalflexcontainerccessor_swigregister(contactlocalflexcontainerccessor)

class clfdSetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clfdSetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clfdSetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.clfdSetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.clfdSetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.clfdSetPyItr_current_get, _CompuCell.clfdSetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.clfdSetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.clfdSetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.clfdSetPyItr_begin_get, _CompuCell.clfdSetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.clfdSetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.clfdSetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.clfdSetPyItr_end_get, _CompuCell.clfdSetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_clfdSetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.clfdSetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.clfdSetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.clfdSetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.clfdSetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.clfdSetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.clfdSetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.clfdSetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.clfdSetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.clfdSetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_clfdSetPyItr
    __del__ = lambda self: None
clfdSetPyItr_swigregister = _CompuCell.clfdSetPyItr_swigregister
clfdSetPyItr_swigregister(clfdSetPyItr)

class contactlocalflexdataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contactlocalflexdataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contactlocalflexdataset, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.contactlocalflexdataset_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.contactlocalflexdataset___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.contactlocalflexdataset___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.contactlocalflexdataset___len__(self, *args)

    def append(self, *args):
        return _CompuCell.contactlocalflexdataset_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.contactlocalflexdataset___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.contactlocalflexdataset___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.contactlocalflexdataset_add(self, *args)

    def discard(self, *args):
        return _CompuCell.contactlocalflexdataset_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_contactlocalflexdataset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.contactlocalflexdataset_empty(self, *args)

    def size(self, *args):
        return _CompuCell.contactlocalflexdataset_size(self, *args)

    def clear(self, *args):
        return _CompuCell.contactlocalflexdataset_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.contactlocalflexdataset_swap(self, *args)

    def count(self, *args):
        return _CompuCell.contactlocalflexdataset_count(self, *args)

    def begin(self, *args):
        return _CompuCell.contactlocalflexdataset_begin(self, *args)

    def end(self, *args):
        return _CompuCell.contactlocalflexdataset_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.contactlocalflexdataset_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.contactlocalflexdataset_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.contactlocalflexdataset_erase(self, *args)

    def find(self, *args):
        return _CompuCell.contactlocalflexdataset_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.contactlocalflexdataset_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.contactlocalflexdataset_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.contactlocalflexdataset_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.contactlocalflexdataset_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_contactlocalflexdataset
    __del__ = lambda self: None
contactlocalflexdataset_swigregister = _CompuCell.contactlocalflexdataset_swigregister
contactlocalflexdataset_swigregister(contactlocalflexdataset)

class ContactLocalFlexPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactLocalFlexPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactLocalFlexPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactLocalFlexPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactLocalFlexPlugin
    __del__ = lambda self: None

    def getContactDataContainerAccessorPtr(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_getContactDataContainerAccessorPtr(self, *args)

    def initializeContactLocalFlexData(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_initializeContactLocalFlexData(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_field3DChange(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_extraInit(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_toString(self, *args)

    def update(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_steerableName(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_contactEnergy(self, *args)

    def defaultContactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_defaultContactEnergy(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactLocalFlexPlugin_setContactEnergy(self, *args)
ContactLocalFlexPlugin_swigregister = _CompuCell.ContactLocalFlexPlugin_swigregister
ContactLocalFlexPlugin_swigregister(ContactLocalFlexPlugin)


def getContactLocalFlexPlugin(*args):
    return _CompuCell.getContactLocalFlexPlugin(*args)
getContactLocalFlexPlugin = _CompuCell.getContactLocalFlexPlugin
class ContactLocalProductData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactLocalProductData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactLocalProductData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactLocalProductData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["jVec"] = _CompuCell.ContactLocalProductData_jVec_set
    __swig_getmethods__["jVec"] = _CompuCell.ContactLocalProductData_jVec_get
    if _newclass:
        jVec = _swig_property(_CompuCell.ContactLocalProductData_jVec_get, _CompuCell.ContactLocalProductData_jVec_set)
    __swig_destroy__ = _CompuCell.delete_ContactLocalProductData
    __del__ = lambda self: None
ContactLocalProductData_swigregister = _CompuCell.ContactLocalProductData_swigregister
ContactLocalProductData_swigregister(ContactLocalProductData)

class contactproductflexccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contactproductflexccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contactproductflexccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactproductflexccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_contactproductflexccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_contactproductflexccessor
    __del__ = lambda self: None
contactproductflexccessor_swigregister = _CompuCell.contactproductflexccessor_swigregister
contactproductflexccessor_swigregister(contactproductflexccessor)

class jVecPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jVecPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jVecPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.jVecPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.jVecPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.jVecPyItr_current_get, _CompuCell.jVecPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.jVecPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.jVecPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.jVecPyItr_begin_get, _CompuCell.jVecPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.jVecPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.jVecPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.jVecPyItr_end_get, _CompuCell.jVecPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_jVecPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.jVecPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.jVecPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.jVecPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.jVecPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.jVecPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.jVecPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.jVecPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.jVecPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.jVecPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_jVecPyItr
    __del__ = lambda self: None
jVecPyItr_swigregister = _CompuCell.jVecPyItr_swigregister
jVecPyItr_swigregister(jVecPyItr)

class contactproductdatacontainertype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contactproductdatacontainertype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contactproductdatacontainertype, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.contactproductdatacontainertype_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.contactproductdatacontainertype___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.contactproductdatacontainertype___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.contactproductdatacontainertype___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.contactproductdatacontainertype___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.contactproductdatacontainertype___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.contactproductdatacontainertype_pop(self, *args)

    def append(self, *args):
        return _CompuCell.contactproductdatacontainertype_append(self, *args)

    def empty(self, *args):
        return _CompuCell.contactproductdatacontainertype_empty(self, *args)

    def size(self, *args):
        return _CompuCell.contactproductdatacontainertype_size(self, *args)

    def swap(self, *args):
        return _CompuCell.contactproductdatacontainertype_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.contactproductdatacontainertype_begin(self, *args)

    def end(self, *args):
        return _CompuCell.contactproductdatacontainertype_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.contactproductdatacontainertype_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.contactproductdatacontainertype_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.contactproductdatacontainertype_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.contactproductdatacontainertype_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.contactproductdatacontainertype_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.contactproductdatacontainertype_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_contactproductdatacontainertype(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.contactproductdatacontainertype_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.contactproductdatacontainertype_front(self, *args)

    def back(self, *args):
        return _CompuCell.contactproductdatacontainertype_back(self, *args)

    def assign(self, *args):
        return _CompuCell.contactproductdatacontainertype_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.contactproductdatacontainertype_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.contactproductdatacontainertype_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.contactproductdatacontainertype_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.contactproductdatacontainertype_capacity(self, *args)

    def set(self, *args):
        return _CompuCell.contactproductdatacontainertype_set(self, *args)

    def get(self, *args):
        return _CompuCell.contactproductdatacontainertype_get(self, *args)
    __swig_destroy__ = _CompuCell.delete_contactproductdatacontainertype
    __del__ = lambda self: None
contactproductdatacontainertype_swigregister = _CompuCell.contactproductdatacontainertype_swigregister
contactproductdatacontainertype_swigregister(contactproductdatacontainertype)

class ContactLocalProductPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactLocalProductPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactLocalProductPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactLocalProductPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactLocalProductPlugin
    __del__ = lambda self: None

    def getContactProductDataAccessorPtr(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getContactProductDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactLocalProductPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactLocalProductPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactLocalProductPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.ContactLocalProductPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.ContactLocalProductPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactLocalProductPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactLocalProductPlugin_toString(self, *args)

    def setJVecValue(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setJVecValue(self, *args)

    def getJVecValue(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getJVecValue(self, *args)

    def setCadherinConcentration(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setCadherinConcentration(self, *args)

    def getCadherinConcentration(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getCadherinConcentration(self, *args)

    def setCadherinConcentrationVec(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setCadherinConcentrationVec(self, *args)

    def getCadherinConcentrationVec(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getCadherinConcentrationVec(self, *args)

    def contactSpecificity(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactSpecificity(self, *args)

    def contactEnergyLinear(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyLinear(self, *args)

    def contactEnergyQuadratic(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyQuadratic(self, *args)

    def contactEnergyMin(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyMin(self, *args)

    def contactEnergyCustom(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyCustom(self, *args)

    def contactEnergyLinearMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyLinearMediumLocal(self, *args)

    def contactEnergyQuadraticMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyQuadraticMediumLocal(self, *args)

    def contactEnergyMinMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyMinMediumLocal(self, *args)

    def contactEnergyCustomMediumLocal(self, *args):
        return _CompuCell.ContactLocalProductPlugin_contactEnergyCustomMediumLocal(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactLocalProductPlugin_setContactEnergy(self, *args)

    def getIndex(self, *args):
        return _CompuCell.ContactLocalProductPlugin_getIndex(self, *args)
ContactLocalProductPlugin_swigregister = _CompuCell.ContactLocalProductPlugin_swigregister
ContactLocalProductPlugin_swigregister(ContactLocalProductPlugin)


def getContactLocalProductPlugin(*args):
    return _CompuCell.getContactLocalProductPlugin(*args)
getContactLocalProductPlugin = _CompuCell.getContactLocalProductPlugin
class ContactMultiCadData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactMultiCadData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactMultiCadData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactMultiCadData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["jVec"] = _CompuCell.ContactMultiCadData_jVec_set
    __swig_getmethods__["jVec"] = _CompuCell.ContactMultiCadData_jVec_get
    if _newclass:
        jVec = _swig_property(_CompuCell.ContactMultiCadData_jVec_get, _CompuCell.ContactMultiCadData_jVec_set)

    def assignValue(self, *args):
        return _CompuCell.ContactMultiCadData_assignValue(self, *args)

    def getValue(self, *args):
        return _CompuCell.ContactMultiCadData_getValue(self, *args)
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadData
    __del__ = lambda self: None
ContactMultiCadData_swigregister = _CompuCell.ContactMultiCadData_swigregister
ContactMultiCadData_swigregister(ContactMultiCadData)

class CadherinData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CadherinData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CadherinData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CadherinData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["cad1Name"] = _CompuCell.CadherinData_cad1Name_set
    __swig_getmethods__["cad1Name"] = _CompuCell.CadherinData_cad1Name_get
    if _newclass:
        cad1Name = _swig_property(_CompuCell.CadherinData_cad1Name_get, _CompuCell.CadherinData_cad1Name_set)
    __swig_setmethods__["cad2Name"] = _CompuCell.CadherinData_cad2Name_set
    __swig_getmethods__["cad2Name"] = _CompuCell.CadherinData_cad2Name_get
    if _newclass:
        cad2Name = _swig_property(_CompuCell.CadherinData_cad2Name_get, _CompuCell.CadherinData_cad2Name_set)
    __swig_setmethods__["specificity"] = _CompuCell.CadherinData_specificity_set
    __swig_getmethods__["specificity"] = _CompuCell.CadherinData_specificity_get
    if _newclass:
        specificity = _swig_property(_CompuCell.CadherinData_specificity_get, _CompuCell.CadherinData_specificity_set)
    __swig_destroy__ = _CompuCell.delete_CadherinData
    __del__ = lambda self: None
CadherinData_swigregister = _CompuCell.CadherinData_swigregister
CadherinData_swigregister(CadherinData)

class ContactMultiCadSpecificityCadherin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactMultiCadSpecificityCadherin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactMultiCadSpecificityCadherin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactMultiCadSpecificityCadherin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["cadherinNameLocalSet"] = _CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_set
    __swig_getmethods__["cadherinNameLocalSet"] = _CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_get
    if _newclass:
        cadherinNameLocalSet = _swig_property(_CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_get, _CompuCell.ContactMultiCadSpecificityCadherin_cadherinNameLocalSet_set)
    __swig_setmethods__["specificityCadherinTuppleVec"] = _CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_set
    __swig_getmethods__["specificityCadherinTuppleVec"] = _CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_get
    if _newclass:
        specificityCadherinTuppleVec = _swig_property(_CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_get, _CompuCell.ContactMultiCadSpecificityCadherin_specificityCadherinTuppleVec_set)

    def Specificity(self, *args):
        return _CompuCell.ContactMultiCadSpecificityCadherin_Specificity(self, *args)

    def getSpecificity(self, *args):
        return _CompuCell.ContactMultiCadSpecificityCadherin_getSpecificity(self, *args)
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadSpecificityCadherin
    __del__ = lambda self: None
ContactMultiCadSpecificityCadherin_swigregister = _CompuCell.ContactMultiCadSpecificityCadherin_swigregister
ContactMultiCadSpecificityCadherin_swigregister(ContactMultiCadSpecificityCadherin)

class contactmulticaddataaccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, contactmulticaddataaccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, contactmulticaddataaccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.contactmulticaddataaccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_contactmulticaddataaccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_contactmulticaddataaccessor
    __del__ = lambda self: None
contactmulticaddataaccessor_swigregister = _CompuCell.contactmulticaddataaccessor_swigregister
contactmulticaddataaccessor_swigregister(contactmulticaddataaccessor)

class ContactMultiCadPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactMultiCadPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactMultiCadPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactMultiCadPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactMultiCadPlugin
    __del__ = lambda self: None

    def getContactMultiCadDataAccessorPtr(self, *args):
        return _CompuCell.ContactMultiCadPlugin_getContactMultiCadDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactMultiCadPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactMultiCadPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ContactMultiCadPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactMultiCadPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactMultiCadPlugin_toString(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_contactEnergy(self, *args)

    def contactEnergyLinear(self, *args):
        return _CompuCell.ContactMultiCadPlugin_contactEnergyLinear(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactMultiCadPlugin_setContactEnergy(self, *args)
ContactMultiCadPlugin_swigregister = _CompuCell.ContactMultiCadPlugin_swigregister
ContactMultiCadPlugin_swigregister(ContactMultiCadPlugin)


def getContactMultiCadPlugin(*args):
    return _CompuCell.getContactMultiCadPlugin(*args)
getContactMultiCadPlugin = _CompuCell.getContactMultiCadPlugin
class AdhesionFlexData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdhesionFlexData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdhesionFlexData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_AdhesionFlexData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["adhesionMoleculeDensityVec"] = _CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_set
    __swig_getmethods__["adhesionMoleculeDensityVec"] = _CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_get
    if _newclass:
        adhesionMoleculeDensityVec = _swig_property(_CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_get, _CompuCell.AdhesionFlexData_adhesionMoleculeDensityVec_set)

    def assignValue(self, *args):
        return _CompuCell.AdhesionFlexData_assignValue(self, *args)

    def assignAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexData_assignAdhesionMoleculeDensityVector(self, *args)

    def getValue(self, *args):
        return _CompuCell.AdhesionFlexData_getValue(self, *args)
    __swig_destroy__ = _CompuCell.delete_AdhesionFlexData
    __del__ = lambda self: None
AdhesionFlexData_swigregister = _CompuCell.AdhesionFlexData_swigregister
AdhesionFlexData_swigregister(AdhesionFlexData)

class AdhesionMoleculeDensityData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdhesionMoleculeDensityData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdhesionMoleculeDensityData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_AdhesionMoleculeDensityData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["molecule"] = _CompuCell.AdhesionMoleculeDensityData_molecule_set
    __swig_getmethods__["molecule"] = _CompuCell.AdhesionMoleculeDensityData_molecule_get
    if _newclass:
        molecule = _swig_property(_CompuCell.AdhesionMoleculeDensityData_molecule_get, _CompuCell.AdhesionMoleculeDensityData_molecule_set)
    __swig_setmethods__["density"] = _CompuCell.AdhesionMoleculeDensityData_density_set
    __swig_getmethods__["density"] = _CompuCell.AdhesionMoleculeDensityData_density_get
    if _newclass:
        density = _swig_property(_CompuCell.AdhesionMoleculeDensityData_density_get, _CompuCell.AdhesionMoleculeDensityData_density_set)
    __swig_destroy__ = _CompuCell.delete_AdhesionMoleculeDensityData
    __del__ = lambda self: None
AdhesionMoleculeDensityData_swigregister = _CompuCell.AdhesionMoleculeDensityData_swigregister
AdhesionMoleculeDensityData_swigregister(AdhesionMoleculeDensityData)

class adhesionflexdataaccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adhesionflexdataaccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adhesionflexdataaccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.adhesionflexdataaccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_adhesionflexdataaccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_adhesionflexdataaccessor
    __del__ = lambda self: None
adhesionflexdataaccessor_swigregister = _CompuCell.adhesionflexdataaccessor_swigregister
adhesionflexdataaccessor_swigregister(adhesionflexdataaccessor)

class AdhesionFlexPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdhesionFlexPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdhesionFlexPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_AdhesionFlexPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_AdhesionFlexPlugin
    __del__ = lambda self: None

    def getAdhesionFlexDataAccessorPtr(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionFlexDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.AdhesionFlexPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.AdhesionFlexPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.AdhesionFlexPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.AdhesionFlexPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.AdhesionFlexPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.AdhesionFlexPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.AdhesionFlexPlugin_toString(self, *args)

    def adhesionFlexEnergyCustom(self, *args):
        return _CompuCell.AdhesionFlexPlugin_adhesionFlexEnergyCustom(self, *args)

    def setBindingParameter(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameter(self, *args)

    def setBindingParameterDirect(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameterDirect(self, *args)

    def setBindingParameterByIndexDirect(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setBindingParameterByIndexDirect(self, *args)

    def getBindingParameterArray(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getBindingParameterArray(self, *args)

    def getAdhesionMoleculeNameVec(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeNameVec(self, *args)

    def setAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensity(self, *args)

    def setAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensityByIndex(self, *args)

    def setAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setAdhesionMoleculeDensityVector(self, *args)

    def assignNewAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_assignNewAdhesionMoleculeDensityVector(self, *args)

    def setMediumAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensity(self, *args)

    def setMediumAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensityByIndex(self, *args)

    def setMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_setMediumAdhesionMoleculeDensityVector(self, *args)

    def assignNewMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_assignNewMediumAdhesionMoleculeDensityVector(self, *args)

    def getAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensity(self, *args)

    def getAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensityByIndex(self, *args)

    def getAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getAdhesionMoleculeDensityVector(self, *args)

    def getMediumAdhesionMoleculeDensity(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensity(self, *args)

    def getMediumAdhesionMoleculeDensityByIndex(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensityByIndex(self, *args)

    def getMediumAdhesionMoleculeDensityVector(self, *args):
        return _CompuCell.AdhesionFlexPlugin_getMediumAdhesionMoleculeDensityVector(self, *args)

    def overrideInitialization(self, *args):
        return _CompuCell.AdhesionFlexPlugin_overrideInitialization(self, *args)
AdhesionFlexPlugin_swigregister = _CompuCell.AdhesionFlexPlugin_swigregister
AdhesionFlexPlugin_swigregister(AdhesionFlexPlugin)


def getAdhesionFlexPlugin(*args):
    return _CompuCell.getAdhesionFlexPlugin(*args)
getAdhesionFlexPlugin = _CompuCell.getAdhesionFlexPlugin
class CellOrientationVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellOrientationVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellOrientationVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellOrientationVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _CompuCell.CellOrientationVector_x_set
    __swig_getmethods__["x"] = _CompuCell.CellOrientationVector_x_get
    if _newclass:
        x = _swig_property(_CompuCell.CellOrientationVector_x_get, _CompuCell.CellOrientationVector_x_set)
    __swig_setmethods__["y"] = _CompuCell.CellOrientationVector_y_set
    __swig_getmethods__["y"] = _CompuCell.CellOrientationVector_y_get
    if _newclass:
        y = _swig_property(_CompuCell.CellOrientationVector_y_get, _CompuCell.CellOrientationVector_y_set)
    __swig_setmethods__["z"] = _CompuCell.CellOrientationVector_z_set
    __swig_getmethods__["z"] = _CompuCell.CellOrientationVector_z_get
    if _newclass:
        z = _swig_property(_CompuCell.CellOrientationVector_z_get, _CompuCell.CellOrientationVector_z_set)
    __swig_destroy__ = _CompuCell.delete_CellOrientationVector
    __del__ = lambda self: None
CellOrientationVector_swigregister = _CompuCell.CellOrientationVector_swigregister
CellOrientationVector_swigregister(CellOrientationVector)

class cellOrientationVectorAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellOrientationVectorAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellOrientationVectorAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.cellOrientationVectorAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_cellOrientationVectorAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_cellOrientationVectorAccessor
    __del__ = lambda self: None
cellOrientationVectorAccessor_swigregister = _CompuCell.cellOrientationVectorAccessor_swigregister
cellOrientationVectorAccessor_swigregister(cellOrientationVectorAccessor)

class LambdaCellOrientationAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LambdaCellOrientationAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LambdaCellOrientationAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.LambdaCellOrientationAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_LambdaCellOrientationAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_LambdaCellOrientationAccessor
    __del__ = lambda self: None
LambdaCellOrientationAccessor_swigregister = _CompuCell.LambdaCellOrientationAccessor_swigregister
LambdaCellOrientationAccessor_swigregister(LambdaCellOrientationAccessor)

class LambdaCellOrientation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LambdaCellOrientation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LambdaCellOrientation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_LambdaCellOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["lambdaVal"] = _CompuCell.LambdaCellOrientation_lambdaVal_set
    __swig_getmethods__["lambdaVal"] = _CompuCell.LambdaCellOrientation_lambdaVal_get
    if _newclass:
        lambdaVal = _swig_property(_CompuCell.LambdaCellOrientation_lambdaVal_get, _CompuCell.LambdaCellOrientation_lambdaVal_set)
    __swig_destroy__ = _CompuCell.delete_LambdaCellOrientation
    __del__ = lambda self: None
LambdaCellOrientation_swigregister = _CompuCell.LambdaCellOrientation_swigregister
LambdaCellOrientation_swigregister(LambdaCellOrientation)

class CellOrientationPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellOrientationPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellOrientationPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellOrientationPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CellOrientationPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.CellOrientationPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.CellOrientationPlugin_extraInit(self, *args)
    __swig_setmethods__["changeEnergyFcnPtr"] = _CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_set
    __swig_getmethods__["changeEnergyFcnPtr"] = _CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_get
    if _newclass:
        changeEnergyFcnPtr = _swig_property(_CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_get, _CompuCell.CellOrientationPlugin_changeEnergyFcnPtr_set)

    def changeEnergy(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergy(self, *args)

    def changeEnergyCOMBased(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergyCOMBased(self, *args)

    def changeEnergyPixelBased(self, *args):
        return _CompuCell.CellOrientationPlugin_changeEnergyPixelBased(self, *args)

    def getPolarizationVectorAccessorPtr(self, *args):
        return _CompuCell.CellOrientationPlugin_getPolarizationVectorAccessorPtr(self, *args)

    def getLambdaCellOrientationAccessorPtr(self, *args):
        return _CompuCell.CellOrientationPlugin_getLambdaCellOrientationAccessorPtr(self, *args)

    def setLambdaCellOrientation(self, *args):
        return _CompuCell.CellOrientationPlugin_setLambdaCellOrientation(self, *args)

    def getLambdaCellOrientation(self, *args):
        return _CompuCell.CellOrientationPlugin_getLambdaCellOrientation(self, *args)

    def update(self, *args):
        return _CompuCell.CellOrientationPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CellOrientationPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.CellOrientationPlugin_toString(self, *args)
CellOrientationPlugin_swigregister = _CompuCell.CellOrientationPlugin_swigregister
CellOrientationPlugin_swigregister(CellOrientationPlugin)


def getCellOrientationPlugin(*args):
    return _CompuCell.getCellOrientationPlugin(*args)
getCellOrientationPlugin = _CompuCell.getCellOrientationPlugin
class PolarizationVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PolarizationVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _CompuCell.PolarizationVector_x_set
    __swig_getmethods__["x"] = _CompuCell.PolarizationVector_x_get
    if _newclass:
        x = _swig_property(_CompuCell.PolarizationVector_x_get, _CompuCell.PolarizationVector_x_set)
    __swig_setmethods__["y"] = _CompuCell.PolarizationVector_y_set
    __swig_getmethods__["y"] = _CompuCell.PolarizationVector_y_get
    if _newclass:
        y = _swig_property(_CompuCell.PolarizationVector_y_get, _CompuCell.PolarizationVector_y_set)
    __swig_setmethods__["z"] = _CompuCell.PolarizationVector_z_set
    __swig_getmethods__["z"] = _CompuCell.PolarizationVector_z_get
    if _newclass:
        z = _swig_property(_CompuCell.PolarizationVector_z_get, _CompuCell.PolarizationVector_z_set)
    __swig_destroy__ = _CompuCell.delete_PolarizationVector
    __del__ = lambda self: None
PolarizationVector_swigregister = _CompuCell.PolarizationVector_swigregister
PolarizationVector_swigregister(PolarizationVector)

class polarizationVectorAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polarizationVectorAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polarizationVectorAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.polarizationVectorAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_polarizationVectorAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_polarizationVectorAccessor
    __del__ = lambda self: None
polarizationVectorAccessor_swigregister = _CompuCell.polarizationVectorAccessor_swigregister
polarizationVectorAccessor_swigregister(polarizationVectorAccessor)

class PolarizationVectorPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolarizationVectorPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolarizationVectorPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PolarizationVectorPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PolarizationVectorPlugin
    __del__ = lambda self: None

    def getPolarizationVectorAccessorPtr(self, *args):
        return _CompuCell.PolarizationVectorPlugin_getPolarizationVectorAccessorPtr(self, *args)

    def init(self, *args):
        return _CompuCell.PolarizationVectorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PolarizationVectorPlugin_extraInit(self, *args)

    def setPolarizationVector(self, *args):
        return _CompuCell.PolarizationVectorPlugin_setPolarizationVector(self, *args)

    def getPolarizationVector(self, *args):
        return _CompuCell.PolarizationVectorPlugin_getPolarizationVector(self, *args)
PolarizationVectorPlugin_swigregister = _CompuCell.PolarizationVectorPlugin_swigregister
PolarizationVectorPlugin_swigregister(PolarizationVectorPlugin)


def getPolarizationVectorPlugin(*args):
    return _CompuCell.getPolarizationVectorPlugin(*args)
getPolarizationVectorPlugin = _CompuCell.getPolarizationVectorPlugin
class ElasticityTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticityTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticityTrackerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ElasticityTrackerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.ElasticityTrackerData___lt__(self, *args)
    __swig_setmethods__["neighborAddress"] = _CompuCell.ElasticityTrackerData_neighborAddress_set
    __swig_getmethods__["neighborAddress"] = _CompuCell.ElasticityTrackerData_neighborAddress_get
    if _newclass:
        neighborAddress = _swig_property(_CompuCell.ElasticityTrackerData_neighborAddress_get, _CompuCell.ElasticityTrackerData_neighborAddress_set)
    __swig_setmethods__["lambdaLength"] = _CompuCell.ElasticityTrackerData_lambdaLength_set
    __swig_getmethods__["lambdaLength"] = _CompuCell.ElasticityTrackerData_lambdaLength_get
    if _newclass:
        lambdaLength = _swig_property(_CompuCell.ElasticityTrackerData_lambdaLength_get, _CompuCell.ElasticityTrackerData_lambdaLength_set)
    __swig_setmethods__["targetLength"] = _CompuCell.ElasticityTrackerData_targetLength_set
    __swig_getmethods__["targetLength"] = _CompuCell.ElasticityTrackerData_targetLength_get
    if _newclass:
        targetLength = _swig_property(_CompuCell.ElasticityTrackerData_targetLength_get, _CompuCell.ElasticityTrackerData_targetLength_set)
    __swig_setmethods__["maxLengthElasticity"] = _CompuCell.ElasticityTrackerData_maxLengthElasticity_set
    __swig_getmethods__["maxLengthElasticity"] = _CompuCell.ElasticityTrackerData_maxLengthElasticity_get
    if _newclass:
        maxLengthElasticity = _swig_property(_CompuCell.ElasticityTrackerData_maxLengthElasticity_get, _CompuCell.ElasticityTrackerData_maxLengthElasticity_set)
    __swig_destroy__ = _CompuCell.delete_ElasticityTrackerData
    __del__ = lambda self: None
ElasticityTrackerData_swigregister = _CompuCell.ElasticityTrackerData_swigregister
ElasticityTrackerData_swigregister(ElasticityTrackerData)

class ElasticityTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticityTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticityTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ElasticityTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ElasticityTracker
    __del__ = lambda self: None
    __swig_setmethods__["elasticityNeighbors"] = _CompuCell.ElasticityTracker_elasticityNeighbors_set
    __swig_getmethods__["elasticityNeighbors"] = _CompuCell.ElasticityTracker_elasticityNeighbors_get
    if _newclass:
        elasticityNeighbors = _swig_property(_CompuCell.ElasticityTracker_elasticityNeighbors_get, _CompuCell.ElasticityTracker_elasticityNeighbors_set)
ElasticityTracker_swigregister = _CompuCell.ElasticityTracker_swigregister
ElasticityTracker_swigregister(ElasticityTracker)

class elasticityTrackerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elasticityTrackerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elasticityTrackerAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.elasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_elasticityTrackerAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_elasticityTrackerAccessor
    __del__ = lambda self: None
elasticityTrackerAccessor_swigregister = _CompuCell.elasticityTrackerAccessor_swigregister
elasticityTrackerAccessor_swigregister(elasticityTrackerAccessor)

class elasticitySetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elasticitySetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elasticitySetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.elasticitySetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.elasticitySetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.elasticitySetPyItr_current_get, _CompuCell.elasticitySetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.elasticitySetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.elasticitySetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.elasticitySetPyItr_begin_get, _CompuCell.elasticitySetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.elasticitySetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.elasticitySetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.elasticitySetPyItr_end_get, _CompuCell.elasticitySetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_elasticitySetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.elasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.elasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.elasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.elasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.elasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.elasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.elasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.elasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.elasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_elasticitySetPyItr
    __del__ = lambda self: None
elasticitySetPyItr_swigregister = _CompuCell.elasticitySetPyItr_swigregister
elasticitySetPyItr_swigregister(elasticitySetPyItr)

class elasticityTrackerDataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elasticityTrackerDataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elasticityTrackerDataSet, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.elasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.elasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.elasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.elasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.elasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_elasticityTrackerDataSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.elasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.elasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.elasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.elasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.elasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.elasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.elasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.elasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.elasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.elasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.elasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.elasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.elasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.elasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.elasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_elasticityTrackerDataSet
    __del__ = lambda self: None
elasticityTrackerDataSet_swigregister = _CompuCell.elasticityTrackerDataSet_swigregister
elasticityTrackerDataSet_swigregister(elasticityTrackerDataSet)

class ElasticityTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticityTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticityTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ElasticityTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ElasticityTrackerPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_extraInit(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_field3DChange(self, *args)

    def getElasticityTrackerAccessorPtr(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_getElasticityTrackerAccessorPtr(self, *args)

    def getElasticityTrackerData(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_getElasticityTrackerData(self, *args)

    def findTrackerData(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_findTrackerData(self, *args)

    def assignElasticityPair(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_assignElasticityPair(self, *args)

    def addNewElasticLink(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_addNewElasticLink(self, *args)

    def removeElasticityPair(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_removeElasticityPair(self, *args)

    def initializeElasticityNeighborList(self, *args):
        return _CompuCell.ElasticityTrackerPlugin_initializeElasticityNeighborList(self, *args)
ElasticityTrackerPlugin_swigregister = _CompuCell.ElasticityTrackerPlugin_swigregister
ElasticityTrackerPlugin_swigregister(ElasticityTrackerPlugin)


def getElasticityTrackerPlugin(*args):
    return _CompuCell.getElasticityTrackerPlugin(*args)
getElasticityTrackerPlugin = _CompuCell.getElasticityTrackerPlugin
class PlasticityTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlasticityTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlasticityTrackerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PlasticityTrackerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.PlasticityTrackerData___lt__(self, *args)
    __swig_setmethods__["neighborAddress"] = _CompuCell.PlasticityTrackerData_neighborAddress_set
    __swig_getmethods__["neighborAddress"] = _CompuCell.PlasticityTrackerData_neighborAddress_get
    if _newclass:
        neighborAddress = _swig_property(_CompuCell.PlasticityTrackerData_neighborAddress_get, _CompuCell.PlasticityTrackerData_neighborAddress_set)
    __swig_setmethods__["lambdaLength"] = _CompuCell.PlasticityTrackerData_lambdaLength_set
    __swig_getmethods__["lambdaLength"] = _CompuCell.PlasticityTrackerData_lambdaLength_get
    if _newclass:
        lambdaLength = _swig_property(_CompuCell.PlasticityTrackerData_lambdaLength_get, _CompuCell.PlasticityTrackerData_lambdaLength_set)
    __swig_setmethods__["targetLength"] = _CompuCell.PlasticityTrackerData_targetLength_set
    __swig_getmethods__["targetLength"] = _CompuCell.PlasticityTrackerData_targetLength_get
    if _newclass:
        targetLength = _swig_property(_CompuCell.PlasticityTrackerData_targetLength_get, _CompuCell.PlasticityTrackerData_targetLength_set)
    __swig_destroy__ = _CompuCell.delete_PlasticityTrackerData
    __del__ = lambda self: None
PlasticityTrackerData_swigregister = _CompuCell.PlasticityTrackerData_swigregister
PlasticityTrackerData_swigregister(PlasticityTrackerData)

class PlasticityTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlasticityTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlasticityTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PlasticityTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PlasticityTracker
    __del__ = lambda self: None
    __swig_setmethods__["plasticityNeighbors"] = _CompuCell.PlasticityTracker_plasticityNeighbors_set
    __swig_getmethods__["plasticityNeighbors"] = _CompuCell.PlasticityTracker_plasticityNeighbors_get
    if _newclass:
        plasticityNeighbors = _swig_property(_CompuCell.PlasticityTracker_plasticityNeighbors_get, _CompuCell.PlasticityTracker_plasticityNeighbors_set)
PlasticityTracker_swigregister = _CompuCell.PlasticityTracker_swigregister
PlasticityTracker_swigregister(PlasticityTracker)

class plasticityTrackerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plasticityTrackerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plasticityTrackerAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.plasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_plasticityTrackerAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_plasticityTrackerAccessor
    __del__ = lambda self: None
plasticityTrackerAccessor_swigregister = _CompuCell.plasticityTrackerAccessor_swigregister
plasticityTrackerAccessor_swigregister(plasticityTrackerAccessor)

class plasticitySetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plasticitySetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plasticitySetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.plasticitySetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.plasticitySetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.plasticitySetPyItr_current_get, _CompuCell.plasticitySetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.plasticitySetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.plasticitySetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.plasticitySetPyItr_begin_get, _CompuCell.plasticitySetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.plasticitySetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.plasticitySetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.plasticitySetPyItr_end_get, _CompuCell.plasticitySetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_plasticitySetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.plasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.plasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.plasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.plasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.plasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.plasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.plasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.plasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.plasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_plasticitySetPyItr
    __del__ = lambda self: None
plasticitySetPyItr_swigregister = _CompuCell.plasticitySetPyItr_swigregister
plasticitySetPyItr_swigregister(plasticitySetPyItr)

class plasticityTrackerDataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plasticityTrackerDataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plasticityTrackerDataSet, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.plasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.plasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.plasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.plasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.plasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_plasticityTrackerDataSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.plasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.plasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.plasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.plasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.plasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.plasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.plasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.plasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.plasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.plasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.plasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.plasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.plasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.plasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.plasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_plasticityTrackerDataSet
    __del__ = lambda self: None
plasticityTrackerDataSet_swigregister = _CompuCell.plasticityTrackerDataSet_swigregister
plasticityTrackerDataSet_swigregister(plasticityTrackerDataSet)

class PlasticityTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlasticityTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlasticityTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_PlasticityTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_PlasticityTrackerPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_extraInit(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_field3DChange(self, *args)

    def getPlasticityTrackerAccessorPtr(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_getPlasticityTrackerAccessorPtr(self, *args)

    def getPlasticityTrackerData(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_getPlasticityTrackerData(self, *args)

    def initializePlasticityNeighborList(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_initializePlasticityNeighborList(self, *args)

    def addPlasticityNeighborList(self, *args):
        return _CompuCell.PlasticityTrackerPlugin_addPlasticityNeighborList(self, *args)
PlasticityTrackerPlugin_swigregister = _CompuCell.PlasticityTrackerPlugin_swigregister
PlasticityTrackerPlugin_swigregister(PlasticityTrackerPlugin)


def getPlasticityTrackerPlugin(*args):
    return _CompuCell.getPlasticityTrackerPlugin(*args)
getPlasticityTrackerPlugin = _CompuCell.getPlasticityTrackerPlugin
class FocalPointPlasticityTrackerData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityTrackerData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityTrackerData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityTrackerData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.FocalPointPlasticityTrackerData___lt__(self, *args)
    __swig_setmethods__["neighborAddress"] = _CompuCell.FocalPointPlasticityTrackerData_neighborAddress_set
    __swig_getmethods__["neighborAddress"] = _CompuCell.FocalPointPlasticityTrackerData_neighborAddress_get
    if _newclass:
        neighborAddress = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_neighborAddress_get, _CompuCell.FocalPointPlasticityTrackerData_neighborAddress_set)
    __swig_setmethods__["lambdaDistance"] = _CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_set
    __swig_getmethods__["lambdaDistance"] = _CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_get
    if _newclass:
        lambdaDistance = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_get, _CompuCell.FocalPointPlasticityTrackerData_lambdaDistance_set)
    __swig_setmethods__["targetDistance"] = _CompuCell.FocalPointPlasticityTrackerData_targetDistance_set
    __swig_getmethods__["targetDistance"] = _CompuCell.FocalPointPlasticityTrackerData_targetDistance_get
    if _newclass:
        targetDistance = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_targetDistance_get, _CompuCell.FocalPointPlasticityTrackerData_targetDistance_set)
    __swig_setmethods__["maxDistance"] = _CompuCell.FocalPointPlasticityTrackerData_maxDistance_set
    __swig_getmethods__["maxDistance"] = _CompuCell.FocalPointPlasticityTrackerData_maxDistance_get
    if _newclass:
        maxDistance = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_maxDistance_get, _CompuCell.FocalPointPlasticityTrackerData_maxDistance_set)
    __swig_setmethods__["maxNumberOfJunctions"] = _CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_set
    __swig_getmethods__["maxNumberOfJunctions"] = _CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_get
    if _newclass:
        maxNumberOfJunctions = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_get, _CompuCell.FocalPointPlasticityTrackerData_maxNumberOfJunctions_set)
    __swig_setmethods__["activationEnergy"] = _CompuCell.FocalPointPlasticityTrackerData_activationEnergy_set
    __swig_getmethods__["activationEnergy"] = _CompuCell.FocalPointPlasticityTrackerData_activationEnergy_get
    if _newclass:
        activationEnergy = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_activationEnergy_get, _CompuCell.FocalPointPlasticityTrackerData_activationEnergy_set)
    __swig_setmethods__["neighborOrder"] = _CompuCell.FocalPointPlasticityTrackerData_neighborOrder_set
    __swig_getmethods__["neighborOrder"] = _CompuCell.FocalPointPlasticityTrackerData_neighborOrder_get
    if _newclass:
        neighborOrder = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_neighborOrder_get, _CompuCell.FocalPointPlasticityTrackerData_neighborOrder_set)
    __swig_setmethods__["anchor"] = _CompuCell.FocalPointPlasticityTrackerData_anchor_set
    __swig_getmethods__["anchor"] = _CompuCell.FocalPointPlasticityTrackerData_anchor_get
    if _newclass:
        anchor = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_anchor_get, _CompuCell.FocalPointPlasticityTrackerData_anchor_set)
    __swig_setmethods__["anchorPoint"] = _CompuCell.FocalPointPlasticityTrackerData_anchorPoint_set
    __swig_getmethods__["anchorPoint"] = _CompuCell.FocalPointPlasticityTrackerData_anchorPoint_get
    if _newclass:
        anchorPoint = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_anchorPoint_get, _CompuCell.FocalPointPlasticityTrackerData_anchorPoint_set)
    __swig_setmethods__["isInitiator"] = _CompuCell.FocalPointPlasticityTrackerData_isInitiator_set
    __swig_getmethods__["isInitiator"] = _CompuCell.FocalPointPlasticityTrackerData_isInitiator_get
    if _newclass:
        isInitiator = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_isInitiator_get, _CompuCell.FocalPointPlasticityTrackerData_isInitiator_set)
    __swig_setmethods__["initMCS"] = _CompuCell.FocalPointPlasticityTrackerData_initMCS_set
    __swig_getmethods__["initMCS"] = _CompuCell.FocalPointPlasticityTrackerData_initMCS_get
    if _newclass:
        initMCS = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_initMCS_get, _CompuCell.FocalPointPlasticityTrackerData_initMCS_set)
    __swig_setmethods__["anchorId"] = _CompuCell.FocalPointPlasticityTrackerData_anchorId_set
    __swig_getmethods__["anchorId"] = _CompuCell.FocalPointPlasticityTrackerData_anchorId_get
    if _newclass:
        anchorId = _swig_property(_CompuCell.FocalPointPlasticityTrackerData_anchorId_get, _CompuCell.FocalPointPlasticityTrackerData_anchorId_set)
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityTrackerData
    __del__ = lambda self: None
FocalPointPlasticityTrackerData_swigregister = _CompuCell.FocalPointPlasticityTrackerData_swigregister
FocalPointPlasticityTrackerData_swigregister(FocalPointPlasticityTrackerData)

class FocalPointPlasticityTracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityTracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityTracker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityTracker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityTracker
    __del__ = lambda self: None
    __swig_setmethods__["focalPointPlasticityNeighbors"] = _CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_set
    __swig_getmethods__["focalPointPlasticityNeighbors"] = _CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_get
    if _newclass:
        focalPointPlasticityNeighbors = _swig_property(_CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_get, _CompuCell.FocalPointPlasticityTracker_focalPointPlasticityNeighbors_set)
    __swig_setmethods__["internalFocalPointPlasticityNeighbors"] = _CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_set
    __swig_getmethods__["internalFocalPointPlasticityNeighbors"] = _CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_get
    if _newclass:
        internalFocalPointPlasticityNeighbors = _swig_property(_CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_get, _CompuCell.FocalPointPlasticityTracker_internalFocalPointPlasticityNeighbors_set)
    __swig_setmethods__["anchors"] = _CompuCell.FocalPointPlasticityTracker_anchors_set
    __swig_getmethods__["anchors"] = _CompuCell.FocalPointPlasticityTracker_anchors_get
    if _newclass:
        anchors = _swig_property(_CompuCell.FocalPointPlasticityTracker_anchors_get, _CompuCell.FocalPointPlasticityTracker_anchors_set)
    __swig_setmethods__["fpptd"] = _CompuCell.FocalPointPlasticityTracker_fpptd_set
    __swig_getmethods__["fpptd"] = _CompuCell.FocalPointPlasticityTracker_fpptd_get
    if _newclass:
        fpptd = _swig_property(_CompuCell.FocalPointPlasticityTracker_fpptd_get, _CompuCell.FocalPointPlasticityTracker_fpptd_set)
FocalPointPlasticityTracker_swigregister = _CompuCell.FocalPointPlasticityTracker_swigregister
FocalPointPlasticityTracker_swigregister(FocalPointPlasticityTracker)

class FocalPointPlasticityJunctionCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityJunctionCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityJunctionCounter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityJunctionCounter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, *args):
        return _CompuCell.FocalPointPlasticityJunctionCounter___call__(self, *args)
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityJunctionCounter
    __del__ = lambda self: None
FocalPointPlasticityJunctionCounter_swigregister = _CompuCell.FocalPointPlasticityJunctionCounter_swigregister
FocalPointPlasticityJunctionCounter_swigregister(FocalPointPlasticityJunctionCounter)

class focalPointPlasticityTrackerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, focalPointPlasticityTrackerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, focalPointPlasticityTrackerAccessor, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.focalPointPlasticityTrackerAccessor_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_focalPointPlasticityTrackerAccessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerAccessor
    __del__ = lambda self: None
focalPointPlasticityTrackerAccessor_swigregister = _CompuCell.focalPointPlasticityTrackerAccessor_swigregister
focalPointPlasticityTrackerAccessor_swigregister(focalPointPlasticityTrackerAccessor)

class focalPointPlasticitySetPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, focalPointPlasticitySetPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, focalPointPlasticitySetPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.focalPointPlasticitySetPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.focalPointPlasticitySetPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.focalPointPlasticitySetPyItr_current_get, _CompuCell.focalPointPlasticitySetPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.focalPointPlasticitySetPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.focalPointPlasticitySetPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.focalPointPlasticitySetPyItr_begin_get, _CompuCell.focalPointPlasticitySetPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.focalPointPlasticitySetPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.focalPointPlasticitySetPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.focalPointPlasticitySetPyItr_end_get, _CompuCell.focalPointPlasticitySetPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_focalPointPlasticitySetPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_getEnd(self, *args)

    def previous(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_previous(self, *args)

    def next(self, *args):
        return _CompuCell.focalPointPlasticitySetPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticitySetPyItr
    __del__ = lambda self: None
focalPointPlasticitySetPyItr_swigregister = _CompuCell.focalPointPlasticitySetPyItr_swigregister
focalPointPlasticitySetPyItr_swigregister(focalPointPlasticitySetPyItr)

class focalPointPlasticityTrackerDataSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, focalPointPlasticityTrackerDataSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, focalPointPlasticityTrackerDataSet, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___len__(self, *args)

    def append(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_append(self, *args)

    def __contains__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___contains__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet___getitem__(self, *args)

    def add(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_add(self, *args)

    def discard(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_discard(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_focalPointPlasticityTrackerDataSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_empty(self, *args)

    def size(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_size(self, *args)

    def clear(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_clear(self, *args)

    def swap(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_swap(self, *args)

    def count(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_count(self, *args)

    def begin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_begin(self, *args)

    def end(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_rend(self, *args)

    def erase(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_erase(self, *args)

    def find(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_find(self, *args)

    def lower_bound(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_upper_bound(self, *args)

    def equal_range(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_equal_range(self, *args)

    def insert(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataSet_insert(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerDataSet
    __del__ = lambda self: None
focalPointPlasticityTrackerDataSet_swigregister = _CompuCell.focalPointPlasticityTrackerDataSet_swigregister
focalPointPlasticityTrackerDataSet_swigregister(focalPointPlasticityTrackerDataSet)

class focalPointPlasticityTrackerDataVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, focalPointPlasticityTrackerDataVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, focalPointPlasticityTrackerDataVector, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_pop(self, *args)

    def append(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_append(self, *args)

    def empty(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_empty(self, *args)

    def size(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_size(self, *args)

    def swap(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_swap(self, *args)

    def begin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_begin(self, *args)

    def end(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_rend(self, *args)

    def clear(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_focalPointPlasticityTrackerDataVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_push_back(self, *args)

    def front(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_front(self, *args)

    def back(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_back(self, *args)

    def assign(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_assign(self, *args)

    def resize(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_resize(self, *args)

    def insert(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell.focalPointPlasticityTrackerDataVector_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete_focalPointPlasticityTrackerDataVector
    __del__ = lambda self: None
focalPointPlasticityTrackerDataVector_swigregister = _CompuCell.focalPointPlasticityTrackerDataVector_swigregister
focalPointPlasticityTrackerDataVector_swigregister(focalPointPlasticityTrackerDataVector)

class FocalPointPlasticityLinkBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityLinkBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityLinkBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityLinkBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityLinkBase
    __del__ = lambda self: None

    def getType(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getType(self, *args)

    def getFPPTrackerData(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getFPPTrackerData(self, *args)

    def getDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getDistance(self, *args)

    def getTension(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getTension(self, *args)
    __swig_setmethods__["length"] = _CompuCell.FocalPointPlasticityLinkBase_length_set
    __swig_getmethods__["length"] = _CompuCell.FocalPointPlasticityLinkBase_length_get
    if _newclass:
        length = _swig_property(_CompuCell.FocalPointPlasticityLinkBase_length_get, _CompuCell.FocalPointPlasticityLinkBase_length_set)
    __swig_setmethods__["tension"] = _CompuCell.FocalPointPlasticityLinkBase_tension_set
    __swig_getmethods__["tension"] = _CompuCell.FocalPointPlasticityLinkBase_tension_get
    if _newclass:
        tension = _swig_property(_CompuCell.FocalPointPlasticityLinkBase_tension_get, _CompuCell.FocalPointPlasticityLinkBase_tension_set)

    def setConstitutiveLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setConstitutiveLaw(self, *args)

    def hasLocalLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_hasLocalLaw(self, *args)

    def getOtherCell(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getOtherCell(self, *args)

    def isInitiator(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_isInitiator(self, *args)

    def constitutiveLaw(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_constitutiveLaw(self, *args)

    def getLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getLambdaDistance(self, *args)

    def setLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setLambdaDistance(self, *args)

    def getTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getTargetDistance(self, *args)

    def setTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setTargetDistance(self, *args)

    def getMaxDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getMaxDistance(self, *args)

    def setMaxDistance(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setMaxDistance(self, *args)

    def getMaxNumberOfJunctions(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getMaxNumberOfJunctions(self, *args)

    def setMaxNumberOfJunctions(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setMaxNumberOfJunctions(self, *args)

    def getActivationEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getActivationEnergy(self, *args)

    def setActivationEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setActivationEnergy(self, *args)

    def getNeighborOrder(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getNeighborOrder(self, *args)

    def setNeighborOrder(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_setNeighborOrder(self, *args)

    def isAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_isAnchor(self, *args)

    def getInitMCS(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getInitMCS(self, *args)

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getId1(self, *args)

    def getObj0(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getObj0(self, *args)

    def getObj1(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getObj1(self, *args)
    __swig_setmethods__["pyAttrib"] = _CompuCell.FocalPointPlasticityLinkBase_pyAttrib_set
    __swig_getmethods__["pyAttrib"] = _CompuCell.FocalPointPlasticityLinkBase_pyAttrib_get
    if _newclass:
        pyAttrib = _swig_property(_CompuCell.FocalPointPlasticityLinkBase_pyAttrib_get, _CompuCell.FocalPointPlasticityLinkBase_pyAttrib_set)

    def getPyAttrib(self, *args):
        return _CompuCell.FocalPointPlasticityLinkBase_getPyAttrib(self, *args)

    def get_dict(self):
        return getLinkPyAttrib(self)

    def set_dict(self, _dict):
        raise AttributeError('ASSIGNMENT link.dict=%s is illegal. Dictionary "dict" can only be modified but not replaced'%(_dict))

    __swig_setmethods__["dict"] = set_dict
    __swig_getmethods__["dict"] = get_dict
    if _newclass: dict = property(get_dict, set_dict)

    __sbml__ = '__sbml__'

    def setsbml(self, sbml) :		
        raise AttributeError('ASSIGNMENT link.sbml = %s is illegal. '
                            '"sbml" attribute can only be modified but not replaced' % (sbml))

    def getsbml(self):
        link_dict = self.dict
        class LinkSBMLFetcher:
            def __getattr__(self, item):
                if FocalPointPlasticityLinkBase.__sbml__ not in link_dict.keys():
                    raise KeyError('Link has no SBML solvers')
                elif item not in link_dict[FocalPointPlasticityLinkBase.__sbml__].keys():
                    raise KeyError(f'Cound not find SBML model with name {item}.')
                return link_dict[FocalPointPlasticityLinkBase.__sbml__][item]
        return LinkSBMLFetcher()

    __swig_getmethods__["sbml"] = getsbml
    __swig_setmethods__["sbml"] = setsbml
    if _newclass : sbml = property(getsbml, setsbml)


    def derived_property_getlength(self):
    	return self.getDistance()

    __swig_getmethods__["length"] = derived_property_getlength

    def derived_property_setlength(self, _val):
    	raise AttributeError('Assignment of derived property length is illegal.')

    __swig_setmethods__["length"] = derived_property_setlength

    if _newclass : length = property(derived_property_getlength, derived_property_setlength)



    def derived_property_gettension(self):
    	return self.getTension()

    __swig_getmethods__["tension"] = derived_property_gettension

    def derived_property_settension(self, _val):
    	raise AttributeError('Assignment of derived property tension is illegal.')

    __swig_setmethods__["tension"] = derived_property_settension

    if _newclass : tension = property(derived_property_gettension, derived_property_settension)


FocalPointPlasticityLinkBase_swigregister = _CompuCell.FocalPointPlasticityLinkBase_swigregister
FocalPointPlasticityLinkBase_swigregister(FocalPointPlasticityLinkBase)

class FocalPointPlasticityLink(FocalPointPlasticityLinkBase):
    __swig_setmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityLink, name, value)
    __swig_getmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getId1(self, *args)

    def getCellPair(self, *args):
        return _CompuCell.FocalPointPlasticityLink_getCellPair(self, *args)
    __swig_setmethods__["cellPair"] = _CompuCell.FocalPointPlasticityLink_cellPair_set
    __swig_getmethods__["cellPair"] = _CompuCell.FocalPointPlasticityLink_cellPair_get
    if _newclass:
        cellPair = _swig_property(_CompuCell.FocalPointPlasticityLink_cellPair_get, _CompuCell.FocalPointPlasticityLink_cellPair_set)

    def derived_property_getcellPair(self):
    	return self.getCellPair()

    __swig_getmethods__["cellPair"] = derived_property_getcellPair

    def derived_property_setcellPair(self, _val):
    	raise AttributeError('Assignment of derived property cellPair is illegal.')

    __swig_setmethods__["cellPair"] = derived_property_setcellPair

    if _newclass : cellPair = property(derived_property_getcellPair, derived_property_setcellPair)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityLink
    __del__ = lambda self: None
FocalPointPlasticityLink_swigregister = _CompuCell.FocalPointPlasticityLink_swigregister
FocalPointPlasticityLink_swigregister(FocalPointPlasticityLink)

class FocalPointPlasticityInternalLink(FocalPointPlasticityLinkBase):
    __swig_setmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityInternalLink, name, value)
    __swig_getmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityInternalLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityInternalLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getId1(self, *args)

    def getCellPair(self, *args):
        return _CompuCell.FocalPointPlasticityInternalLink_getCellPair(self, *args)
    __swig_setmethods__["cellPair"] = _CompuCell.FocalPointPlasticityInternalLink_cellPair_set
    __swig_getmethods__["cellPair"] = _CompuCell.FocalPointPlasticityInternalLink_cellPair_get
    if _newclass:
        cellPair = _swig_property(_CompuCell.FocalPointPlasticityInternalLink_cellPair_get, _CompuCell.FocalPointPlasticityInternalLink_cellPair_set)

    def derived_property_getcellPair(self):
    	return self.getCellPair()

    __swig_getmethods__["cellPair"] = derived_property_getcellPair

    def derived_property_setcellPair(self, _val):
    	raise AttributeError('Assignment of derived property cellPair is illegal.')

    __swig_setmethods__["cellPair"] = derived_property_setcellPair

    if _newclass : cellPair = property(derived_property_getcellPair, derived_property_setcellPair)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityInternalLink
    __del__ = lambda self: None
FocalPointPlasticityInternalLink_swigregister = _CompuCell.FocalPointPlasticityInternalLink_swigregister
FocalPointPlasticityInternalLink_swigregister(FocalPointPlasticityInternalLink)

class FocalPointPlasticityAnchor(FocalPointPlasticityLinkBase):
    __swig_setmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityAnchor, name, value)
    __swig_getmethods__ = {}
    for _s in [FocalPointPlasticityLinkBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityAnchor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityAnchor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getId0(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getId0(self, *args)

    def getId1(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getId1(self, *args)

    def getAnchorPoint(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getAnchorPoint(self, *args)

    def setAnchorPoint(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_setAnchorPoint(self, *args)

    def getAnchorId(self, *args):
        return _CompuCell.FocalPointPlasticityAnchor_getAnchorId(self, *args)
    __swig_setmethods__["cell"] = _CompuCell.FocalPointPlasticityAnchor_cell_set
    __swig_getmethods__["cell"] = _CompuCell.FocalPointPlasticityAnchor_cell_get
    if _newclass:
        cell = _swig_property(_CompuCell.FocalPointPlasticityAnchor_cell_get, _CompuCell.FocalPointPlasticityAnchor_cell_set)

    def derived_property_getcell(self):
    	return self.getObj0()

    __swig_getmethods__["cell"] = derived_property_getcell

    def derived_property_setcell(self, _val):
    	raise AttributeError('Assignment of derived property cell is illegal.')

    __swig_setmethods__["cell"] = derived_property_setcell

    if _newclass : cell = property(derived_property_getcell, derived_property_setcell)


    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityAnchor
    __del__ = lambda self: None
FocalPointPlasticityAnchor_swigregister = _CompuCell.FocalPointPlasticityAnchor_swigregister
FocalPointPlasticityAnchor_swigregister(FocalPointPlasticityAnchor)

class _FPPLinkList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _FPPLinkList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _FPPLinkList, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPLinkList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPLinkList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPLinkList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPLinkList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPLinkList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPLinkList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPLinkList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPLinkList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPLinkList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPLinkList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPLinkList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPLinkList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPLinkList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPLinkList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPLinkList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPLinkList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPLinkList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPLinkList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPLinkList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPLinkList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPLinkList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPLinkList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPLinkList_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new__FPPLinkList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell._FPPLinkList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPLinkList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPLinkList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPLinkList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPLinkList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPLinkList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPLinkList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPLinkList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPLinkList
    __del__ = lambda self: None
_FPPLinkList_swigregister = _CompuCell._FPPLinkList_swigregister
_FPPLinkList_swigregister(_FPPLinkList)

class _FPPInternalLinkList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _FPPInternalLinkList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _FPPInternalLinkList, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPInternalLinkList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPInternalLinkList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPInternalLinkList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPInternalLinkList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPInternalLinkList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPInternalLinkList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPInternalLinkList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPInternalLinkList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPInternalLinkList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPInternalLinkList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPInternalLinkList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPInternalLinkList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPInternalLinkList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPInternalLinkList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPInternalLinkList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPInternalLinkList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPInternalLinkList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPInternalLinkList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPInternalLinkList_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new__FPPInternalLinkList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell._FPPInternalLinkList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPInternalLinkList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPInternalLinkList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPInternalLinkList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPInternalLinkList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPInternalLinkList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPInternalLinkList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPInternalLinkList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPInternalLinkList
    __del__ = lambda self: None
_FPPInternalLinkList_swigregister = _CompuCell._FPPInternalLinkList_swigregister
_FPPInternalLinkList_swigregister(_FPPInternalLinkList)

class _FPPAnchorList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _FPPAnchorList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _FPPAnchorList, name)
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _CompuCell._FPPAnchorList_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _CompuCell._FPPAnchorList___nonzero__(self, *args)

    def __bool__(self, *args):
        return _CompuCell._FPPAnchorList___bool__(self, *args)

    def __len__(self, *args):
        return _CompuCell._FPPAnchorList___len__(self, *args)

    def __getslice__(self, *args):
        return _CompuCell._FPPAnchorList___getslice__(self, *args)

    def __setslice__(self, *args):
        return _CompuCell._FPPAnchorList___setslice__(self, *args)

    def __delslice__(self, *args):
        return _CompuCell._FPPAnchorList___delslice__(self, *args)

    def __delitem__(self, *args):
        return _CompuCell._FPPAnchorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CompuCell._FPPAnchorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CompuCell._FPPAnchorList___setitem__(self, *args)

    def pop(self, *args):
        return _CompuCell._FPPAnchorList_pop(self, *args)

    def append(self, *args):
        return _CompuCell._FPPAnchorList_append(self, *args)

    def empty(self, *args):
        return _CompuCell._FPPAnchorList_empty(self, *args)

    def size(self, *args):
        return _CompuCell._FPPAnchorList_size(self, *args)

    def swap(self, *args):
        return _CompuCell._FPPAnchorList_swap(self, *args)

    def begin(self, *args):
        return _CompuCell._FPPAnchorList_begin(self, *args)

    def end(self, *args):
        return _CompuCell._FPPAnchorList_end(self, *args)

    def rbegin(self, *args):
        return _CompuCell._FPPAnchorList_rbegin(self, *args)

    def rend(self, *args):
        return _CompuCell._FPPAnchorList_rend(self, *args)

    def clear(self, *args):
        return _CompuCell._FPPAnchorList_clear(self, *args)

    def get_allocator(self, *args):
        return _CompuCell._FPPAnchorList_get_allocator(self, *args)

    def pop_back(self, *args):
        return _CompuCell._FPPAnchorList_pop_back(self, *args)

    def erase(self, *args):
        return _CompuCell._FPPAnchorList_erase(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new__FPPAnchorList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, *args):
        return _CompuCell._FPPAnchorList_push_back(self, *args)

    def front(self, *args):
        return _CompuCell._FPPAnchorList_front(self, *args)

    def back(self, *args):
        return _CompuCell._FPPAnchorList_back(self, *args)

    def assign(self, *args):
        return _CompuCell._FPPAnchorList_assign(self, *args)

    def resize(self, *args):
        return _CompuCell._FPPAnchorList_resize(self, *args)

    def insert(self, *args):
        return _CompuCell._FPPAnchorList_insert(self, *args)

    def reserve(self, *args):
        return _CompuCell._FPPAnchorList_reserve(self, *args)

    def capacity(self, *args):
        return _CompuCell._FPPAnchorList_capacity(self, *args)
    __swig_destroy__ = _CompuCell.delete__FPPAnchorList
    __del__ = lambda self: None
_FPPAnchorList_swigregister = _CompuCell._FPPAnchorList_swigregister
_FPPAnchorList_swigregister(_FPPAnchorList)

class FPPLinkID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPLinkID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FPPLinkID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id0"] = _CompuCell.FPPLinkID_id0_set
    __swig_getmethods__["id0"] = _CompuCell.FPPLinkID_id0_get
    if _newclass:
        id0 = _swig_property(_CompuCell.FPPLinkID_id0_get, _CompuCell.FPPLinkID_id0_set)
    __swig_setmethods__["id1"] = _CompuCell.FPPLinkID_id1_set
    __swig_getmethods__["id1"] = _CompuCell.FPPLinkID_id1_get
    if _newclass:
        id1 = _swig_property(_CompuCell.FPPLinkID_id1_get, _CompuCell.FPPLinkID_id1_set)

    def __init__(self, *args):
        this = _CompuCell.new_FPPLinkID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FPPLinkID
    __del__ = lambda self: None

    def __lt__(self, *args):
        return _CompuCell.FPPLinkID___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.FPPLinkID___eq__(self, *args)

    def __ne__(self, *args):
        return _CompuCell.FPPLinkID___ne__(self, *args)
FPPLinkID_swigregister = _CompuCell.FPPLinkID_swigregister
FPPLinkID_swigregister(FPPLinkID)

class LinkInventoryHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkInventoryHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkInventoryHasher, name)
    __repr__ = _swig_repr

    def __call__(self, *args):
        return _CompuCell.LinkInventoryHasher___call__(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_LinkInventoryHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_LinkInventoryHasher
    __del__ = lambda self: None
LinkInventoryHasher_swigregister = _CompuCell.LinkInventoryHasher_swigregister
LinkInventoryHasher_swigregister(LinkInventoryHasher)

class FPPLinkList(_FPPLinkList):
    __swig_setmethods__ = {}
    for _s in [_FPPLinkList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPLinkList, name, value)
    __swig_getmethods__ = {}
    for _s in [_FPPLinkList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPLinkList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPLinkList
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CompuCell.new_FPPLinkList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FPPLinkList_swigregister = _CompuCell.FPPLinkList_swigregister
FPPLinkList_swigregister(FPPLinkList)

class FPPInternalLinkList(_FPPInternalLinkList):
    __swig_setmethods__ = {}
    for _s in [_FPPInternalLinkList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPInternalLinkList, name, value)
    __swig_getmethods__ = {}
    for _s in [_FPPInternalLinkList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPInternalLinkList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPInternalLinkList
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CompuCell.new_FPPInternalLinkList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FPPInternalLinkList_swigregister = _CompuCell.FPPInternalLinkList_swigregister
FPPInternalLinkList_swigregister(FPPInternalLinkList)

class FPPAnchorList(_FPPAnchorList):
    __swig_setmethods__ = {}
    for _s in [_FPPAnchorList]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPAnchorList, name, value)
    __swig_getmethods__ = {}
    for _s in [_FPPAnchorList]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPAnchorList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CompuCell.delete_FPPAnchorList
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _CompuCell.new_FPPAnchorList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
FPPAnchorList_swigregister = _CompuCell.FPPAnchorList_swigregister
FPPAnchorList_swigregister(FPPAnchorList)

class mapFPPLinkIDFPPLinkPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapFPPLinkIDFPPLinkPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapFPPLinkIDFPPLinkPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_current_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.mapFPPLinkIDFPPLinkPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.mapFPPLinkIDFPPLinkPyItr_end_get, _CompuCell.mapFPPLinkIDFPPLinkPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_mapFPPLinkIDFPPLinkPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPLinkPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPLinkPyItr
    __del__ = lambda self: None
mapFPPLinkIDFPPLinkPyItr_swigregister = _CompuCell.mapFPPLinkIDFPPLinkPyItr_swigregister
mapFPPLinkIDFPPLinkPyItr_swigregister(mapFPPLinkIDFPPLinkPyItr)

class mapFPPLinkIDFPPInternalLinkPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapFPPLinkIDFPPInternalLinkPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapFPPLinkIDFPPInternalLinkPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_get, _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_mapFPPLinkIDFPPInternalLinkPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPInternalLinkPyItr
    __del__ = lambda self: None
mapFPPLinkIDFPPInternalLinkPyItr_swigregister = _CompuCell.mapFPPLinkIDFPPInternalLinkPyItr_swigregister
mapFPPLinkIDFPPInternalLinkPyItr_swigregister(mapFPPLinkIDFPPInternalLinkPyItr)

class mapFPPLinkIDFPPAnchorPyItr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapFPPLinkIDFPPAnchorPyItr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapFPPLinkIDFPPAnchorPyItr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_set
    __swig_getmethods__["current"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_get
    if _newclass:
        current = _swig_property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_current_set)
    __swig_setmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_set
    __swig_getmethods__["begin"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_get
    if _newclass:
        begin = _swig_property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_begin_set)
    __swig_setmethods__["end"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_set
    __swig_getmethods__["end"] = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_get
    if _newclass:
        end = _swig_property(_CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_get, _CompuCell.mapFPPLinkIDFPPAnchorPyItr_end_set)

    def __init__(self, *args):
        this = _CompuCell.new_mapFPPLinkIDFPPAnchorPyItr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getCurrentRef(self, *args)

    def initialize(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_initialize(self, *args)

    def isEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_isEnd(self, *args)

    def isBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_isBegin(self, *args)

    def setToBegin(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_setToBegin(self, *args)

    def getCurrent(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getCurrent(self, *args)

    def getEnd(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_getEnd(self, *args)

    def next(self, *args):
        return _CompuCell.mapFPPLinkIDFPPAnchorPyItr_next(self, *args)
    __swig_destroy__ = _CompuCell.delete_mapFPPLinkIDFPPAnchorPyItr
    __del__ = lambda self: None
mapFPPLinkIDFPPAnchorPyItr_swigregister = _CompuCell.mapFPPLinkIDFPPAnchorPyItr_swigregister
mapFPPLinkIDFPPAnchorPyItr_swigregister(mapFPPLinkIDFPPAnchorPyItr)

class _fppInventoryBaseLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _fppInventoryBaseLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _fppInventoryBaseLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new__fppInventoryBaseLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseLink
    __del__ = lambda self: None

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseLink_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseLink_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseLink_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseLink_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseLink_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseLink_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseLink_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseLink_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseLink_getLinkList(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseLink_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseLink_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseLink_removeCellLinks(self, *args)
_fppInventoryBaseLink_swigregister = _CompuCell._fppInventoryBaseLink_swigregister
_fppInventoryBaseLink_swigregister(_fppInventoryBaseLink)

class _fppInventoryBaseInternalLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _fppInventoryBaseInternalLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _fppInventoryBaseInternalLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new__fppInventoryBaseInternalLink(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseInternalLink
    __del__ = lambda self: None

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getLinkList(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseInternalLink_removeCellLinks(self, *args)
_fppInventoryBaseInternalLink_swigregister = _CompuCell._fppInventoryBaseInternalLink_swigregister
_fppInventoryBaseInternalLink_swigregister(_fppInventoryBaseInternalLink)

class _fppInventoryBaseAnchor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _fppInventoryBaseAnchor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _fppInventoryBaseAnchor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new__fppInventoryBaseAnchor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete__fppInventoryBaseAnchor
    __del__ = lambda self: None

    def getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getFocalPointPlasticityCellLinkInventoryTrackerAccessorPtr(self, *args)

    def getFPPTrackerDataSet(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getFPPTrackerDataSet(self, *args)

    def getLinkInventorySize(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getLinkInventorySize(self, *args)

    def getContainer(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getContainer(self, *args)

    def linkInventoryBegin(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_linkInventoryBegin(self, *args)

    def linkInventoryEnd(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_linkInventoryEnd(self, *args)

    def addToInventory(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_addToInventory(self, *args)

    def removeFromInventory(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_removeFromInventory(self, *args)

    def getLinkList(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getLinkList(self, *args)

    def getCellLinkList(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getCellLinkList(self, *args)

    def getNumberOfJunctions(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_getNumberOfJunctions(self, *args)

    def removeCellLinks(self, *args):
        return _CompuCell._fppInventoryBaseAnchor_removeCellLinks(self, *args)
_fppInventoryBaseAnchor_swigregister = _CompuCell._fppInventoryBaseAnchor_swigregister
_fppInventoryBaseAnchor_swigregister(_fppInventoryBaseAnchor)

class FPPLinkInventory(_fppInventoryBaseLink):
    __swig_setmethods__ = {}
    for _s in [_fppInventoryBaseLink]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPLinkInventory, name, value)
    __swig_getmethods__ = {}
    for _s in [_fppInventoryBaseLink]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPLinkInventory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FPPLinkInventory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FPPLinkInventory
    __del__ = lambda self: None

    def getLinkByCells(self, *args):
        return _CompuCell.FPPLinkInventory_getLinkByCells(self, *args)

    def getLinkedCells(self, *args):
        return _CompuCell.FPPLinkInventory_getLinkedCells(self, *args)

    def getNumberOfJunctionsByType(self, *args):
        return _CompuCell.FPPLinkInventory_getNumberOfJunctionsByType(self, *args)
FPPLinkInventory_swigregister = _CompuCell.FPPLinkInventory_swigregister
FPPLinkInventory_swigregister(FPPLinkInventory)

class FPPInternalLinkInventory(_fppInventoryBaseInternalLink):
    __swig_setmethods__ = {}
    for _s in [_fppInventoryBaseInternalLink]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPInternalLinkInventory, name, value)
    __swig_getmethods__ = {}
    for _s in [_fppInventoryBaseInternalLink]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPInternalLinkInventory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FPPInternalLinkInventory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FPPInternalLinkInventory
    __del__ = lambda self: None

    def getLinkByCells(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getLinkByCells(self, *args)

    def getLinkedCells(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getLinkedCells(self, *args)

    def getNumberOfJunctionsByType(self, *args):
        return _CompuCell.FPPInternalLinkInventory_getNumberOfJunctionsByType(self, *args)
FPPInternalLinkInventory_swigregister = _CompuCell.FPPInternalLinkInventory_swigregister
FPPInternalLinkInventory_swigregister(FPPInternalLinkInventory)

class FPPAnchorInventory(_fppInventoryBaseAnchor):
    __swig_setmethods__ = {}
    for _s in [_fppInventoryBaseAnchor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FPPAnchorInventory, name, value)
    __swig_getmethods__ = {}
    for _s in [_fppInventoryBaseAnchor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FPPAnchorInventory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FPPAnchorInventory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FPPAnchorInventory
    __del__ = lambda self: None

    def getAnchor(self, *args):
        return _CompuCell.FPPAnchorInventory_getAnchor(self, *args)

    def getNextAnchorId(self, *args):
        return _CompuCell.FPPAnchorInventory_getNextAnchorId(self, *args)
FPPAnchorInventory_swigregister = _CompuCell.FPPAnchorInventory_swigregister
FPPAnchorInventory_swigregister(FPPAnchorInventory)


def getLinkPyAttrib(*args):
    return _CompuCell.getLinkPyAttrib(*args)
getLinkPyAttrib = _CompuCell.getLinkPyAttrib
class FocalPointPlasticityPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FocalPointPlasticityPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FocalPointPlasticityPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FocalPointPlasticityPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FocalPointPlasticityPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_handleEvent(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_changeEnergy(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_field3DChange(self, *args)

    def setFocalPointPlasticityParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setFocalPointPlasticityParameters(self, *args)

    def setInternalFocalPointPlasticityParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setInternalFocalPointPlasticityParameters(self, *args)

    def getPlasticityParametersLambdaDistance(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getPlasticityParametersLambdaDistance(self, *args)

    def getPlasticityParametersTargetDistance(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getPlasticityParametersTargetDistance(self, *args)

    def deleteFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteFocalPointPlasticityLink(self, *args)

    def deleteInternalFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteInternalFocalPointPlasticityLink(self, *args)

    def createFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createFocalPointPlasticityLink(self, *args)

    def createInternalFocalPointPlasticityLink(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createInternalFocalPointPlasticityLink(self, *args)

    def getLinkInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getLinkInventory(self, *args)

    def getInternalLinkInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getInternalLinkInventory(self, *args)

    def getAnchorInventory(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getAnchorInventory(self, *args)

    def insertFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertFPPData(self, *args)

    def insertInternalFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertInternalFPPData(self, *args)

    def insertAnchorFPPData(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_insertAnchorFPPData(self, *args)

    def getFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getFPPDataVec(self, *args)

    def getInternalFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getInternalFPPDataVec(self, *args)

    def getAnchorFPPDataVec(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_getAnchorFPPDataVec(self, *args)

    def createAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_createAnchor(self, *args)

    def deleteAnchor(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_deleteAnchor(self, *args)

    def setAnchorParameters(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_setAnchorParameters(self, *args)

    def update(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.FocalPointPlasticityPlugin_toString(self, *args)
FocalPointPlasticityPlugin_swigregister = _CompuCell.FocalPointPlasticityPlugin_swigregister
FocalPointPlasticityPlugin_swigregister(FocalPointPlasticityPlugin)


def getFocalPointPlasticityPlugin(*args):
    return _CompuCell.getFocalPointPlasticityPlugin(*args)
getFocalPointPlasticityPlugin = _CompuCell.getFocalPointPlasticityPlugin

def minMaxComps(*args):
    return _CompuCell.minMaxComps(*args)
minMaxComps = _CompuCell.minMaxComps

def eccFromComps(*args):
    return _CompuCell.eccFromComps(*args)
eccFromComps = _CompuCell.eccFromComps

def cellOrientation_12(*args):
    return _CompuCell.cellOrientation_12(*args)
cellOrientation_12 = _CompuCell.cellOrientation_12

def getSemiaxes12(*args):
    return _CompuCell.getSemiaxes12(*args)
getSemiaxes12 = _CompuCell.getSemiaxes12
class MomentOfInertiaPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentOfInertiaPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentOfInertiaPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_MomentOfInertiaPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_MomentOfInertiaPlugin
    __del__ = lambda self: None

    def getMomentOfInertia(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getMomentOfInertia(self, *args)

    def init(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_init(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_field3DChange(self, *args)

    def cellOrientation_xy(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_xy(self, *args)

    def cellOrientation_xz(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_xz(self, *args)

    def cellOrientation_yz(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_cellOrientation_yz(self, *args)
    __swig_setmethods__["cellOrientationFcnPtr"] = _CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_set
    __swig_getmethods__["cellOrientationFcnPtr"] = _CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_get
    if _newclass:
        cellOrientationFcnPtr = _swig_property(_CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_get, _CompuCell.MomentOfInertiaPlugin_cellOrientationFcnPtr_set)
    __swig_setmethods__["getSemiaxesFctPtr"] = _CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_set
    __swig_getmethods__["getSemiaxesFctPtr"] = _CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_get
    if _newclass:
        getSemiaxesFctPtr = _swig_property(_CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_get, _CompuCell.MomentOfInertiaPlugin_getSemiaxesFctPtr_set)

    def getSemiaxes(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxes(self, *args)

    def getSemiaxesXY(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesXY(self, *args)

    def getSemiaxesXZ(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesXZ(self, *args)

    def getSemiaxesYZ(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxesYZ(self, *args)

    def getSemiaxes3D(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_getSemiaxes3D(self, *args)

    def toString(self, *args):
        return _CompuCell.MomentOfInertiaPlugin_toString(self, *args)
MomentOfInertiaPlugin_swigregister = _CompuCell.MomentOfInertiaPlugin_swigregister
MomentOfInertiaPlugin_swigregister(MomentOfInertiaPlugin)


def getMomentOfInertiaPlugin(*args):
    return _CompuCell.getMomentOfInertiaPlugin(*args)
getMomentOfInertiaPlugin = _CompuCell.getMomentOfInertiaPlugin
class FieldSecretorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSecretorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSecretorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FieldSecretorResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["success_flag"] = _CompuCell.FieldSecretorResult_success_flag_set
    __swig_getmethods__["success_flag"] = _CompuCell.FieldSecretorResult_success_flag_get
    if _newclass:
        success_flag = _swig_property(_CompuCell.FieldSecretorResult_success_flag_get, _CompuCell.FieldSecretorResult_success_flag_set)
    __swig_setmethods__["tot_amount"] = _CompuCell.FieldSecretorResult_tot_amount_set
    __swig_getmethods__["tot_amount"] = _CompuCell.FieldSecretorResult_tot_amount_get
    if _newclass:
        tot_amount = _swig_property(_CompuCell.FieldSecretorResult_tot_amount_get, _CompuCell.FieldSecretorResult_tot_amount_set)
    __swig_destroy__ = _CompuCell.delete_FieldSecretorResult
    __del__ = lambda self: None
FieldSecretorResult_swigregister = _CompuCell.FieldSecretorResult_swigregister
FieldSecretorResult_swigregister(FieldSecretorResult)

class FieldSecretorPixelData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSecretorPixelData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSecretorPixelData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FieldSecretorPixelData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, *args):
        return _CompuCell.FieldSecretorPixelData___lt__(self, *args)

    def __eq__(self, *args):
        return _CompuCell.FieldSecretorPixelData___eq__(self, *args)
    __swig_setmethods__["pixel"] = _CompuCell.FieldSecretorPixelData_pixel_set
    __swig_getmethods__["pixel"] = _CompuCell.FieldSecretorPixelData_pixel_get
    if _newclass:
        pixel = _swig_property(_CompuCell.FieldSecretorPixelData_pixel_get, _CompuCell.FieldSecretorPixelData_pixel_set)
    __swig_destroy__ = _CompuCell.delete_FieldSecretorPixelData
    __del__ = lambda self: None
FieldSecretorPixelData_swigregister = _CompuCell.FieldSecretorPixelData_swigregister
FieldSecretorPixelData_swigregister(FieldSecretorPixelData)

class FieldSecretor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldSecretor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldSecretor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_FieldSecretor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_FieldSecretor
    __del__ = lambda self: None
    __swig_setmethods__["concentrationFieldPtr"] = _CompuCell.FieldSecretor_concentrationFieldPtr_set
    __swig_getmethods__["concentrationFieldPtr"] = _CompuCell.FieldSecretor_concentrationFieldPtr_get
    if _newclass:
        concentrationFieldPtr = _swig_property(_CompuCell.FieldSecretor_concentrationFieldPtr_get, _CompuCell.FieldSecretor_concentrationFieldPtr_set)
    __swig_setmethods__["boundaryPixelTrackerPlugin"] = _CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_set
    __swig_getmethods__["boundaryPixelTrackerPlugin"] = _CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_get
    if _newclass:
        boundaryPixelTrackerPlugin = _swig_property(_CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_get, _CompuCell.FieldSecretor_boundaryPixelTrackerPlugin_set)
    __swig_setmethods__["pixelTrackerPlugin"] = _CompuCell.FieldSecretor_pixelTrackerPlugin_set
    __swig_getmethods__["pixelTrackerPlugin"] = _CompuCell.FieldSecretor_pixelTrackerPlugin_get
    if _newclass:
        pixelTrackerPlugin = _swig_property(_CompuCell.FieldSecretor_pixelTrackerPlugin_get, _CompuCell.FieldSecretor_pixelTrackerPlugin_set)
    __swig_setmethods__["boundaryStrategy"] = _CompuCell.FieldSecretor_boundaryStrategy_set
    __swig_getmethods__["boundaryStrategy"] = _CompuCell.FieldSecretor_boundaryStrategy_get
    if _newclass:
        boundaryStrategy = _swig_property(_CompuCell.FieldSecretor_boundaryStrategy_get, _CompuCell.FieldSecretor_boundaryStrategy_set)
    __swig_setmethods__["maxNeighborIndex"] = _CompuCell.FieldSecretor_maxNeighborIndex_set
    __swig_getmethods__["maxNeighborIndex"] = _CompuCell.FieldSecretor_maxNeighborIndex_get
    if _newclass:
        maxNeighborIndex = _swig_property(_CompuCell.FieldSecretor_maxNeighborIndex_get, _CompuCell.FieldSecretor_maxNeighborIndex_set)
    __swig_setmethods__["cellFieldG"] = _CompuCell.FieldSecretor_cellFieldG_set
    __swig_getmethods__["cellFieldG"] = _CompuCell.FieldSecretor_cellFieldG_get
    if _newclass:
        cellFieldG = _swig_property(_CompuCell.FieldSecretor_cellFieldG_get, _CompuCell.FieldSecretor_cellFieldG_set)

    def _secreteInsideCellConstantConcentration(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellConstantConcentration(self, *args)

    def _secreteInsideCellConstantConcentrationTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellConstantConcentrationTotalCount(self, *args)

    def _secreteInsideCell(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCell(self, *args)

    def _secreteInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellTotalCount(self, *args)

    def _secreteInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundary(self, *args)

    def _secreteInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryTotalCount(self, *args)

    def _secreteInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryOnContactWith(self, *args)

    def _secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def _secreteOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundary(self, *args)

    def _secreteOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryTotalCount(self, *args)

    def _secreteOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryOnContactWith(self, *args)

    def _secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def secreteInsideCellAtCOM(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtCOM(self, *args)

    def secreteInsideCellAtCOMTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtCOMTotalCount(self, *args)

    def _uptakeInsideCell(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCell(self, *args)

    def _uptakeInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellTotalCount(self, *args)

    def _uptakeInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundary(self, *args)

    def _uptakeInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryTotalCount(self, *args)

    def _uptakeInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryOnContactWith(self, *args)

    def _uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def _uptakeOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundary(self, *args)

    def _uptakeOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryTotalCount(self, *args)

    def _uptakeOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryOnContactWith(self, *args)

    def _uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor__uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeInsideCellAtCOM(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtCOM(self, *args)

    def uptakeInsideCellAtCOMTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtCOMTotalCount(self, *args)

    def _amountSeenByCell(self, *args):
        return _CompuCell.FieldSecretor__amountSeenByCell(self, *args)

    def totalFieldIntegral(self, *args):
        return _CompuCell.FieldSecretor_totalFieldIntegral(self, *args)

    def secreteInsideCellConstantConcentration(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellConstantConcentration(self, *args)

    def secreteInsideCellConstantConcentrationTotalAmount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellConstantConcentrationTotalAmount(self, *args)

    def secreteInsideCell(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCell(self, *args)

    def secreteInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellTotalCount(self, *args)

    def secreteInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundary(self, *args)

    def secreteInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryTotalCount(self, *args)

    def secreteInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryOnContactWith(self, *args)

    def secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def secreteOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundary(self, *args)

    def secreteOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryTotalCount(self, *args)

    def secreteOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryOnContactWith(self, *args)

    def secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_secreteOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeInsideCell(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCell(self, *args)

    def uptakeInsideCellTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellTotalCount(self, *args)

    def uptakeInsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundary(self, *args)

    def uptakeInsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryTotalCount(self, *args)

    def uptakeInsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryOnContactWith(self, *args)

    def uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeInsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def uptakeOutsideCellAtBoundary(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundary(self, *args)

    def uptakeOutsideCellAtBoundaryTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryTotalCount(self, *args)

    def uptakeOutsideCellAtBoundaryOnContactWith(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryOnContactWith(self, *args)

    def uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args):
        return _CompuCell.FieldSecretor_uptakeOutsideCellAtBoundaryOnContactWithTotalCount(self, *args)

    def amountSeenByCell(self, *args):
        return _CompuCell.FieldSecretor_amountSeenByCell(self, *args)
FieldSecretor_swigregister = _CompuCell.FieldSecretor_swigregister
FieldSecretor_swigregister(FieldSecretor)

class SecretionPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecretionPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SecretionPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_SecretionPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_SecretionPlugin
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.SecretionPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.SecretionPlugin_extraInit(self, *args)

    def getConcentrationFieldByName(self, *args):
        return _CompuCell.SecretionPlugin_getConcentrationFieldByName(self, *args)

    def secreteSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteSingleField(self, *args)

    def secreteOnContactSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteOnContactSingleField(self, *args)

    def secreteConstantConcentrationSingleField(self, *args):
        return _CompuCell.SecretionPlugin_secreteConstantConcentrationSingleField(self, *args)

    def getFieldSecretor(self, *args):
        return _CompuCell.SecretionPlugin_getFieldSecretor(self, *args)

    def step(self, *args):
        return _CompuCell.SecretionPlugin_step(self, *args)

    def update(self, *args):
        return _CompuCell.SecretionPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.SecretionPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.SecretionPlugin_toString(self, *args)
SecretionPlugin_swigregister = _CompuCell.SecretionPlugin_swigregister
SecretionPlugin_swigregister(SecretionPlugin)


def getSecretionPlugin(*args):
    return _CompuCell.getSecretionPlugin(*args)
getSecretionPlugin = _CompuCell.getSecretionPlugin
class SteppableOrientationVectorsMitosis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteppableOrientationVectorsMitosis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SteppableOrientationVectorsMitosis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_SteppableOrientationVectorsMitosis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["semiminorVec"] = _CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_set
    __swig_getmethods__["semiminorVec"] = _CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_get
    if _newclass:
        semiminorVec = _swig_property(_CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_get, _CompuCell.SteppableOrientationVectorsMitosis_semiminorVec_set)
    __swig_setmethods__["semimajorVec"] = _CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_set
    __swig_getmethods__["semimajorVec"] = _CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_get
    if _newclass:
        semimajorVec = _swig_property(_CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_get, _CompuCell.SteppableOrientationVectorsMitosis_semimajorVec_set)
    __swig_destroy__ = _CompuCell.delete_SteppableOrientationVectorsMitosis
    __del__ = lambda self: None
SteppableOrientationVectorsMitosis_swigregister = _CompuCell.SteppableOrientationVectorsMitosis_swigregister
SteppableOrientationVectorsMitosis_swigregister(SteppableOrientationVectorsMitosis)

class CompartmentMitosisData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompartmentMitosisData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompartmentMitosisData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CompartmentMitosisData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["com"] = _CompuCell.CompartmentMitosisData_com_set
    __swig_getmethods__["com"] = _CompuCell.CompartmentMitosisData_com_get
    if _newclass:
        com = _swig_property(_CompuCell.CompartmentMitosisData_com_get, _CompuCell.CompartmentMitosisData_com_set)
    __swig_setmethods__["cell"] = _CompuCell.CompartmentMitosisData_cell_set
    __swig_getmethods__["cell"] = _CompuCell.CompartmentMitosisData_cell_get
    if _newclass:
        cell = _swig_property(_CompuCell.CompartmentMitosisData_cell_get, _CompuCell.CompartmentMitosisData_cell_set)
    __swig_setmethods__["type"] = _CompuCell.CompartmentMitosisData_type_set
    __swig_getmethods__["type"] = _CompuCell.CompartmentMitosisData_type_get
    if _newclass:
        type = _swig_property(_CompuCell.CompartmentMitosisData_type_get, _CompuCell.CompartmentMitosisData_type_set)
    __swig_setmethods__["pt"] = _CompuCell.CompartmentMitosisData_pt_set
    __swig_getmethods__["pt"] = _CompuCell.CompartmentMitosisData_pt_get
    if _newclass:
        pt = _swig_property(_CompuCell.CompartmentMitosisData_pt_get, _CompuCell.CompartmentMitosisData_pt_set)
    __swig_destroy__ = _CompuCell.delete_CompartmentMitosisData
    __del__ = lambda self: None
CompartmentMitosisData_swigregister = _CompuCell.CompartmentMitosisData_swigregister
CompartmentMitosisData_swigregister(CompartmentMitosisData)

class MitosisSteppable(Steppable):
    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MitosisSteppable, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MitosisSteppable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doDirectionalMitosis2DPtr"] = _CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_set
    __swig_getmethods__["doDirectionalMitosis2DPtr"] = _CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_get
    if _newclass:
        doDirectionalMitosis2DPtr = _swig_property(_CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_get, _CompuCell.MitosisSteppable_doDirectionalMitosis2DPtr_set)
    __swig_setmethods__["childCell"] = _CompuCell.MitosisSteppable_childCell_set
    __swig_getmethods__["childCell"] = _CompuCell.MitosisSteppable_childCell_get
    if _newclass:
        childCell = _swig_property(_CompuCell.MitosisSteppable_childCell_get, _CompuCell.MitosisSteppable_childCell_set)
    __swig_setmethods__["parentCell"] = _CompuCell.MitosisSteppable_parentCell_set
    __swig_getmethods__["parentCell"] = _CompuCell.MitosisSteppable_parentCell_get
    if _newclass:
        parentCell = _swig_property(_CompuCell.MitosisSteppable_parentCell_get, _CompuCell.MitosisSteppable_parentCell_set)
    __swig_setmethods__["boundaryStrategy"] = _CompuCell.MitosisSteppable_boundaryStrategy_set
    __swig_getmethods__["boundaryStrategy"] = _CompuCell.MitosisSteppable_boundaryStrategy_get
    if _newclass:
        boundaryStrategy = _swig_property(_CompuCell.MitosisSteppable_boundaryStrategy_get, _CompuCell.MitosisSteppable_boundaryStrategy_set)
    __swig_setmethods__["maxNeighborIndex"] = _CompuCell.MitosisSteppable_maxNeighborIndex_set
    __swig_getmethods__["maxNeighborIndex"] = _CompuCell.MitosisSteppable_maxNeighborIndex_get
    if _newclass:
        maxNeighborIndex = _swig_property(_CompuCell.MitosisSteppable_maxNeighborIndex_get, _CompuCell.MitosisSteppable_maxNeighborIndex_set)
    __swig_setmethods__["potts"] = _CompuCell.MitosisSteppable_potts_set
    __swig_getmethods__["potts"] = _CompuCell.MitosisSteppable_potts_get
    if _newclass:
        potts = _swig_property(_CompuCell.MitosisSteppable_potts_get, _CompuCell.MitosisSteppable_potts_set)
    __swig_setmethods__["divideAlongMinorAxisFlag"] = _CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_set
    __swig_getmethods__["divideAlongMinorAxisFlag"] = _CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_get
    if _newclass:
        divideAlongMinorAxisFlag = _swig_property(_CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_get, _CompuCell.MitosisSteppable_divideAlongMinorAxisFlag_set)
    __swig_setmethods__["divideAlongMajorAxisFlag"] = _CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_set
    __swig_getmethods__["divideAlongMajorAxisFlag"] = _CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_get
    if _newclass:
        divideAlongMajorAxisFlag = _swig_property(_CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_get, _CompuCell.MitosisSteppable_divideAlongMajorAxisFlag_set)
    __swig_setmethods__["flag3D"] = _CompuCell.MitosisSteppable_flag3D_set
    __swig_getmethods__["flag3D"] = _CompuCell.MitosisSteppable_flag3D_get
    if _newclass:
        flag3D = _swig_property(_CompuCell.MitosisSteppable_flag3D_get, _CompuCell.MitosisSteppable_flag3D_set)

    def setParentChildPositionFlag(self, *args):
        return _CompuCell.MitosisSteppable_setParentChildPositionFlag(self, *args)

    def getParentChildPositionFlag(self, *args):
        return _CompuCell.MitosisSteppable_getParentChildPositionFlag(self, *args)
    __swig_setmethods__["pixelTrackerAccessorPtr"] = _CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_set
    __swig_getmethods__["pixelTrackerAccessorPtr"] = _CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_get
    if _newclass:
        pixelTrackerAccessorPtr = _swig_property(_CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_get, _CompuCell.MitosisSteppable_pixelTrackerAccessorPtr_set)
    __swig_setmethods__["pixelTrackerPlugin"] = _CompuCell.MitosisSteppable_pixelTrackerPlugin_set
    __swig_getmethods__["pixelTrackerPlugin"] = _CompuCell.MitosisSteppable_pixelTrackerPlugin_get
    if _newclass:
        pixelTrackerPlugin = _swig_property(_CompuCell.MitosisSteppable_pixelTrackerPlugin_get, _CompuCell.MitosisSteppable_pixelTrackerPlugin_set)
    __swig_setmethods__["parentBeforeMitosis"] = _CompuCell.MitosisSteppable_parentBeforeMitosis_set
    __swig_getmethods__["parentBeforeMitosis"] = _CompuCell.MitosisSteppable_parentBeforeMitosis_get
    if _newclass:
        parentBeforeMitosis = _swig_property(_CompuCell.MitosisSteppable_parentBeforeMitosis_get, _CompuCell.MitosisSteppable_parentBeforeMitosis_set)
    __swig_setmethods__["comOffsetsMitosis"] = _CompuCell.MitosisSteppable_comOffsetsMitosis_set
    __swig_getmethods__["comOffsetsMitosis"] = _CompuCell.MitosisSteppable_comOffsetsMitosis_get
    if _newclass:
        comOffsetsMitosis = _swig_property(_CompuCell.MitosisSteppable_comOffsetsMitosis_get, _CompuCell.MitosisSteppable_comOffsetsMitosis_set)
    __swig_setmethods__["parentAfterMitosis"] = _CompuCell.MitosisSteppable_parentAfterMitosis_set
    __swig_getmethods__["parentAfterMitosis"] = _CompuCell.MitosisSteppable_parentAfterMitosis_get
    if _newclass:
        parentAfterMitosis = _swig_property(_CompuCell.MitosisSteppable_parentAfterMitosis_get, _CompuCell.MitosisSteppable_parentAfterMitosis_set)
    __swig_setmethods__["childAfterMitosis"] = _CompuCell.MitosisSteppable_childAfterMitosis_set
    __swig_getmethods__["childAfterMitosis"] = _CompuCell.MitosisSteppable_childAfterMitosis_get
    if _newclass:
        childAfterMitosis = _swig_property(_CompuCell.MitosisSteppable_childAfterMitosis_get, _CompuCell.MitosisSteppable_childAfterMitosis_set)
    __swig_setmethods__["boundaryConditionIndicator"] = _CompuCell.MitosisSteppable_boundaryConditionIndicator_set
    __swig_getmethods__["boundaryConditionIndicator"] = _CompuCell.MitosisSteppable_boundaryConditionIndicator_get
    if _newclass:
        boundaryConditionIndicator = _swig_property(_CompuCell.MitosisSteppable_boundaryConditionIndicator_get, _CompuCell.MitosisSteppable_boundaryConditionIndicator_set)
    __swig_setmethods__["fieldDim"] = _CompuCell.MitosisSteppable_fieldDim_set
    __swig_getmethods__["fieldDim"] = _CompuCell.MitosisSteppable_fieldDim_get
    if _newclass:
        fieldDim = _swig_property(_CompuCell.MitosisSteppable_fieldDim_get, _CompuCell.MitosisSteppable_fieldDim_set)

    def __init__(self, *args):
        this = _CompuCell.new_MitosisSteppable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_MitosisSteppable
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.MitosisSteppable_init(self, *args)

    def start(self, *args):
        return _CompuCell.MitosisSteppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.MitosisSteppable_step(self, *args)

    def finish(self, *args):
        return _CompuCell.MitosisSteppable_finish(self, *args)
    __swig_setmethods__["getOrientationVectorsMitosis2DPtr"] = _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_set
    __swig_getmethods__["getOrientationVectorsMitosis2DPtr"] = _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_get
    if _newclass:
        getOrientationVectorsMitosis2DPtr = _swig_property(_CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_get, _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2DPtr_set)

    def getOrientationVectorsMitosisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosisCompartments(self, *args)

    def getOrientationVectorsMitosis(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis(self, *args)

    def getOrientationVectorsMitosis2D_xy(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_xy(self, *args)

    def getOrientationVectorsMitosis2D_xz(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_xz(self, *args)

    def getOrientationVectorsMitosis2D_yz(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis2D_yz(self, *args)

    def getOrientationVectorsMitosis3D(self, *args):
        return _CompuCell.MitosisSteppable_getOrientationVectorsMitosis3D(self, *args)

    def doDirectionalMitosisOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisOrientationVectorBased(self, *args)

    def doDirectionalMitosisAlongMajorAxis(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMajorAxis(self, *args)

    def doDirectionalMitosisAlongMinorAxis(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMinorAxis(self, *args)

    def doDirectionalMitosisRandomOrientation(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisRandomOrientation(self, *args)

    def doDirectionalMitosisOrientationVectorBasedCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisOrientationVectorBasedCompartments(self, *args)

    def doDirectionalMitosisRandomOrientationCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisRandomOrientationCompartments(self, *args)

    def doDirectionalMitosisAlongMajorAxisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMajorAxisCompartments(self, *args)

    def doDirectionalMitosisAlongMinorAxisCompartments(self, *args):
        return _CompuCell.MitosisSteppable_doDirectionalMitosisAlongMinorAxisCompartments(self, *args)

    def getShiftVector(self, *args):
        return _CompuCell.MitosisSteppable_getShiftVector(self, *args)

    def calculateCOMPixels(self, *args):
        return _CompuCell.MitosisSteppable_calculateCOMPixels(self, *args)

    def createChildCell(self, *args):
        return _CompuCell.MitosisSteppable_createChildCell(self, *args)

    def shiftCellPixels(self, *args):
        return _CompuCell.MitosisSteppable_shiftCellPixels(self, *args)

    def divideClusterPixelsOrientationVectorBased(self, *args):
        return _CompuCell.MitosisSteppable_divideClusterPixelsOrientationVectorBased(self, *args)

    def calculateClusterPixelsCOM(self, *args):
        return _CompuCell.MitosisSteppable_calculateClusterPixelsCOM(self, *args)

    def initializeClusters(self, *args):
        return _CompuCell.MitosisSteppable_initializeClusters(self, *args)
MitosisSteppable_swigregister = _CompuCell.MitosisSteppable_swigregister
MitosisSteppable_swigregister(MitosisSteppable)

class BiasPersistParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiasPersistParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiasPersistParam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BiasPersistParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["persistentAlpha"] = _CompuCell.BiasPersistParam_persistentAlpha_set
    __swig_getmethods__["persistentAlpha"] = _CompuCell.BiasPersistParam_persistentAlpha_get
    if _newclass:
        persistentAlpha = _swig_property(_CompuCell.BiasPersistParam_persistentAlpha_get, _CompuCell.BiasPersistParam_persistentAlpha_set)
    __swig_setmethods__["typeName"] = _CompuCell.BiasPersistParam_typeName_set
    __swig_getmethods__["typeName"] = _CompuCell.BiasPersistParam_typeName_get
    if _newclass:
        typeName = _swig_property(_CompuCell.BiasPersistParam_typeName_get, _CompuCell.BiasPersistParam_typeName_set)
    __swig_destroy__ = _CompuCell.delete_BiasPersistParam
    __del__ = lambda self: None
BiasPersistParam_swigregister = _CompuCell.BiasPersistParam_swigregister
BiasPersistParam_swigregister(BiasPersistParam)

class BiasVectorSteppable(Steppable):
    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiasVectorSteppable, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiasVectorSteppable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BiasVectorSteppable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BiasVectorSteppable
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.BiasVectorSteppable_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BiasVectorSteppable_extraInit(self, *args)

    def start(self, *args):
        return _CompuCell.BiasVectorSteppable_start(self, *args)

    def step(self, *args):
        return _CompuCell.BiasVectorSteppable_step(self, *args)

    def step_white_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_3d(self, *args)

    def step_white_2d_x(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_x(self, *args)

    def step_white_2d_y(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_y(self, *args)

    def step_white_2d_z(self, *args):
        return _CompuCell.BiasVectorSteppable_step_white_2d_z(self, *args)

    def step_persistent_bias(self, *args):
        return _CompuCell.BiasVectorSteppable_step_persistent_bias(self, *args)

    def gen_persistent_bias(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias(self, *args)

    def output_test(self, *args):
        return _CompuCell.BiasVectorSteppable_output_test(self, *args)

    def gen_persistent_bias_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_3d(self, *args)

    def gen_persistent_bias_2d_x(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_x(self, *args)

    def gen_persistent_bias_2d_y(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_y(self, *args)

    def gen_persistent_bias_2d_z(self, *args):
        return _CompuCell.BiasVectorSteppable_gen_persistent_bias_2d_z(self, *args)

    def noise_vec_generator(self, *args):
        return _CompuCell.BiasVectorSteppable_noise_vec_generator(self, *args)

    def white_noise_2d(self, *args):
        return _CompuCell.BiasVectorSteppable_white_noise_2d(self, *args)

    def white_noise_3d(self, *args):
        return _CompuCell.BiasVectorSteppable_white_noise_3d(self, *args)

    def finish(self, *args):
        return _CompuCell.BiasVectorSteppable_finish(self, *args)

    def determine_bias_type(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_bias_type(self, *args)

    def determine_noise_generator(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_noise_generator(self, *args)

    def determine_field_type(self, *args):
        return _CompuCell.BiasVectorSteppable_determine_field_type(self, *args)

    def set_white_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_white_step_function(self, *args)

    def set_persitent_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_persitent_step_function(self, *args)

    def set_step_function(self, *args):
        return _CompuCell.BiasVectorSteppable_set_step_function(self, *args)

    def update(self, *args):
        return _CompuCell.BiasVectorSteppable_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BiasVectorSteppable_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BiasVectorSteppable_toString(self, *args)
BiasVectorSteppable_swigregister = _CompuCell.BiasVectorSteppable_swigregister
BiasVectorSteppable_swigregister(BiasVectorSteppable)


def getBiasVectorSteppable(*args):
    return _CompuCell.getBiasVectorSteppable(*args)
getBiasVectorSteppable = _CompuCell.getBiasVectorSteppable
class ImplicitMotilityParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitMotilityParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitMotilityParam, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ImplicitMotilityParam(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["lambdaMotility"] = _CompuCell.ImplicitMotilityParam_lambdaMotility_set
    __swig_getmethods__["lambdaMotility"] = _CompuCell.ImplicitMotilityParam_lambdaMotility_get
    if _newclass:
        lambdaMotility = _swig_property(_CompuCell.ImplicitMotilityParam_lambdaMotility_get, _CompuCell.ImplicitMotilityParam_lambdaMotility_set)
    __swig_setmethods__["typeName"] = _CompuCell.ImplicitMotilityParam_typeName_set
    __swig_getmethods__["typeName"] = _CompuCell.ImplicitMotilityParam_typeName_get
    if _newclass:
        typeName = _swig_property(_CompuCell.ImplicitMotilityParam_typeName_get, _CompuCell.ImplicitMotilityParam_typeName_set)
    __swig_destroy__ = _CompuCell.delete_ImplicitMotilityParam
    __del__ = lambda self: None
ImplicitMotilityParam_swigregister = _CompuCell.ImplicitMotilityParam_swigregister
ImplicitMotilityParam_swigregister(ImplicitMotilityParam)

class ImplicitMotilityPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitMotilityPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitMotilityPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ImplicitMotilityPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ImplicitMotilityPlugin
    __del__ = lambda self: None
    __swig_setmethods__["changeEnergyFcnPtr"] = _CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_set
    __swig_getmethods__["changeEnergyFcnPtr"] = _CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_get
    if _newclass:
        changeEnergyFcnPtr = _swig_property(_CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_get, _CompuCell.ImplicitMotilityPlugin_changeEnergyFcnPtr_set)

    def changeEnergy(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergy(self, *args)

    def changeEnergyByCellType(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergyByCellType(self, *args)

    def changeEnergyByCellId(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_changeEnergyByCellId(self, *args)

    def init(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ImplicitMotilityPlugin_toString(self, *args)
ImplicitMotilityPlugin_swigregister = _CompuCell.ImplicitMotilityPlugin_swigregister
ImplicitMotilityPlugin_swigregister(ImplicitMotilityPlugin)


def getImplicitMotilityPlugin(*args):
    return _CompuCell.getImplicitMotilityPlugin(*args)
getImplicitMotilityPlugin = _CompuCell.getImplicitMotilityPlugin
class CurvatureCalculatorPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurvatureCalculatorPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurvatureCalculatorPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CurvatureCalculatorPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CurvatureCalculatorPlugin
    __del__ = lambda self: None

    def getProbabilityByNeighbor(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_getProbabilityByNeighbor(self, *args)

    def getGrowthProbability(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_getGrowthProbability(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.CurvatureCalculatorPlugin_toString(self, *args)
CurvatureCalculatorPlugin_swigregister = _CompuCell.CurvatureCalculatorPlugin_swigregister
CurvatureCalculatorPlugin_swigregister(CurvatureCalculatorPlugin)


def getCurvatureCalculatorPlugin(*args):
    return _CompuCell.getCurvatureCalculatorPlugin(*args)
getCurvatureCalculatorPlugin = _CompuCell.getCurvatureCalculatorPlugin
class OrientedGrowthData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientedGrowthData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrientedGrowthData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_OrientedGrowthData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthData
    __del__ = lambda self: None
    __swig_setmethods__["array"] = _CompuCell.OrientedGrowthData_array_set
    __swig_getmethods__["array"] = _CompuCell.OrientedGrowthData_array_get
    if _newclass:
        array = _swig_property(_CompuCell.OrientedGrowthData_array_get, _CompuCell.OrientedGrowthData_array_set)
    __swig_setmethods__["x"] = _CompuCell.OrientedGrowthData_x_set
    __swig_getmethods__["x"] = _CompuCell.OrientedGrowthData_x_get
    if _newclass:
        x = _swig_property(_CompuCell.OrientedGrowthData_x_get, _CompuCell.OrientedGrowthData_x_set)
    __swig_setmethods__["elong_x"] = _CompuCell.OrientedGrowthData_elong_x_set
    __swig_getmethods__["elong_x"] = _CompuCell.OrientedGrowthData_elong_x_get
    if _newclass:
        elong_x = _swig_property(_CompuCell.OrientedGrowthData_elong_x_get, _CompuCell.OrientedGrowthData_elong_x_set)
    __swig_setmethods__["elong_y"] = _CompuCell.OrientedGrowthData_elong_y_set
    __swig_getmethods__["elong_y"] = _CompuCell.OrientedGrowthData_elong_y_get
    if _newclass:
        elong_y = _swig_property(_CompuCell.OrientedGrowthData_elong_y_get, _CompuCell.OrientedGrowthData_elong_y_set)
    __swig_setmethods__["elong_targetWidth"] = _CompuCell.OrientedGrowthData_elong_targetWidth_set
    __swig_getmethods__["elong_targetWidth"] = _CompuCell.OrientedGrowthData_elong_targetWidth_get
    if _newclass:
        elong_targetWidth = _swig_property(_CompuCell.OrientedGrowthData_elong_targetWidth_get, _CompuCell.OrientedGrowthData_elong_targetWidth_set)
    __swig_setmethods__["elong_enabled"] = _CompuCell.OrientedGrowthData_elong_enabled_set
    __swig_getmethods__["elong_enabled"] = _CompuCell.OrientedGrowthData_elong_enabled_get
    if _newclass:
        elong_enabled = _swig_property(_CompuCell.OrientedGrowthData_elong_enabled_get, _CompuCell.OrientedGrowthData_elong_enabled_set)
OrientedGrowthData_swigregister = _CompuCell.OrientedGrowthData_swigregister
OrientedGrowthData_swigregister(OrientedGrowthData)

class OrientedGrowthDataAccessorTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientedGrowthDataAccessorTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrientedGrowthDataAccessorTemplate, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.OrientedGrowthDataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_OrientedGrowthDataAccessorTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthDataAccessorTemplate
    __del__ = lambda self: None
OrientedGrowthDataAccessorTemplate_swigregister = _CompuCell.OrientedGrowthDataAccessorTemplate_swigregister
OrientedGrowthDataAccessorTemplate_swigregister(OrientedGrowthDataAccessorTemplate)

class OrientedGrowthPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrientedGrowthPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrientedGrowthPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_OrientedGrowthPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_OrientedGrowthPlugin
    __del__ = lambda self: None

    def getOrientedGrowthDataAccessorPtr(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getOrientedGrowthDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.OrientedGrowthPlugin_changeEnergy(self, *args)
    __swig_setmethods__["xml_energy_penalty"] = _CompuCell.OrientedGrowthPlugin_xml_energy_penalty_set
    __swig_getmethods__["xml_energy_penalty"] = _CompuCell.OrientedGrowthPlugin_xml_energy_penalty_get
    if _newclass:
        xml_energy_penalty = _swig_property(_CompuCell.OrientedGrowthPlugin_xml_energy_penalty_get, _CompuCell.OrientedGrowthPlugin_xml_energy_penalty_set)
    __swig_setmethods__["xml_energy_falloff"] = _CompuCell.OrientedGrowthPlugin_xml_energy_falloff_set
    __swig_getmethods__["xml_energy_falloff"] = _CompuCell.OrientedGrowthPlugin_xml_energy_falloff_get
    if _newclass:
        xml_energy_falloff = _swig_property(_CompuCell.OrientedGrowthPlugin_xml_energy_falloff_get, _CompuCell.OrientedGrowthPlugin_xml_energy_falloff_set)

    def setConstraintWidth(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setConstraintWidth(self, *args)

    def setElongationAxis(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setElongationAxis(self, *args)

    def setElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowthPlugin_setElongationEnabled(self, *args)

    def getElongationAxis_X(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationAxis_X(self, *args)

    def getElongationAxis_Y(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationAxis_Y(self, *args)

    def getElongationEnabled(self, *args):
        return _CompuCell.OrientedGrowthPlugin_getElongationEnabled(self, *args)

    def step(self, *args):
        return _CompuCell.OrientedGrowthPlugin_step(self, *args)

    def init(self, *args):
        return _CompuCell.OrientedGrowthPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.OrientedGrowthPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.OrientedGrowthPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.OrientedGrowthPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.OrientedGrowthPlugin_toString(self, *args)
OrientedGrowthPlugin_swigregister = _CompuCell.OrientedGrowthPlugin_swigregister
OrientedGrowthPlugin_swigregister(OrientedGrowthPlugin)


def getOrientedGrowthPlugin(*args):
    return _CompuCell.getOrientedGrowthPlugin(*args)
getOrientedGrowthPlugin = _CompuCell.getOrientedGrowthPlugin
class CellFieldCleaverSimulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellFieldCleaverSimulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellFieldCleaverSimulator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CellFieldCleaverSimulator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CellFieldCleaverSimulator
    __del__ = lambda self: None

    def valueAt(self, *args):
        return _CompuCell.CellFieldCleaverSimulator_valueAt(self, *args)

    def bounds(self, *args):
        return _CompuCell.CellFieldCleaverSimulator_bounds(self, *args)
    __swig_setmethods__["minValue"] = _CompuCell.CellFieldCleaverSimulator_minValue_set
    __swig_getmethods__["minValue"] = _CompuCell.CellFieldCleaverSimulator_minValue_get
    if _newclass:
        minValue = _swig_property(_CompuCell.CellFieldCleaverSimulator_minValue_get, _CompuCell.CellFieldCleaverSimulator_minValue_set)
    __swig_setmethods__["maxValue"] = _CompuCell.CellFieldCleaverSimulator_maxValue_set
    __swig_getmethods__["maxValue"] = _CompuCell.CellFieldCleaverSimulator_maxValue_get
    if _newclass:
        maxValue = _swig_property(_CompuCell.CellFieldCleaverSimulator_maxValue_get, _CompuCell.CellFieldCleaverSimulator_maxValue_set)

    def setFieldDim(self, *args):
        return _CompuCell.CellFieldCleaverSimulator_setFieldDim(self, *args)

    def setCellFieldPtr(self, *args):
        return _CompuCell.CellFieldCleaverSimulator_setCellFieldPtr(self, *args)

    def setIncludeCellTypesSet(self, *args):
        return _CompuCell.CellFieldCleaverSimulator_setIncludeCellTypesSet(self, *args)
CellFieldCleaverSimulator_swigregister = _CompuCell.CellFieldCleaverSimulator_swigregister
CellFieldCleaverSimulator_swigregister(CellFieldCleaverSimulator)

class CleaverMeshDumper(Steppable):
    __swig_setmethods__ = {}
    for _s in [Steppable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CleaverMeshDumper, name, value)
    __swig_getmethods__ = {}
    for _s in [Steppable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CleaverMeshDumper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_CleaverMeshDumper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_CleaverMeshDumper
    __del__ = lambda self: None

    def init(self, *args):
        return _CompuCell.CleaverMeshDumper_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.CleaverMeshDumper_extraInit(self, *args)

    def start(self, *args):
        return _CompuCell.CleaverMeshDumper_start(self, *args)

    def step(self, *args):
        return _CompuCell.CleaverMeshDumper_step(self, *args)

    def finish(self, *args):
        return _CompuCell.CleaverMeshDumper_finish(self, *args)

    def update(self, *args):
        return _CompuCell.CleaverMeshDumper_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.CleaverMeshDumper_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.CleaverMeshDumper_toString(self, *args)

    def simulateCleaverMesh(self, *args):
        return _CompuCell.CleaverMeshDumper_simulateCleaverMesh(self, *args)
CleaverMeshDumper_swigregister = _CompuCell.CleaverMeshDumper_swigregister
CleaverMeshDumper_swigregister(CleaverMeshDumper)


def getCleaverMeshDumper(*args):
    return _CompuCell.getCleaverMeshDumper(*args)
getCleaverMeshDumper = _CompuCell.getCleaverMeshDumper
class ContactOrientationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactOrientationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactOrientationData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactOrientationData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactOrientationData
    __del__ = lambda self: None
    __swig_setmethods__["oriantationVec"] = _CompuCell.ContactOrientationData_oriantationVec_set
    __swig_getmethods__["oriantationVec"] = _CompuCell.ContactOrientationData_oriantationVec_get
    if _newclass:
        oriantationVec = _swig_property(_CompuCell.ContactOrientationData_oriantationVec_get, _CompuCell.ContactOrientationData_oriantationVec_set)
    __swig_setmethods__["alpha"] = _CompuCell.ContactOrientationData_alpha_set
    __swig_getmethods__["alpha"] = _CompuCell.ContactOrientationData_alpha_get
    if _newclass:
        alpha = _swig_property(_CompuCell.ContactOrientationData_alpha_get, _CompuCell.ContactOrientationData_alpha_set)
ContactOrientationData_swigregister = _CompuCell.ContactOrientationData_swigregister
ContactOrientationData_swigregister(ContactOrientationData)

class ContactOrientationDataAccessorTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactOrientationDataAccessorTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactOrientationDataAccessorTemplate, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.ContactOrientationDataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_ContactOrientationDataAccessorTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactOrientationDataAccessorTemplate
    __del__ = lambda self: None
ContactOrientationDataAccessorTemplate_swigregister = _CompuCell.ContactOrientationDataAccessorTemplate_swigregister
ContactOrientationDataAccessorTemplate_swigregister(ContactOrientationDataAccessorTemplate)

class ContactOrientationPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactOrientationPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactOrientationPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ContactOrientationPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ContactOrientationPlugin
    __del__ = lambda self: None

    def getContactOrientationDataAccessorPtr(self, *args):
        return _CompuCell.ContactOrientationPlugin_getContactOrientationDataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ContactOrientationPlugin_init(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.ContactOrientationPlugin_handleEvent(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ContactOrientationPlugin_extraInit(self, *args)

    def setOriantationVector(self, *args):
        return _CompuCell.ContactOrientationPlugin_setOriantationVector(self, *args)

    def getOriantationVector(self, *args):
        return _CompuCell.ContactOrientationPlugin_getOriantationVector(self, *args)

    def setAlpha(self, *args):
        return _CompuCell.ContactOrientationPlugin_setAlpha(self, *args)

    def getAlpha(self, *args):
        return _CompuCell.ContactOrientationPlugin_getAlpha(self, *args)

    def update(self, *args):
        return _CompuCell.ContactOrientationPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ContactOrientationPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ContactOrientationPlugin_toString(self, *args)

    def contactEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_contactEnergy(self, *args)

    def setContactEnergy(self, *args):
        return _CompuCell.ContactOrientationPlugin_setContactEnergy(self, *args)
ContactOrientationPlugin_swigregister = _CompuCell.ContactOrientationPlugin_swigregister
ContactOrientationPlugin_swigregister(ContactOrientationPlugin)


def getContactOrientationPlugin(*args):
    return _CompuCell.getContactOrientationPlugin(*args)
getContactOrientationPlugin = _CompuCell.getContactOrientationPlugin
class Array3DCUDAunsignedchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array3DCUDAunsignedchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array3DCUDAunsignedchar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Array3DCUDAunsignedchar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Array3DCUDAunsignedchar
    __del__ = lambda self: None

    def allocateArray(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_allocateArray(self, *args)

    def getContainer(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getContainer(self, *args)

    def getDirect(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getDirect(self, *args)

    def setDirect(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_setDirect(self, *args)

    def isValid(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_isValid(self, *args)

    def set(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_set(self, *args)

    def get(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_get(self, *args)

    def getByIndex(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getByIndex(self, *args)

    def setByIndex(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_setByIndex(self, *args)

    def swapArrays(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_swapArrays(self, *args)

    def getArraySize(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getArraySize(self, *args)

    def getInternalDim(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getInternalDim(self, *args)

    def getDim(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_getDim(self, *args)

    def swapQuick(self, *args):
        return _CompuCell.Array3DCUDAunsignedchar_swapQuick(self, *args)
Array3DCUDAunsignedchar_swigregister = _CompuCell.Array3DCUDAunsignedchar_swigregister
Array3DCUDAunsignedchar_swigregister(Array3DCUDAunsignedchar)

class BoundaryMonitorPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryMonitorPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryMonitorPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_BoundaryMonitorPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_BoundaryMonitorPlugin
    __del__ = lambda self: None

    def getBoundaryArray(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_getBoundaryArray(self, *args)

    def field3DChange(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_field3DChange(self, *args)

    def init(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_extraInit(self, *args)

    def handleEvent(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_handleEvent(self, *args)

    def update(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.BoundaryMonitorPlugin_toString(self, *args)
BoundaryMonitorPlugin_swigregister = _CompuCell.BoundaryMonitorPlugin_swigregister
BoundaryMonitorPlugin_swigregister(BoundaryMonitorPlugin)


def getBoundaryMonitorPlugin(*args):
    return _CompuCell.getBoundaryMonitorPlugin(*args)
getBoundaryMonitorPlugin = _CompuCell.getBoundaryMonitorPlugin
class Polarization23Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polarization23Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polarization23Data, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Polarization23Data(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Polarization23Data
    __del__ = lambda self: None
    __swig_setmethods__["polarizationVec"] = _CompuCell.Polarization23Data_polarizationVec_set
    __swig_getmethods__["polarizationVec"] = _CompuCell.Polarization23Data_polarizationVec_get
    if _newclass:
        polarizationVec = _swig_property(_CompuCell.Polarization23Data_polarizationVec_get, _CompuCell.Polarization23Data_polarizationVec_set)
    __swig_setmethods__["type1"] = _CompuCell.Polarization23Data_type1_set
    __swig_getmethods__["type1"] = _CompuCell.Polarization23Data_type1_get
    if _newclass:
        type1 = _swig_property(_CompuCell.Polarization23Data_type1_get, _CompuCell.Polarization23Data_type1_set)
    __swig_setmethods__["type2"] = _CompuCell.Polarization23Data_type2_set
    __swig_getmethods__["type2"] = _CompuCell.Polarization23Data_type2_get
    if _newclass:
        type2 = _swig_property(_CompuCell.Polarization23Data_type2_get, _CompuCell.Polarization23Data_type2_set)
    __swig_setmethods__["_lambda"] = _CompuCell.Polarization23Data__lambda_set
    __swig_getmethods__["_lambda"] = _CompuCell.Polarization23Data__lambda_get
    if _newclass:
        _lambda = _swig_property(_CompuCell.Polarization23Data__lambda_get, _CompuCell.Polarization23Data__lambda_set)
Polarization23Data_swigregister = _CompuCell.Polarization23Data_swigregister
Polarization23Data_swigregister(Polarization23Data)

class Polarization23DataAccessorTemplate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polarization23DataAccessorTemplate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polarization23DataAccessorTemplate, name)
    __repr__ = _swig_repr

    def get(self, *args):
        return _CompuCell.Polarization23DataAccessorTemplate_get(self, *args)

    def __init__(self, *args):
        this = _CompuCell.new_Polarization23DataAccessorTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Polarization23DataAccessorTemplate
    __del__ = lambda self: None
Polarization23DataAccessorTemplate_swigregister = _CompuCell.Polarization23DataAccessorTemplate_swigregister
Polarization23DataAccessorTemplate_swigregister(Polarization23DataAccessorTemplate)

class Polarization23Plugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polarization23Plugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polarization23Plugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_Polarization23Plugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_Polarization23Plugin
    __del__ = lambda self: None

    def getPolarization23DataAccessorPtr(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarization23DataAccessorPtr(self, *args)

    def changeEnergy(self, *args):
        return _CompuCell.Polarization23Plugin_changeEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.Polarization23Plugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.Polarization23Plugin_extraInit(self, *args)

    def setPolarizationVector(self, *args):
        return _CompuCell.Polarization23Plugin_setPolarizationVector(self, *args)

    def getPolarizationVector(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarizationVector(self, *args)

    def setPolarizationMarkers(self, *args):
        return _CompuCell.Polarization23Plugin_setPolarizationMarkers(self, *args)

    def getPolarizationMarkers(self, *args):
        return _CompuCell.Polarization23Plugin_getPolarizationMarkers(self, *args)

    def setLambdaPolarization(self, *args):
        return _CompuCell.Polarization23Plugin_setLambdaPolarization(self, *args)

    def getLambdaPolarization(self, *args):
        return _CompuCell.Polarization23Plugin_getLambdaPolarization(self, *args)

    def update(self, *args):
        return _CompuCell.Polarization23Plugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.Polarization23Plugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.Polarization23Plugin_toString(self, *args)
Polarization23Plugin_swigregister = _CompuCell.Polarization23Plugin_swigregister
Polarization23Plugin_swigregister(Polarization23Plugin)


def getPolarization23Plugin(*args):
    return _CompuCell.getPolarization23Plugin(*args)
getPolarization23Plugin = _CompuCell.getPolarization23Plugin
class ClusterSurfacePlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterSurfacePlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterSurfacePlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ClusterSurfacePlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ClusterSurfacePlugin
    __del__ = lambda self: None

    def changeEnergy(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergy(self, *args)

    def changeEnergyByCellId(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergyByCellId(self, *args)

    def changeEnergyGlobal(self, *args):
        return _CompuCell.ClusterSurfacePlugin_changeEnergyGlobal(self, *args)

    def setTargetAndLambdaClusterSurface(self, *args):
        return _CompuCell.ClusterSurfacePlugin_setTargetAndLambdaClusterSurface(self, *args)

    def getTargetAndLambdaVolume(self, *args):
        return _CompuCell.ClusterSurfacePlugin_getTargetAndLambdaVolume(self, *args)

    def getNewOldClusterSurfaceDiffs(self, *args):
        return _CompuCell.ClusterSurfacePlugin_getNewOldClusterSurfaceDiffs(self, *args)

    def diffEnergy(self, *args):
        return _CompuCell.ClusterSurfacePlugin_diffEnergy(self, *args)

    def init(self, *args):
        return _CompuCell.ClusterSurfacePlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClusterSurfacePlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ClusterSurfacePlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ClusterSurfacePlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ClusterSurfacePlugin_toString(self, *args)
ClusterSurfacePlugin_swigregister = _CompuCell.ClusterSurfacePlugin_swigregister
ClusterSurfacePlugin_swigregister(ClusterSurfacePlugin)


def getClusterSurfacePlugin(*args):
    return _CompuCell.getClusterSurfacePlugin(*args)
getClusterSurfacePlugin = _CompuCell.getClusterSurfacePlugin
class ClusterSurfaceTrackerPlugin(CellGChangeWatcher):
    __swig_setmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterSurfaceTrackerPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGChangeWatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterSurfaceTrackerPlugin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CompuCell.new_ClusterSurfaceTrackerPlugin(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CompuCell.delete_ClusterSurfaceTrackerPlugin
    __del__ = lambda self: None

    def field3DChange(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_field3DChange(self, *args)

    def getLatticeMultiplicativeFactors(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_getLatticeMultiplicativeFactors(self, *args)

    def getMaxNeighborIndex(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_getMaxNeighborIndex(self, *args)

    def updateClusterSurface(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_updateClusterSurface(self, *args)

    def init(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_init(self, *args)

    def extraInit(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_extraInit(self, *args)

    def update(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_update(self, *args)

    def steerableName(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_steerableName(self, *args)

    def toString(self, *args):
        return _CompuCell.ClusterSurfaceTrackerPlugin_toString(self, *args)
ClusterSurfaceTrackerPlugin_swigregister = _CompuCell.ClusterSurfaceTrackerPlugin_swigregister
ClusterSurfaceTrackerPlugin_swigregister(ClusterSurfaceTrackerPlugin)


def getClusterSurfaceTrackerPlugin(*args):
    return _CompuCell.getClusterSurfaceTrackerPlugin(*args)
getClusterSurfaceTrackerPlugin = _CompuCell.getClusterSurfaceTrackerPlugin
# This file is compatible with both classic and new-style classes.


