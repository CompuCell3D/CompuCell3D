# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CC3DXML')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CC3DXML')
    _CC3DXML = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CC3DXML', [dirname(__file__)])
        except ImportError:
            import _CC3DXML
            return _CC3DXML
        try:
            _mod = imp.load_module('_CC3DXML', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CC3DXML = swig_import_helper()
    del swig_import_helper
else:
    import _CC3DXML
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CC3DXML.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CC3DXML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CC3DXML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CC3DXML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CC3DXML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CC3DXML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CC3DXML.SwigPyIterator_copy(self)

    def next(self):
        return _CC3DXML.SwigPyIterator_next(self)

    def __next__(self):
        return _CC3DXML.SwigPyIterator___next__(self)

    def previous(self):
        return _CC3DXML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CC3DXML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CC3DXML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CC3DXML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CC3DXML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CC3DXML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CC3DXML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CC3DXML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CC3DXML.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ListCC3DXMLElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListCC3DXMLElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListCC3DXMLElement, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.ListCC3DXMLElement_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.ListCC3DXMLElement___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.ListCC3DXMLElement___bool__(self)

    def __len__(self):
        return _CC3DXML.ListCC3DXMLElement___len__(self)

    def __getslice__(self, i, j):
        return _CC3DXML.ListCC3DXMLElement___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CC3DXML.ListCC3DXMLElement___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CC3DXML.ListCC3DXMLElement___setitem__(self, *args)

    def pop(self):
        return _CC3DXML.ListCC3DXMLElement_pop(self)

    def append(self, x):
        return _CC3DXML.ListCC3DXMLElement_append(self, x)

    def empty(self):
        return _CC3DXML.ListCC3DXMLElement_empty(self)

    def size(self):
        return _CC3DXML.ListCC3DXMLElement_size(self)

    def swap(self, v):
        return _CC3DXML.ListCC3DXMLElement_swap(self, v)

    def begin(self):
        return _CC3DXML.ListCC3DXMLElement_begin(self)

    def end(self):
        return _CC3DXML.ListCC3DXMLElement_end(self)

    def rbegin(self):
        return _CC3DXML.ListCC3DXMLElement_rbegin(self)

    def rend(self):
        return _CC3DXML.ListCC3DXMLElement_rend(self)

    def clear(self):
        return _CC3DXML.ListCC3DXMLElement_clear(self)

    def get_allocator(self):
        return _CC3DXML.ListCC3DXMLElement_get_allocator(self)

    def pop_back(self):
        return _CC3DXML.ListCC3DXMLElement_pop_back(self)

    def erase(self, *args):
        return _CC3DXML.ListCC3DXMLElement_erase(self, *args)

    def __init__(self, *args):
        this = _CC3DXML.new_ListCC3DXMLElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CC3DXML.ListCC3DXMLElement_push_back(self, x)

    def front(self):
        return _CC3DXML.ListCC3DXMLElement_front(self)

    def back(self):
        return _CC3DXML.ListCC3DXMLElement_back(self)

    def assign(self, n, x):
        return _CC3DXML.ListCC3DXMLElement_assign(self, n, x)

    def resize(self, *args):
        return _CC3DXML.ListCC3DXMLElement_resize(self, *args)

    def insert(self, *args):
        return _CC3DXML.ListCC3DXMLElement_insert(self, *args)

    def reserve(self, n):
        return _CC3DXML.ListCC3DXMLElement_reserve(self, n)

    def capacity(self):
        return _CC3DXML.ListCC3DXMLElement_capacity(self)
    __swig_destroy__ = _CC3DXML.delete_ListCC3DXMLElement
    __del__ = lambda self: None
ListCC3DXMLElement_swigregister = _CC3DXML.ListCC3DXMLElement_swigregister
ListCC3DXMLElement_swigregister(ListCC3DXMLElement)

class CC3DXMLElementList(ListCC3DXMLElement):
    __swig_setmethods__ = {}
    for _s in [ListCC3DXMLElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DXMLElementList, name, value)
    __swig_getmethods__ = {}
    for _s in [ListCC3DXMLElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DXMLElementList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementList
    __del__ = lambda self: None

    def getBaseClass(self):
        return _CC3DXML.CC3DXMLElementList_getBaseClass(self)

    def getElement(self, _index):
        return _CC3DXML.CC3DXMLElementList_getElement(self, _index)

    def __init__(self):
        this = _CC3DXML.new_CC3DXMLElementList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
CC3DXMLElementList_swigregister = _CC3DXML.CC3DXMLElementList_swigregister
CC3DXMLElementList_swigregister(CC3DXMLElementList)

class CC3DXMLElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DXMLElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DXMLElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _CC3DXML.CC3DXMLElement_name_set
    __swig_getmethods__["name"] = _CC3DXML.CC3DXMLElement_name_get
    if _newclass:
        name = _swig_property(_CC3DXML.CC3DXMLElement_name_get, _CC3DXML.CC3DXMLElement_name_set)
    __swig_setmethods__["cdata"] = _CC3DXML.CC3DXMLElement_cdata_set
    __swig_getmethods__["cdata"] = _CC3DXML.CC3DXMLElement_cdata_get
    if _newclass:
        cdata = _swig_property(_CC3DXML.CC3DXMLElement_cdata_get, _CC3DXML.CC3DXMLElement_cdata_set)
    __swig_setmethods__["attributes"] = _CC3DXML.CC3DXMLElement_attributes_set
    __swig_getmethods__["attributes"] = _CC3DXML.CC3DXMLElement_attributes_get
    if _newclass:
        attributes = _swig_property(_CC3DXML.CC3DXMLElement_attributes_get, _CC3DXML.CC3DXMLElement_attributes_set)
    __swig_setmethods__["additionalChildElements"] = _CC3DXML.CC3DXMLElement_additionalChildElements_set
    __swig_getmethods__["additionalChildElements"] = _CC3DXML.CC3DXMLElement_additionalChildElements_get
    if _newclass:
        additionalChildElements = _swig_property(_CC3DXML.CC3DXMLElement_additionalChildElements_get, _CC3DXML.CC3DXMLElement_additionalChildElements_set)
    __swig_setmethods__["children"] = _CC3DXML.CC3DXMLElement_children_set
    __swig_getmethods__["children"] = _CC3DXML.CC3DXMLElement_children_get
    if _newclass:
        children = _swig_property(_CC3DXML.CC3DXMLElement_children_get, _CC3DXML.CC3DXMLElement_children_set)
    __swig_setmethods__["comment"] = _CC3DXML.CC3DXMLElement_comment_set
    __swig_getmethods__["comment"] = _CC3DXML.CC3DXMLElement_comment_get
    if _newclass:
        comment = _swig_property(_CC3DXML.CC3DXMLElement_comment_get, _CC3DXML.CC3DXMLElement_comment_set)

    def saveXML(self, _fileName):
        return _CC3DXML.CC3DXMLElement_saveXML(self, _fileName)

    def saveXMLInPython(self, _fileName):
        return _CC3DXML.CC3DXMLElement_saveXMLInPython(self, _fileName)

    def getXMLAsPython(self):
        return _CC3DXML.CC3DXMLElement_getXMLAsPython(self)

    def writeCC3DXMLElement(self, _out, _indent=0):
        return _CC3DXML.CC3DXMLElement_writeCC3DXMLElement(self, _out, _indent)

    def writeCC3DXMLElementInPython(self, _out, _parentElement, _indent=4, _commentElemFlag=False):
        return _CC3DXML.CC3DXMLElement_writeCC3DXMLElementInPython(self, _out, _parentElement, _indent, _commentElemFlag)

    def getCC3DXMLElementString(self):
        return _CC3DXML.CC3DXMLElement_getCC3DXMLElementString(self)

    def __init__(self, *args):
        this = _CC3DXML.new_CC3DXMLElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addChild(self, _child):
        return _CC3DXML.CC3DXMLElement_addChild(self, _child)

    def attachElement(self, *args):
        return _CC3DXML.CC3DXMLElement_attachElement(self, *args)

    def attachAttribute(self, _attrName, _attrValue):
        return _CC3DXML.CC3DXMLElement_attachAttribute(self, _attrName, _attrValue)

    def findAttribute(self, key):
        return _CC3DXML.CC3DXMLElement_findAttribute(self, key)

    def getAttributes(self):
        return _CC3DXML.CC3DXMLElement_getAttributes(self)

    def getAttribute(self, key):
        return _CC3DXML.CC3DXMLElement_getAttribute(self, key)

    def getAttributeAsDouble(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsDouble(self, key)

    def getAttributeAsUInt(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUInt(self, key)

    def getAttributeAsInt(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsInt(self, key)

    def getAttributeAsShort(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsShort(self, key)

    def getAttributeAsUShort(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUShort(self, key)

    def getAttributeAsBool(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsBool(self, key)

    def getAttributeAsUByte(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsUByte(self, key)

    def getAttributeAsByte(self, key):
        return _CC3DXML.CC3DXMLElement_getAttributeAsByte(self, key)

    def getData(self):
        return _CC3DXML.CC3DXMLElement_getData(self)

    def getElements(self, *args):
        return _CC3DXML.CC3DXMLElement_getElements(self, *args)

    def getFirstElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElement_getFirstElement(self, _name, _attributes)

    def findElement(self, _name, _attributes=None):
        return _CC3DXML.CC3DXMLElement_findElement(self, _name, _attributes)

    def checkMatch(self, _name, _attributes):
        return _CC3DXML.CC3DXMLElement_checkMatch(self, _name, _attributes)

    def updateElementAttributes(self, _attributes=None):
        return _CC3DXML.CC3DXMLElement_updateElementAttributes(self, _attributes)

    def updateElementValue(self, _cdata):
        return _CC3DXML.CC3DXMLElement_updateElementValue(self, _cdata)

    def getNumberOfChildren(self):
        return _CC3DXML.CC3DXMLElement_getNumberOfChildren(self)

    def getUInt(self):
        return _CC3DXML.CC3DXMLElement_getUInt(self)

    def getInt(self):
        return _CC3DXML.CC3DXMLElement_getInt(self)

    def getByte(self):
        return _CC3DXML.CC3DXMLElement_getByte(self)

    def getUByte(self):
        return _CC3DXML.CC3DXMLElement_getUByte(self)

    def getShort(self):
        return _CC3DXML.CC3DXMLElement_getShort(self)

    def getUShort(self):
        return _CC3DXML.CC3DXMLElement_getUShort(self)

    def getDouble(self):
        return _CC3DXML.CC3DXMLElement_getDouble(self)

    def getBool(self):
        return _CC3DXML.CC3DXMLElement_getBool(self)

    def getText(self):
        return _CC3DXML.CC3DXMLElement_getText(self)

    def getName(self):
        return _CC3DXML.CC3DXMLElement_getName(self)

    def getPointerAsLong(self):
        return _CC3DXML.CC3DXMLElement_getPointerAsLong(self)

    def setElemNameCounterDictPtr(self, _ptr):
        return _CC3DXML.CC3DXMLElement_setElemNameCounterDictPtr(self, _ptr)

    def addComment(self, _comment):
        return _CC3DXML.CC3DXMLElement_addComment(self, _comment)

    def commentOutElement(self):
        return _CC3DXML.CC3DXMLElement_commentOutElement(self)
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElement
    __del__ = lambda self: None
CC3DXMLElement_swigregister = _CC3DXML.CC3DXMLElement_swigregister
CC3DXMLElement_swigregister(CC3DXMLElement)

class CC3DXMLElementWalker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DXMLElementWalker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DXMLElementWalker, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CC3DXML.new_CC3DXMLElementWalker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def iterateCC3DXMLElement(self, _element):
        return _CC3DXML.CC3DXMLElementWalker_iterateCC3DXMLElement(self, _element)
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementWalker
    __del__ = lambda self: None
CC3DXMLElementWalker_swigregister = _CC3DXML.CC3DXMLElementWalker_swigregister
CC3DXMLElementWalker_swigregister(CC3DXMLElementWalker)

class MapStrStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStrStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStrStr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.MapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.MapStrStr___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.MapStrStr___bool__(self)

    def __len__(self):
        return _CC3DXML.MapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.MapStrStr___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.MapStrStr___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.MapStrStr_has_key(self, key)

    def keys(self):
        return _CC3DXML.MapStrStr_keys(self)

    def values(self):
        return _CC3DXML.MapStrStr_values(self)

    def items(self):
        return _CC3DXML.MapStrStr_items(self)

    def __contains__(self, key):
        return _CC3DXML.MapStrStr___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.MapStrStr_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.MapStrStr_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.MapStrStr___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.MapStrStr_asdict(self)

    def __init__(self, *args):
        this = _CC3DXML.new_MapStrStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _CC3DXML.MapStrStr_empty(self)

    def size(self):
        return _CC3DXML.MapStrStr_size(self)

    def swap(self, v):
        return _CC3DXML.MapStrStr_swap(self, v)

    def begin(self):
        return _CC3DXML.MapStrStr_begin(self)

    def end(self):
        return _CC3DXML.MapStrStr_end(self)

    def rbegin(self):
        return _CC3DXML.MapStrStr_rbegin(self)

    def rend(self):
        return _CC3DXML.MapStrStr_rend(self)

    def clear(self):
        return _CC3DXML.MapStrStr_clear(self)

    def get_allocator(self):
        return _CC3DXML.MapStrStr_get_allocator(self)

    def count(self, x):
        return _CC3DXML.MapStrStr_count(self, x)

    def erase(self, *args):
        return _CC3DXML.MapStrStr_erase(self, *args)

    def find(self, x):
        return _CC3DXML.MapStrStr_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.MapStrStr_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.MapStrStr_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_MapStrStr
    __del__ = lambda self: None
MapStrStr_swigregister = _CC3DXML.MapStrStr_swigregister
MapStrStr_swigregister(MapStrStr)

class MapIntStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapIntStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapIntStr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.MapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.MapIntStr___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.MapIntStr___bool__(self)

    def __len__(self):
        return _CC3DXML.MapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.MapIntStr___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.MapIntStr___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.MapIntStr_has_key(self, key)

    def keys(self):
        return _CC3DXML.MapIntStr_keys(self)

    def values(self):
        return _CC3DXML.MapIntStr_values(self)

    def items(self):
        return _CC3DXML.MapIntStr_items(self)

    def __contains__(self, key):
        return _CC3DXML.MapIntStr___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.MapIntStr_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.MapIntStr_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.MapIntStr___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.MapIntStr_asdict(self)

    def __init__(self, *args):
        this = _CC3DXML.new_MapIntStr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _CC3DXML.MapIntStr_empty(self)

    def size(self):
        return _CC3DXML.MapIntStr_size(self)

    def swap(self, v):
        return _CC3DXML.MapIntStr_swap(self, v)

    def begin(self):
        return _CC3DXML.MapIntStr_begin(self)

    def end(self):
        return _CC3DXML.MapIntStr_end(self)

    def rbegin(self):
        return _CC3DXML.MapIntStr_rbegin(self)

    def rend(self):
        return _CC3DXML.MapIntStr_rend(self)

    def clear(self):
        return _CC3DXML.MapIntStr_clear(self)

    def get_allocator(self):
        return _CC3DXML.MapIntStr_get_allocator(self)

    def count(self, x):
        return _CC3DXML.MapIntStr_count(self, x)

    def erase(self, *args):
        return _CC3DXML.MapIntStr_erase(self, *args)

    def find(self, x):
        return _CC3DXML.MapIntStr_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.MapIntStr_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.MapIntStr_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_MapIntStr
    __del__ = lambda self: None
MapIntStr_swigregister = _CC3DXML.MapIntStr_swigregister
MapIntStr_swigregister(MapIntStr)

class DoubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.DoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.DoubleMap___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.DoubleMap___bool__(self)

    def __len__(self):
        return _CC3DXML.DoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _CC3DXML.DoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _CC3DXML.DoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _CC3DXML.DoubleMap_has_key(self, key)

    def keys(self):
        return _CC3DXML.DoubleMap_keys(self)

    def values(self):
        return _CC3DXML.DoubleMap_values(self)

    def items(self):
        return _CC3DXML.DoubleMap_items(self)

    def __contains__(self, key):
        return _CC3DXML.DoubleMap___contains__(self, key)

    def key_iterator(self):
        return _CC3DXML.DoubleMap_key_iterator(self)

    def value_iterator(self):
        return _CC3DXML.DoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _CC3DXML.DoubleMap___setitem__(self, *args)

    def asdict(self):
        return _CC3DXML.DoubleMap_asdict(self)

    def __init__(self, *args):
        this = _CC3DXML.new_DoubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _CC3DXML.DoubleMap_empty(self)

    def size(self):
        return _CC3DXML.DoubleMap_size(self)

    def swap(self, v):
        return _CC3DXML.DoubleMap_swap(self, v)

    def begin(self):
        return _CC3DXML.DoubleMap_begin(self)

    def end(self):
        return _CC3DXML.DoubleMap_end(self)

    def rbegin(self):
        return _CC3DXML.DoubleMap_rbegin(self)

    def rend(self):
        return _CC3DXML.DoubleMap_rend(self)

    def clear(self):
        return _CC3DXML.DoubleMap_clear(self)

    def get_allocator(self):
        return _CC3DXML.DoubleMap_get_allocator(self)

    def count(self, x):
        return _CC3DXML.DoubleMap_count(self, x)

    def erase(self, *args):
        return _CC3DXML.DoubleMap_erase(self, *args)

    def find(self, x):
        return _CC3DXML.DoubleMap_find(self, x)

    def lower_bound(self, x):
        return _CC3DXML.DoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _CC3DXML.DoubleMap_upper_bound(self, x)
    __swig_destroy__ = _CC3DXML.delete_DoubleMap
    __del__ = lambda self: None
DoubleMap_swigregister = _CC3DXML.DoubleMap_swigregister
DoubleMap_swigregister(DoubleMap)

class CC3DXMLElementListIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DXMLElementListIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DXMLElementListIterator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CC3DXML.CC3DXMLElementListIterator_current_set
    __swig_getmethods__["current"] = _CC3DXML.CC3DXMLElementListIterator_current_get
    if _newclass:
        current = _swig_property(_CC3DXML.CC3DXMLElementListIterator_current_get, _CC3DXML.CC3DXMLElementListIterator_current_set)
    __swig_setmethods__["begin"] = _CC3DXML.CC3DXMLElementListIterator_begin_set
    __swig_getmethods__["begin"] = _CC3DXML.CC3DXMLElementListIterator_begin_get
    if _newclass:
        begin = _swig_property(_CC3DXML.CC3DXMLElementListIterator_begin_get, _CC3DXML.CC3DXMLElementListIterator_begin_set)
    __swig_setmethods__["end"] = _CC3DXML.CC3DXMLElementListIterator_end_set
    __swig_getmethods__["end"] = _CC3DXML.CC3DXMLElementListIterator_end_get
    if _newclass:
        end = _swig_property(_CC3DXML.CC3DXMLElementListIterator_end_get, _CC3DXML.CC3DXMLElementListIterator_end_set)

    def __init__(self, *args):
        this = _CC3DXML.new_CC3DXMLElementListIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self):
        return _CC3DXML.CC3DXMLElementListIterator_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.CC3DXMLElementListIterator_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.CC3DXMLElementListIterator_isEnd(self)

    def isBegin(self):
        return _CC3DXML.CC3DXMLElementListIterator_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.CC3DXMLElementListIterator_setToBegin(self)

    def getCurrent(self):
        return _CC3DXML.CC3DXMLElementListIterator_getCurrent(self)

    def getEnd(self):
        return _CC3DXML.CC3DXMLElementListIterator_getEnd(self)

    def previous(self):
        return _CC3DXML.CC3DXMLElementListIterator_previous(self)

    def next(self):
        return _CC3DXML.CC3DXMLElementListIterator_next(self)
    __swig_destroy__ = _CC3DXML.delete_CC3DXMLElementListIterator
    __del__ = lambda self: None
CC3DXMLElementListIterator_swigregister = _CC3DXML.CC3DXMLElementListIterator_swigregister
CC3DXMLElementListIterator_swigregister(CC3DXMLElementListIterator)

class StrStrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrStrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrStrPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CC3DXML.new_StrStrPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _CC3DXML.StrStrPair_first_set
    __swig_getmethods__["first"] = _CC3DXML.StrStrPair_first_get
    if _newclass:
        first = _swig_property(_CC3DXML.StrStrPair_first_get, _CC3DXML.StrStrPair_first_set)
    __swig_setmethods__["second"] = _CC3DXML.StrStrPair_second_set
    __swig_getmethods__["second"] = _CC3DXML.StrStrPair_second_get
    if _newclass:
        second = _swig_property(_CC3DXML.StrStrPair_second_get, _CC3DXML.StrStrPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _CC3DXML.delete_StrStrPair
    __del__ = lambda self: None
StrStrPair_swigregister = _CC3DXML.StrStrPair_swigregister
StrStrPair_swigregister(StrStrPair)

class MapStrStrIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStrStrIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStrStrIterator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CC3DXML.MapStrStrIterator_current_set
    __swig_getmethods__["current"] = _CC3DXML.MapStrStrIterator_current_get
    if _newclass:
        current = _swig_property(_CC3DXML.MapStrStrIterator_current_get, _CC3DXML.MapStrStrIterator_current_set)
    __swig_setmethods__["begin"] = _CC3DXML.MapStrStrIterator_begin_set
    __swig_getmethods__["begin"] = _CC3DXML.MapStrStrIterator_begin_get
    if _newclass:
        begin = _swig_property(_CC3DXML.MapStrStrIterator_begin_get, _CC3DXML.MapStrStrIterator_begin_set)
    __swig_setmethods__["end"] = _CC3DXML.MapStrStrIterator_end_set
    __swig_getmethods__["end"] = _CC3DXML.MapStrStrIterator_end_get
    if _newclass:
        end = _swig_property(_CC3DXML.MapStrStrIterator_end_get, _CC3DXML.MapStrStrIterator_end_set)

    def __init__(self, *args):
        this = _CC3DXML.new_MapStrStrIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self):
        return _CC3DXML.MapStrStrIterator_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.MapStrStrIterator_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.MapStrStrIterator_isEnd(self)

    def isBegin(self):
        return _CC3DXML.MapStrStrIterator_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.MapStrStrIterator_setToBegin(self)

    def getCurrent(self):
        return _CC3DXML.MapStrStrIterator_getCurrent(self)

    def getEnd(self):
        return _CC3DXML.MapStrStrIterator_getEnd(self)

    def previous(self):
        return _CC3DXML.MapStrStrIterator_previous(self)

    def next(self):
        return _CC3DXML.MapStrStrIterator_next(self)
    __swig_destroy__ = _CC3DXML.delete_MapStrStrIterator
    __del__ = lambda self: None
MapStrStrIterator_swigregister = _CC3DXML.MapStrStrIterator_swigregister
MapStrStrIterator_swigregister(MapStrStrIterator)


def createStrStrMap():
    return _CC3DXML.createStrStrMap()
createStrStrMap = _CC3DXML.createStrStrMap

def createIntStrMap():
    return _CC3DXML.createIntStrMap()
createIntStrMap = _CC3DXML.createIntStrMap
class ListString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _CC3DXML.ListString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _CC3DXML.ListString___nonzero__(self)

    def __bool__(self):
        return _CC3DXML.ListString___bool__(self)

    def __len__(self):
        return _CC3DXML.ListString___len__(self)

    def __getslice__(self, i, j):
        return _CC3DXML.ListString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _CC3DXML.ListString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _CC3DXML.ListString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _CC3DXML.ListString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _CC3DXML.ListString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _CC3DXML.ListString___setitem__(self, *args)

    def pop(self):
        return _CC3DXML.ListString_pop(self)

    def append(self, x):
        return _CC3DXML.ListString_append(self, x)

    def empty(self):
        return _CC3DXML.ListString_empty(self)

    def size(self):
        return _CC3DXML.ListString_size(self)

    def swap(self, v):
        return _CC3DXML.ListString_swap(self, v)

    def begin(self):
        return _CC3DXML.ListString_begin(self)

    def end(self):
        return _CC3DXML.ListString_end(self)

    def rbegin(self):
        return _CC3DXML.ListString_rbegin(self)

    def rend(self):
        return _CC3DXML.ListString_rend(self)

    def clear(self):
        return _CC3DXML.ListString_clear(self)

    def get_allocator(self):
        return _CC3DXML.ListString_get_allocator(self)

    def pop_back(self):
        return _CC3DXML.ListString_pop_back(self)

    def erase(self, *args):
        return _CC3DXML.ListString_erase(self, *args)

    def __init__(self, *args):
        this = _CC3DXML.new_ListString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _CC3DXML.ListString_push_back(self, x)

    def front(self):
        return _CC3DXML.ListString_front(self)

    def back(self):
        return _CC3DXML.ListString_back(self)

    def assign(self, n, x):
        return _CC3DXML.ListString_assign(self, n, x)

    def resize(self, *args):
        return _CC3DXML.ListString_resize(self, *args)

    def insert(self, *args):
        return _CC3DXML.ListString_insert(self, *args)

    def pop_front(self):
        return _CC3DXML.ListString_pop_front(self)

    def push_front(self, x):
        return _CC3DXML.ListString_push_front(self, x)

    def reverse(self):
        return _CC3DXML.ListString_reverse(self)
    __swig_destroy__ = _CC3DXML.delete_ListString
    __del__ = lambda self: None
ListString_swigregister = _CC3DXML.ListString_swigregister
ListString_swigregister(ListString)


def derefCC3DXMLElement(_elem):
    return _CC3DXML.derefCC3DXMLElement(_elem)
derefCC3DXMLElement = _CC3DXML.derefCC3DXMLElement
class STLPyIteratorCC3DXMLElementList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STLPyIteratorCC3DXMLElementList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STLPyIteratorCC3DXMLElementList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["current"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_current_set
    __swig_getmethods__["current"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_current_get
    if _newclass:
        current = _swig_property(_CC3DXML.STLPyIteratorCC3DXMLElementList_current_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_current_set)
    __swig_setmethods__["begin"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_begin_set
    __swig_getmethods__["begin"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_begin_get
    if _newclass:
        begin = _swig_property(_CC3DXML.STLPyIteratorCC3DXMLElementList_begin_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_begin_set)
    __swig_setmethods__["end"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_end_set
    __swig_getmethods__["end"] = _CC3DXML.STLPyIteratorCC3DXMLElementList_end_get
    if _newclass:
        end = _swig_property(_CC3DXML.STLPyIteratorCC3DXMLElementList_end_get, _CC3DXML.STLPyIteratorCC3DXMLElementList_end_set)

    def __init__(self, *args):
        this = _CC3DXML.new_STLPyIteratorCC3DXMLElementList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentRef(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_getCurrentRef(self)

    def initialize(self, a):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_initialize(self, a)

    def isEnd(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_isEnd(self)

    def isBegin(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_isBegin(self)

    def setToBegin(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_setToBegin(self)

    def previous(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_previous(self)

    def next(self):
        return _CC3DXML.STLPyIteratorCC3DXMLElementList_next(self)
    __swig_destroy__ = _CC3DXML.delete_STLPyIteratorCC3DXMLElementList
    __del__ = lambda self: None
STLPyIteratorCC3DXMLElementList_swigregister = _CC3DXML.STLPyIteratorCC3DXMLElementList_swigregister
STLPyIteratorCC3DXMLElementList_swigregister(STLPyIteratorCC3DXMLElementList)


def getListString():
    return _CC3DXML.getListString()
getListString = _CC3DXML.getListString
class ListStringWrapped(ListString):
    __swig_setmethods__ = {}
    for _s in [ListString]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListStringWrapped, name, value)
    __swig_getmethods__ = {}
    for _s in [ListString]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListStringWrapped, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _CC3DXML.new_ListStringWrapped()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CC3DXML.delete_ListStringWrapped
    __del__ = lambda self: None
ListStringWrapped_swigregister = _CC3DXML.ListStringWrapped_swigregister
ListStringWrapped_swigregister(ListStringWrapped)


def getListStringWrapped():
    return _CC3DXML.getListStringWrapped()
getListStringWrapped = _CC3DXML.getListStringWrapped

def getFirstElement(_list):
    return _CC3DXML.getFirstElement(_list)
getFirstElement = _CC3DXML.getFirstElement
class Try(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Try, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Try, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _CC3DXML.Try_a_set
    __swig_getmethods__["a"] = _CC3DXML.Try_a_get
    if _newclass:
        a = _swig_property(_CC3DXML.Try_a_get, _CC3DXML.Try_a_set)
    __swig_setmethods__["listString"] = _CC3DXML.Try_listString_set
    __swig_getmethods__["listString"] = _CC3DXML.Try_listString_get
    if _newclass:
        listString = _swig_property(_CC3DXML.Try_listString_get, _CC3DXML.Try_listString_set)

    def __init__(self):
        this = _CC3DXML.new_Try()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CC3DXML.delete_Try
    __del__ = lambda self: None
Try_swigregister = _CC3DXML.Try_swigregister
Try_swigregister(Try)


def getTry():
    return _CC3DXML.getTry()
getTry = _CC3DXML.getTry
# This file is compatible with both classic and new-style classes.


