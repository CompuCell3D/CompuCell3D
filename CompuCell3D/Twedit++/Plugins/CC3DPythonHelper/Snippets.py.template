=============== #@Menu@ Python Utilities 

---------- #@Submenu@ Get Dir Of Current File
fileDir=os.path.dirname (os.path.abspath( __file__ ))

---------- #@Submenu@ Get FullPath Of Current File
filePath=os.path.abspath( __file__ )

---------- #@Submenu@ Import os
import os


=============== #@Menu@ Bionet Solver 

---------- #@Submenu@ 1. Import bionetAPI (top level)
import bionetAPI

---------- #@Submenu@ 2. Initialize Bionetwork Manager (__init__)
Initialize Bionetwork Manager (__init__)

---------- #@Submenu@ 3. Load SBML Model (start fcn)
modelName = "MODEL_NAME"
modelNickname  = "NICKNAME" # this is usually shorter version version of model name
modelPath="PATH_TO_SBML_FILE"
integrationStep = 0.2
bionetAPI.loadSBMLModel(modelName, modelPath,modelNickname,  integrationStep)

---------- #@Submenu@ 4. Assign Model To Cell Type (start fcn)
bionetAPI.addSBMLModelToTemplateLibrary("MODEL_NAME","CELL_TYPE_NAME")

---------- #@Submenu@ 5. Initialize BionetSolver (start fcn)
bionetAPI.initializeBionetworks()

---------- #@Submenu@ Get Species Concentration (start or step fcn)-depreceted
concentration=bionetAPI.getBionetworkValue("NICKNAME_SPECIESNAME",cell.id)

---------- #@Submenu@ Set Species Concentration (start or step fcn)-deprecated
bionetAPI.setBionetworkValue("NICKNAME_SPECIESNAME",CONCENTRATION,cell.id)

---------- #@Submenu@ Set Species Concentration (start or step fcn)-deprecated
bionetAPI.setBionetworkValue("NICKNAME_SPECIESNAME",CONCENTRATION,cell.id)


---------- #@Submenu@ Get Bionetwork State (concentrations) dictionary
state=bionetAPI.getBionetworkState(cell.id,'MODEL_NAME')
state_value=state['REACTANT_NAME']

---------- #@Submenu@ Get Bionetwork Parameters (constants) dictionary
params=bionetAPI.getBionetworkParams(cell.id,'MODEL_NAME')
param_value=params['PARAM_NAME']

---------- #@Submenu@ Set Bionetwork State (concentrations) 
state={}
state['REACTANT_NAME']=0.9
bionetAPI.setBionetworkState(cell.id,'MODEL_NAME',state)

---------- #@Submenu@ Set Bionetwork Parameters (constants) 
params={}
params['PARAM_NAME']=30.1
bionetAPI.setBionetworkParams(cell.id,'MODEL_NAME',params)


---------- #@Submenu@ Time Step Bionetwork (integrate) (step fcn)
bionetAPI.timestepBionetworks() 


=============== #@Menu@ Cell Constraints

---------- #@Submenu@ Change Target Volume
cell.targetVolume=25

---------- #@Submenu@ Change Lambda Volume
cell.lambdaVolume=2.0


---------- #@Submenu@ Change Target Surface
cell.targetSurface=20.0

---------- #@Submenu@ Change Lambda Surface
cell.lambdaSurface=2.0


---------- #@Submenu@ Apply Force To Cell
# Make sure ExternalPotential plugin is loaded
cell.lambdaVecX=-0.5 # force component pointing along X axis - towards positive X's
cell.lambdaVecY=0.5 # force component pointing along Y axis - towards negative Y's
cell.lambdaVecY=0.0 # force component pointing along Z axis 

---------- #@Submenu@ Length Constraint By Cell Id
# Make sure LengthConstraintLocalFlex plugin is loaded
self.lengthConstraintFlexPlugin.setLengthConstraintData(cell,20,20) # cell , lambdaLength, targetLength

---------- #@Submenu@ Connectivity Constraint By Cell Id
# Make sure ConnectivityLocalFlex plugin is loaded
self.connectivityLocalFlexPlugin.setConnectivityStrength(cell,10000000) #cell, strength



=============== #@Menu@ Cell Manipulation

---------- #@Submenu@ Delete Cell
self.deleteCell(cell)  

---------- #@Submenu@ Create Cell
cell=self.potts.createCell()
cell.type=self.TYPENAME # typeName capitalized
self.cellField[x:x+4,y:y+4,0]=cell # size of cell will be 5x5x1

---------- #@Submenu@ Create Cell (old style)
pt=CompuCell.Point3D(50,50,0)
self.createNewCell(2,pt,5,5,1) # the arguments are (type,pt,xSize,ySize,zSize)

---------- #@Submenu@ Get Cell At a Pixel
cell=self.cellField[10,11,0]

---------- #@Submenu@ Move Cell
# Shifting entire cell by a 'shiftVector'         
shiftVector=CompuCell.Point3D(20,20,0)
self.moveCell(cell,shiftVector)



=============== #@Menu@ Visit

---------- #@Submenu@ All Cells
# iterating over all cells in simulation        
for cell in self.cellList:
    # you can access/manipulate cell properties here
    print "id=",cell.id, " type=",cell.type," volume=",cell.volume

---------- #@Submenu@ All Cells Of Given Type
# iterating over cells of type 1        
for cell in self.cellListByType(self.TYPENAME_1,self.TYPENAME_2,...): # list of  cell types (capitalized)
    # you can access/manipulate cell properties here
    print "id=",cell.id," type=",cell.type
    
---------- #@Submenu@ Cell Neighbors
for neighbor , commonSurfaceArea in self.getCellNeighborDataList(cell):                
    if neighbor:
        print "neighbor.id",neighbor.id," commonSurfaceArea=",commonSurfaceArea
    else:
        print "Medium commonSurfaceArea=",commonSurfaceArea

---------- #@Submenu@ Cell Boundary Pixels
# Make sure BoundaryPixelTracker plugin is loaded
pixelList=self.getCellBoundaryPixelList(cell)
for boundaryPixelTrackerData in pixelList:
    print "pixel of cell id=",cell.id," type:",cell.type, " = ",boundaryPixelTrackerData.pixel," number of pixels=",pixelList.numberOfPixels()

---------- #@Submenu@ Cell Pixels
# Make sure PixelTracker plugin is loaded
pixelList=self.getCellPixelList(cell)
for pixelTrackerData in pixelList:
   print "pixel of cell id=",cell.id," type:",cell.type, " = ",pixelTrackerData.pixel," number of pixels=",pixelList.numberOfPixels()
        
---------- #@Submenu@ All Lattice Pixels
for x,y,z in self.everyPixel():
   print "x,y,z=",(x,y,z)

        
=============== #@Menu@ Chemical Field Manipulation    

---------- #@Submenu@ Get Field Reference
field=CompuCell.getConcentrationField(self.simulator,"NAME OF THE FIELD TO OUTPUT")

---------- #@Submenu@ Get Field Value
value=field[10,10,0]

---------- #@Submenu@ Set Field Value
field[10,10,0]=1.02

---------- #@Submenu@ Write To Disk
fileName='TYPE YOUR FILE NAME HERE'
field=CompuCell.getConcentrationField(self.simulator,"NAME OF THE FIELD TO OUTPUT")        
if field:
    try:                
        import CompuCellSetup
        fileHandle,fullFileName=CompuCellSetup.openFileInSimulationOutputDirectory(fileName,"w")
    except IOError:
        print "Could not open file ", fileName," for writing. Check if you have necessary permissions"                
        
    for i,j,k in self.everyPixel():
        fileHandle.write("%d\t%d\t%d\t%f\n"%(i,j,k,field[i,j,k]))

    fileHandle.close()
    
---------- #@Submenu@ Modification (aka secretion)
field=CompuCell.getConcentrationField(self.simulator,"NAME OF THE FIELD ")
if field:    
    for i,j,k in self.everyPixel():
        field[i,j,k]=i*j

        
=============== #@Menu@ Cell Attributes

---------- #@Submenu@ Add Dictionary To Cells
pyAttributeAdder,dictAdder=CompuCellSetup.attachDictionaryToCells(sim)

---------- #@Submenu@ Add List To Cells
pyAttributeAdder,listAdder=CompuCellSetup.attachListToCells(sim)

---------- #@Submenu@ Access/Modify Dictionary Attribute
# access/modification of a dictionary attached to cell - make sure to decalare in main script that you will use such attribute
dict_attrib=CompuCell.getPyAttrib(cell)
dict_attrib["Double_MCS_ID"]=mcs*2*cell.id
print "dict attrib for cell.id=",cell.id, "is ",dict_attrib

---------- #@Submenu@ Access/Modify List Attribute
# access/modification of a list attached to cell - make sure to decalare in main script that you will use such attribute
list_attrib=CompuCell.getPyAttrib(cell)
list_attrib[0:2]=[mcs,mcs*2*cell.id]
print "list attrib for cell.id=",cell.id, "is ",list_attrib

---------- #@Submenu@ Center Of Mass
# Make sure CenterOfMass plugin is loaded
# READ ONLY ACCESS
xCOM=cell.xCOM
yCOM=cell.yCOM
zCOM=cell.zCOM

---------- #@Submenu@ Volume
# READ ONLY ACCESS        
volume=cell.volume

---------- #@Submenu@ Target Volume
# READ/WRITE  ACCESS                
targetVolume=cell.targetVolume

---------- #@Submenu@ Lambda Volume
# READ/WRITE  ACCESS        
lambdaVolume=cell.lambdaVolume

---------- #@Submenu@ Surface
# READ ONLY ACCESS        
Surface=cell.surface

---------- #@Submenu@ Target Surface
# READ/WRITE  ACCESS                
targetSurface=cell.targetSurface

---------- #@Submenu@ Lambda Surface
# READ/WRITE  ACCESS        
lambdaSurface=cell.lambdaSurface


---------- #@Submenu@ Id
# READ ONLY ACCESS        
id=cell.id

---------- #@Submenu@ Cluster Id
# READ ONLY ACCESS - can be modified using reassignClusterId function        
clusterId=cell.clusterId

---------- #@Submenu@ Cluster Id Reassignment
# You cannot simply set cluster Id on a cell to make t belong to other cluster you have to use the following function call
reassignIdFlag=self.inventory.reassignClusterId(cell,1536) # changing cluster id to 1536 for cell 'cell'

---------- #@Submenu@ Cell Type
# READ/WRITE  ACCESS                
type=cell.type

---------- #@Submenu@ Fluctuation Ampl 
# READ/WRITE  ACCESS                        
fluctAmpl=cell.fluctAmpl

---------- #@Submenu@ Fluctuation Ampl Reassignment
cell.fluctAmpl=50 
#uncomment line below to use globally defined FluctuationAmplitude
#cell.fluctAmpl=-1                                

---------- #@Submenu@ Inertia Tensor
# READ ONLY ACCESS        
iXX=cell.iXX
iYY=cell.iYY
iZZ=cell.iZZ
iXY=cell.iXY
iXZ=cell.iXZ
iYZ=cell.iYZ
eccentricity=cell.ecc

=============== #@Menu@ Focal Point Placticity

---------- #@Submenu@ Properties
# Make sure FocalPointPlacticity plugin is loaded
#visiting all focal links cell 'cell' has with other cells
for fppd in self.getFocalPointPlasticityDataList(cell):
    print "fppd.neighborId",fppd.neighborAddress.id, " lambda=",fppd.lambdaDistance, " targetDistance=",fppd.targetDistance
    self.focalPointPlasticityPlugin.setFocalPointPlasticityParameters(cell,fppd.neighborAddress,1.0,7.0,20.0)  # arguments are (cell1,cell2,lambda,targetDistance,maxDistance)     
    
---------- #@Submenu@ Properties (Within Cluster)
# Make sure FocalPointPlacticity plugin is loaded
#visiting all focal links cell 'cell' has with other cells
for fppd in self.getInternalFocalPointPlasticityDataList(cell):
    print "fppd.neighborId",fppd.neighborAddress.id, " lambda=",fppd.lambdaDistance, " targetDistance=",fppd.targetDistance
    self.focalPointPlasticityPlugin.setInternalFocalPointPlasticityParameters(cell,fppd.neighborAddress,1.0,7.0,20.0)  # arguments are (cell1,cell2,lambda,targetDistance,maxDistance)     

=============== #@Menu@ Adhesion Flex

---------- #@Submenu@ Get Molecule Dens. By Name
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.getAdhesionMoleculeDensity(cell,"NCad") # accessing adhesion molecule density using its name

---------- #@Submenu@ Get Molecule Dens. By Index
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.getAdhesionMoleculeDensity(cell,0) # accessing adhesion molecule density using its index - molecules are indexed in the sdame order they are listed in the xml file                   

---------- #@Submenu@ Set Molecule Dens. By Name
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.setAdhesionMoleculeDensity(cell,"NCad",11.2) # setting adhesion molecule density using its name

---------- #@Submenu@ Set Molecule Dens. By Index
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.setAdhesionMoleculeDensity(cell,0,11.2) # setting adhesion molecule density using its index - molecules are indexed in the sdame order they are listed in the xml file

---------- #@Submenu@  Get Molecule Dens. By Name (Medium)
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.getMediumAdhesionMoleculeDensity("NCad") # accessing adhesion molecule density for Medium using its name

---------- #@Submenu@  Get Molecule Dens. By Index (Medium)
# Make sure AdhesionFlex plugin is loaded
self.getMediumAdhesionMoleculeDensityByIndex(0) # accessing adhesion molecule density for Medium using its index - molecules are indexed in the sdame order they are listed in the xml file                   

---------- #@Submenu@  Set Molecule Dens. By Name (Medium)
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.setMediumAdhesionMoleculeDensity("NCad",11.2) # setting adhesion molecule density for Medium using its name

---------- #@Submenu@  Set Molecule Dens. By Index (Medium)
# Make sure AdhesionFlex plugin is loaded
self.adhesionFlexPlugin.setMediumAdhesionMoleculeDensityByIndex(0,11.2) # setting adhesion molecule density for Medium using its index - molecules are indexed in the sdame order they are listed in the xml file



=============== #@Menu@ Chemotaxis

---------- #@Submenu@  By Cell Id (Define)
# Make sure Chemotaxis Plugin is loaded
# defining chemotaxis properties of individual cell 'cell'
cd=self.chemotaxisPlugin.addChemotaxisData(cell,"FIELDNAME")
cd.setLambda(20.0)
# cd.initializeChemotactTowardsVectorTypes("Bacterium,Medium")
cd.assignChemotactTowardsVectorTypes([0,1])

---------- #@Submenu@  By Cell Id (Modify)
# Make sure Chemotaxis Plugin is loaded
# modifying chemotaxis properties of individual cell 'cell'
cd=self.chemotaxisPlugin.getChemotaxisData(cell,"FIELDNAME")
if cd:
    l=cd.getLambda()-3
    cd.setLambda(l)



=============== #@Menu@ Inertia Tensor

---------- #@Submenu@ Information
# Make sure MomentOfInertia plugin is loaded
print "cell.iXX=",cell.iXX," cell.iYY=",cell.iYY," cell.iXY=",cell.iXY
#simiilarly we can get other components of intertia tensor

---------- #@Submenu@ Semiaxes
# Make sure MomentOfInertia plugin is loaded
axes=self.momentOfInertiaPlugin.getSemiaxes(cell)            
print "minorAxis=",axes[0]," majorAxis=",axes[2], " medianAxis=",axes[1]


=============== #@Menu@ Elasticity

---------- #@Submenu@ Modify Existing Links
# Make sure Elasticity plugin is loaded and Local option is on
elasticityDataList=self.getElasticityDataList(cell)
for elasticityData in elasticityDataList: # visiting all elastic links of 'cell'

    targetLength=elasticityData.targetLength               
    elasticityData.targetLength=6.0
    elasticityData.lambdaLength=200.0
    elasticityNeighbor=elasticityData.neighborAddress
    
    # now we set up elastic link data stored in neighboring cell
    neighborElasticityData=None
    neighborElasticityDataList=self.getElasticityDataList(elasticityNeighbor)
    for neighborElasticityDataTmp in neighborElasticityDataList:
        if not CompuCell.areCellsDifferent(neighborElasticityDataTmp.neighborAddress,cell):
            neighborElasticityData=neighborElasticityDataTmp
            break
    
    if neighborElasticityData is None:
        print "None Type returned. Problems with FemDataNeighbors initialization or sets of elasticityNeighborData are corrupted"
        sys.exit()
    neighborElasticityData.targetLength=6.0
    neighborElasticityData.lambdaLength=200.0


---------- #@Submenu@ Add New Elastic Link
# Make sure Elasticity plugin is loaded and Local option is on
self.elasticityTrackerPlugin.addNewElasticLink(cell1 ,cell2, 200.0, 6.0) # arguments are cell1, cell2, lambdaElasticLink,targetLinkLength

---------- #@Submenu@ Remove Elastic Link
# Make sure Elasticity plugin is loaded and Local option is on
self.elasticityTrackerPlugin.removeElasticityPair(cell1 ,cell2, 200.0, 6.0) # arguments are cell1, cell2,

=============== #@Menu@ Secretion

---------- #@Submenu@ Inside Cell
# Make sure Secretion plugin is loaded
# make sure this field is defined in one of the PDE solvers
secretor=self.getFieldSecretor("FIELDNAME") # you may reuse secretor for many cells. Simply define it outside the loop
secretor.secreteInsideCell(cell,300)

---------- #@Submenu@ Inside Cell At Boundary
# Make sure Secretion plugin is loaded
# make sure this field is defined in one of the PDE solvers
secretor=self.getFieldSecretor("FIELDNAME")  # you may reuse secretor for many cells. Simply define it outside the loop
secretor.secreteInsideCellAtBoundary(cell,300)

---------- #@Submenu@ Outside Cell At Boundary
# Make sure Secretion plugin is loaded
# make sure this field is defined in one of the PDE solvers
secretor=self.getFieldSecretor("FIELDNAME") # you may reuse secretor for many cells. Simply define it outside the loop
secretor.secreteOutsideCellAtBoundary(cell,300)

---------- #@Submenu@ Inside Cell At COM
# Make sure Secretion plugin is loaded
# make sure this field is defined in one of the PDE solvers
secretor=self.getFieldSecretor("FIELDNAME") # you may reuse secretor for many cells. Simply define it outside the loop
secretor.secreteInsideCellAtCOM(cell,300)

=============== #@Menu@ Extra Fields

---------- #@Submenu@  Scalar Field Cell Level - Example
self.scalarCLField.clear()
from random import random
for cell in self.cellList:
    self.scalarCLField[cell]=cell,cell.id*random()

    
---------- #@Submenu@ Scalar Field Cell Level - Create
self.scalarCLField=CompuCellSetup.createScalarFieldCellLevelPy("FIELD_NAME_SCL")

---------- #@Submenu@ Scalar Field Cell Level - Clear
self.scalarCLField.clear()

---------- #@Submenu@ Scalar Field Cell Level - Write
self.scalarCLField[cell]=FLOAT_VALUE

---------- #@Submenu@ Scalar Field Pixel Level - Example
self.scalarField[:, :, :]=0.0 # clear field
for x,y,z in self.everyPixel():            
    if (not mcs%20):
        self.scalarField[x,y,z]=x*y
        
    else:
        self.scalarField[x,y,z]=sin(x*y)
        
---------- #@Submenu@ Scalar Field Pixel Level - Create
self.scalarField=CompuCellSetup.createScalarFieldPy(self.dim,"FIELD_NAME_S")

---------- #@Submenu@ Scalar Field Pixel Level - Clear
self.scalarField[:, :, :]=0.0

---------- #@Submenu@ Scalar Field Pixel Level - Write
self.scalarField[10,11,0]=FLOAT_VALUE

---------- #@Submenu@ Vector Field Cell Level - Example
from random import random
self.vectorCLField.clear()
for cell in self.cellList:    
    if cell.type==1:                        
        self.vectorCLField[cell]=[cell.id*random(),cell.id*random(),0]
        vec=self.vectorCLField[cell]
        vec*=2.0
        self.vectorCLField[cell]=vec

---------- #@Submenu@ Vector Field Cell Level - Create
self.vectorCLField=CompuCellSetup.createVectorFieldCellLevelPy("FIELD_NAME_VCL")        

---------- #@Submenu@ Vector Field Cell Level - Clear
self.vectorCLField.clear()

---------- #@Submenu@ Vector Field Cell Level - Write
self.vectorCLField[cell]=[ VEC_X, VEC_Y, VEC_Z]

---------- #@Submenu@ Vector Field Pixel Level - Example
self.vectorField[:, :, :,:]=0.0 # clear vector field        
for x in xrange(0,self.dim.x,5):
    for y in xrange(0,self.dim.y,5):
        for z in xrange(self.dim.z):       
            self.vectorField[x,y,z]=[x*random(), y*random(), z*random()]        

---------- #@Submenu@ Vector Field Pixel Level - Create
self.vectorField=CompuCellSetup.createVectorFieldPy(self.dim,"FIELD_NAME_V")

---------- #@Submenu@ Vector Field Pixel Level - Clear
self.vectorField[:, :, :,:]=0.0 # clear vector field        

---------- #@Submenu@ Vector Field Pixel Level - Write
self.vectorField[x,y,z]=[ VEC_X, VEC_Y, VEC_Z]

=============== #@Menu@ Scientific Plots


---------- #@Submenu@ Setup (start fcn) - detailed, old style
import CompuCellSetup  
self.pW=CompuCellSetup.viewManager.plotManager.getNewPlotWindow()
if not self.pW:
    return
#Plot Title - properties           
self.pW.setTitle("PLOT TITLE")
self.pW.setTitleSize(12)
self.pW.setTitleColor("Green") # you may choose different color - type its name

#plot background
self.pW.setPlotBackgroundColor("orange") # you may choose different color - type its name

# properties of x axis
self.pW.setXAxisTitle("TITLE OF Y AXIS")
self.pW.setXAxisTitleSize(10)      
self.pW.setXAxisTitleColor("blue")  # you may choose different color - type its name            

# properties of y axis
self.pW.setYAxisTitle("TITLE OF Y AXIS")        
self.pW.setYAxisLogScale()
self.pW.setYAxisTitleSize(10)        
self.pW.setYAxisTitleColor("red")  # you may choose different color - type its name                                

# choices for style are NoCurve,Lines,Sticks,Steps,Dots
self.pW.addPlot("DATA_SERIES_1",_style='Dots')
#self.pW.addPlot("DATA SERIES 2",_style='Steps') # you may add more than one data series

# plot MCS
self.pW.changePlotProperty("DATA_SERIES_1","LineWidth",5)
self.pW.changePlotProperty("DATA_SERIES_1","LineColor","red")     

self.pW.addGrid()
#adding automatically generated legend
# default possition is at the bottom of the plot but here we put it at the top
self.pW.addAutoLegend("top")

self.clearFlag=False

---------- #@Submenu@ Setup (start fcn) 
self.pW=CompuCellSetup.addNewPlotWindow(_title='Average Volume And Surface',_xAxisTitle='MonteCarlo Step (MCS)',_yAxisTitle='Variables')
self.pW.addPlot('MVol',_style='Dots',_color='red',_size=5)
self.pW.addPlot('MSur',_style='Steps',_size=1)
self.pW.setYAxisLogScale()   

---------- #@Submenu@ Add Data Points (step fcn)
self.pW.addDataPoint("DATA_SERIES_1",mcs,mcs*mcs) # arguments are (name of the data series, x, y)

---------- #@Submenu@ Erase Plot (step fcn)
self.pW.eraseAllData()

---------- #@Submenu@ Refresh Plots
self.pW.showAllPlots() 

---------- #@Submenu@ Add Histogram Plot (start fcn)
self.pW=CompuCellSetup.addNewPlotWindow(_title='Histogram',_xAxisTitle='TYPE NAME OF X AXIS',_yAxisTitle='TYPE NAME OF Y AXIS')
self.pW.addHistogramPlot(_plotName='Hist 1',_color='green',_alpha=100)# _alpha is transparency 0 is transparent, 255 is opaque        

---------- #@Submenu@ Add Histogram Plot (start fcn)
self.pW=CompuCellSetup.addNewPlotWindow(_title='Histogram',_xAxisTitle='TYPE NAME OF X AXIS',_yAxisTitle='TYPE NAME OF Y AXIS')
self.pW.addHistogramPlot(_plotName='Hist 1',_color='green',_alpha=100)# _alpha is transparency 0 is transparent, 255 is opaque        

---------- #@Submenu@ Generate Histogram Data (step fcn) - Example
from random import random
list_of_values=[random() for i in xrange(100)]
import numpy
(n1, bins1) = numpy.histogram(list_of_values, bins=20)  # NumPy version (no plot)

---------- #@Submenu@ Add Histogram Data To Plot (step fcn) 
self.pW.addHistPlotData('Hist 1',n1,bins1)

---------- #@Submenu@ Refresh Histogram Plots
self.pW.showAllHistPlots()

---------- #@Submenu@ Save Plot As A PNG File
self.pW.savePlotAsPNG(fileName,1000,1000) # here we specify size of the image saved (1000x1000) - default is 400 x 400

---------- #@Submenu@ Save Plot As Data (text file)
self.pW.savePlotAsData(fileName) 


        

