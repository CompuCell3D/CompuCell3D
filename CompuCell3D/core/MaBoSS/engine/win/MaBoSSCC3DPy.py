# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MaBoSSCC3DPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MaBoSSCC3DPy')
    _MaBoSSCC3DPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MaBoSSCC3DPy', [dirname(__file__)])
        except ImportError:
            import _MaBoSSCC3DPy
            return _MaBoSSCC3DPy
        try:
            _mod = imp.load_module('_MaBoSSCC3DPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MaBoSSCC3DPy = swig_import_helper()
    del swig_import_helper
else:
    import _MaBoSSCC3DPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MaBoSSCC3DPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _MaBoSSCC3DPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MaBoSSCC3DPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MaBoSSCC3DPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MaBoSSCC3DPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MaBoSSCC3DPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MaBoSSCC3DPy.SwigPyIterator_copy(self)

    def next(self):
        return _MaBoSSCC3DPy.SwigPyIterator_next(self)

    def __next__(self):
        return _MaBoSSCC3DPy.SwigPyIterator___next__(self)

    def previous(self):
        return _MaBoSSCC3DPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MaBoSSCC3DPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MaBoSSCC3DPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MaBoSSCC3DPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MaBoSSCC3DPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MaBoSSCC3DPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MaBoSSCC3DPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MaBoSSCC3DPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _MaBoSSCC3DPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class LevelManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LevelManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LevelManager, name)
    __repr__ = _swig_repr

    def __init__(self, genctx):
        this = _MaBoSSCC3DPy.new_LevelManager(genctx)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getLevel(self):
        return _MaBoSSCC3DPy.LevelManager_getLevel(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_LevelManager
    __del__ = lambda self: None
LevelManager_swigregister = _MaBoSSCC3DPy.LevelManager_swigregister
LevelManager_swigregister(LevelManager)

class ProbaIState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProbaIState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbaIState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["proba_value"] = _MaBoSSCC3DPy.ProbaIState_proba_value_set
    __swig_getmethods__["proba_value"] = _MaBoSSCC3DPy.ProbaIState_proba_value_get
    if _newclass:
        proba_value = _swig_property(_MaBoSSCC3DPy.ProbaIState_proba_value_get, _MaBoSSCC3DPy.ProbaIState_proba_value_set)
    __swig_setmethods__["state_value_list"] = _MaBoSSCC3DPy.ProbaIState_state_value_list_set
    __swig_getmethods__["state_value_list"] = _MaBoSSCC3DPy.ProbaIState_state_value_list_get
    if _newclass:
        state_value_list = _swig_property(_MaBoSSCC3DPy.ProbaIState_state_value_list_get, _MaBoSSCC3DPy.ProbaIState_state_value_list_set)

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_ProbaIState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getProbaValue(self):
        return _MaBoSSCC3DPy.ProbaIState_getProbaValue(self)

    def getStateValueList(self):
        return _MaBoSSCC3DPy.ProbaIState_getStateValueList(self)

    def normalizeProbaValue(self, proba_sum):
        return _MaBoSSCC3DPy.ProbaIState_normalizeProbaValue(self, proba_sum)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_ProbaIState
    __del__ = lambda self: None
ProbaIState_swigregister = _MaBoSSCC3DPy.ProbaIState_swigregister
ProbaIState_swigregister(ProbaIState)

class Vector_Node_Ptr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Node_Ptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Node_Ptr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___nonzero__(self)

    def __bool__(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___bool__(self)

    def __len__(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___len__(self)

    def __getslice__(self, i, j):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr___setitem__(self, *args)

    def pop(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_pop(self)

    def append(self, x):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_append(self, x)

    def empty(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_empty(self)

    def size(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_size(self)

    def swap(self, v):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_swap(self, v)

    def begin(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_begin(self)

    def end(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_end(self)

    def rbegin(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_rbegin(self)

    def rend(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_rend(self)

    def clear(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_clear(self)

    def get_allocator(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_get_allocator(self)

    def pop_back(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_pop_back(self)

    def erase(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_erase(self, *args)

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_Vector_Node_Ptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_push_back(self, x)

    def front(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_front(self)

    def back(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_back(self)

    def assign(self, n, x):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_assign(self, n, x)

    def resize(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_resize(self, *args)

    def insert(self, *args):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_insert(self, *args)

    def reserve(self, n):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_reserve(self, n)

    def capacity(self):
        return _MaBoSSCC3DPy.Vector_Node_Ptr_capacity(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Vector_Node_Ptr
    __del__ = lambda self: None
Vector_Node_Ptr_swigregister = _MaBoSSCC3DPy.Vector_Node_Ptr_swigregister
Vector_Node_Ptr_swigregister(Vector_Node_Ptr)

class Vector_Expression_Ptr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Expression_Ptr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Expression_Ptr, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___nonzero__(self)

    def __bool__(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___bool__(self)

    def __len__(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___len__(self)

    def __getslice__(self, i, j):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr___setitem__(self, *args)

    def pop(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_pop(self)

    def append(self, x):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_append(self, x)

    def empty(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_empty(self)

    def size(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_size(self)

    def swap(self, v):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_swap(self, v)

    def begin(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_begin(self)

    def end(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_end(self)

    def rbegin(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_rbegin(self)

    def rend(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_rend(self)

    def clear(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_clear(self)

    def get_allocator(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_get_allocator(self)

    def pop_back(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_pop_back(self)

    def erase(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_erase(self, *args)

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_Vector_Expression_Ptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_push_back(self, x)

    def front(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_front(self)

    def back(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_back(self)

    def assign(self, n, x):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_assign(self, n, x)

    def resize(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_resize(self, *args)

    def insert(self, *args):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_insert(self, *args)

    def reserve(self, n):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_reserve(self, n)

    def capacity(self):
        return _MaBoSSCC3DPy.Vector_Expression_Ptr_capacity(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Vector_Expression_Ptr
    __del__ = lambda self: None
Vector_Expression_Ptr_swigregister = _MaBoSSCC3DPy.Vector_Expression_Ptr_swigregister
Vector_Expression_Ptr_swigregister(Vector_Expression_Ptr)


def readonly_property_setter(prop_name: str):
    def inner(self, val):
        raise AttributeError(f'Assignment of {prop_name} is illegal')
    return inner

class LogicalExprGenContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicalExprGenContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogicalExprGenContext, name)
    __repr__ = _swig_repr

    def __init__(self, network, node, os):
        this = _MaBoSSCC3DPy.new_LogicalExprGenContext(network, node, os)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNetwork(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_getNetwork(self)

    def getOStream(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_getOStream(self)

    def getNode(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_getNode(self)

    def getLevel(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_getLevel(self)

    def incrLevel(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_incrLevel(self)

    def decrLevel(self):
        return _MaBoSSCC3DPy.LogicalExprGenContext_decrLevel(self)

    @staticmethod
    def LevelManager(genctx):
        return LevelManager(genctx)

    __swig_destroy__ = _MaBoSSCC3DPy.delete_LogicalExprGenContext
    __del__ = lambda self: None
LogicalExprGenContext_swigregister = _MaBoSSCC3DPy.LogicalExprGenContext_swigregister
LogicalExprGenContext_swigregister(LogicalExprGenContext)
cvar = _MaBoSSCC3DPy.cvar
LOGICAL_AND_SYMBOL = cvar.LOGICAL_AND_SYMBOL
LOGICAL_OR_SYMBOL = cvar.LOGICAL_OR_SYMBOL
LOGICAL_NOT_SYMBOL = cvar.LOGICAL_NOT_SYMBOL
LOGICAL_XOR_SYMBOL = cvar.LOGICAL_XOR_SYMBOL

class BNException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BNException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BNException, name)
    __repr__ = _swig_repr

    def __init__(self, msg):
        this = _MaBoSSCC3DPy.new_BNException(msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMessage(self):
        return _MaBoSSCC3DPy.BNException_getMessage(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_BNException
    __del__ = lambda self: None
BNException_swigregister = _MaBoSSCC3DPy.BNException_swigregister
BNException_swigregister(BNException)
ATTR_RATE_UP = cvar.ATTR_RATE_UP
ATTR_RATE_DOWN = cvar.ATTR_RATE_DOWN
ATTR_LOGIC = cvar.ATTR_LOGIC
ATTR_DESCRIPTION = cvar.ATTR_DESCRIPTION
INVALID_NODE_INDEX = cvar.INVALID_NODE_INDEX

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr

    def __init__(self, label, description, index):
        this = _MaBoSSCC3DPy.new_Node(label, description, index)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setIndex(self, new_index):
        return _MaBoSSCC3DPy.Node_setIndex(self, new_index)

    def getLabel(self):
        return _MaBoSSCC3DPy.Node_getLabel(self)

    def setDescription(self, description):
        return _MaBoSSCC3DPy.Node_setDescription(self, description)

    def getDescription(self):
        return _MaBoSSCC3DPy.Node_getDescription(self)

    def setLogicalInputExpression(self, logicalInputExpr):
        return _MaBoSSCC3DPy.Node_setLogicalInputExpression(self, logicalInputExpr)

    def setRateUpExpression(self, expr):
        return _MaBoSSCC3DPy.Node_setRateUpExpression(self, expr)

    def setRateDownExpression(self, expr):
        return _MaBoSSCC3DPy.Node_setRateDownExpression(self, expr)

    def getLogicalInputExpression(self):
        return _MaBoSSCC3DPy.Node_getLogicalInputExpression(self)

    def getRateUpExpression(self):
        return _MaBoSSCC3DPy.Node_getRateUpExpression(self)

    def getRateDownExpression(self):
        return _MaBoSSCC3DPy.Node_getRateDownExpression(self)

    def setAttributeExpression(self, attr_name, expr):
        return _MaBoSSCC3DPy.Node_setAttributeExpression(self, attr_name, expr)

    def mutate(self, value):
        return _MaBoSSCC3DPy.Node_mutate(self, value)

    def getIState(self, network, randgen):
        return _MaBoSSCC3DPy.Node_getIState(self, network, randgen)

    def setIState(self, istate):
        return _MaBoSSCC3DPy.Node_setIState(self, istate)

    def istateSetRandomly(self):
        return _MaBoSSCC3DPy.Node_istateSetRandomly(self)

    def isInternal(self, *args):
        return _MaBoSSCC3DPy.Node_isInternal(self, *args)

    def isReference(self):
        return _MaBoSSCC3DPy.Node_isReference(self)

    def setReference(self, is_reference):
        return _MaBoSSCC3DPy.Node_setReference(self, is_reference)

    def getReferenceState(self):
        return _MaBoSSCC3DPy.Node_getReferenceState(self)

    def setReferenceState(self, referenceState):
        return _MaBoSSCC3DPy.Node_setReferenceState(self, referenceState)

    def getAttributeExpression(self, attr_name):
        return _MaBoSSCC3DPy.Node_getAttributeExpression(self, attr_name)

    def setAttributeString(self, attr_name, str):
        return _MaBoSSCC3DPy.Node_setAttributeString(self, attr_name, str)

    def getAttributeString(self, attr_name):
        return _MaBoSSCC3DPy.Node_getAttributeString(self, attr_name)

    def getIndex(self):
        return _MaBoSSCC3DPy.Node_getIndex(self)

    def getNodeBit(self):
        return _MaBoSSCC3DPy.Node_getNodeBit(self)

    def getAttributeExpressionMap(self):
        return _MaBoSSCC3DPy.Node_getAttributeExpressionMap(self)

    def getAttributeStringMap(self):
        return _MaBoSSCC3DPy.Node_getAttributeStringMap(self)

    def isInputNode(self):
        return _MaBoSSCC3DPy.Node_isInputNode(self)

    def getRateUp(self, network_state):
        return _MaBoSSCC3DPy.Node_getRateUp(self, network_state)

    def getRateDown(self, network_state):
        return _MaBoSSCC3DPy.Node_getRateDown(self, network_state)

    def getNodeState(self, network_state):
        return _MaBoSSCC3DPy.Node_getNodeState(self, network_state)

    def setNodeState(self, network_state, state):
        return _MaBoSSCC3DPy.Node_setNodeState(self, network_state, state)

    def computeNodeState(self, network_state, node_state):
        return _MaBoSSCC3DPy.Node_computeNodeState(self, network_state, node_state)

    def toString(self):
        return _MaBoSSCC3DPy.Node_toString(self)

    def display(self, os):
        return _MaBoSSCC3DPy.Node_display(self, os)

    def generateLogicalExpression(self, gen):
        return _MaBoSSCC3DPy.Node_generateLogicalExpression(self, gen)
    if _newclass:
        setOverride = staticmethod(_MaBoSSCC3DPy.Node_setOverride)
    else:
        setOverride = _MaBoSSCC3DPy.Node_setOverride
    if _newclass:
        isOverride = staticmethod(_MaBoSSCC3DPy.Node_isOverride)
    else:
        isOverride = _MaBoSSCC3DPy.Node_isOverride
    if _newclass:
        setAugment = staticmethod(_MaBoSSCC3DPy.Node_setAugment)
    else:
        setAugment = _MaBoSSCC3DPy.Node_setAugment
    if _newclass:
        isAugment = staticmethod(_MaBoSSCC3DPy.Node_isAugment)
    else:
        isAugment = _MaBoSSCC3DPy.Node_isAugment

    def reset(self):
        return _MaBoSSCC3DPy.Node_reset(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Node
    __del__ = lambda self: None

    def __str__(self):
        return self.toString()

Node_swigregister = _MaBoSSCC3DPy.Node_swigregister
Node_swigregister(Node)

def Node_setOverride(override):
    return _MaBoSSCC3DPy.Node_setOverride(override)
Node_setOverride = _MaBoSSCC3DPy.Node_setOverride

def Node_isOverride():
    return _MaBoSSCC3DPy.Node_isOverride()
Node_isOverride = _MaBoSSCC3DPy.Node_isOverride

def Node_setAugment(augment):
    return _MaBoSSCC3DPy.Node_setAugment(augment)
Node_setAugment = _MaBoSSCC3DPy.Node_setAugment

def Node_isAugment():
    return _MaBoSSCC3DPy.Node_isAugment()
Node_isAugment = _MaBoSSCC3DPy.Node_isAugment

class Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symbol, name)
    __repr__ = _swig_repr

    def __init__(self, symb, symb_idx):
        this = _MaBoSSCC3DPy.new_Symbol(symb, symb_idx)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getName(self):
        return _MaBoSSCC3DPy.Symbol_getName(self)

    def getIndex(self):
        return _MaBoSSCC3DPy.Symbol_getIndex(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Symbol
    __del__ = lambda self: None
Symbol_swigregister = _MaBoSSCC3DPy.Symbol_swigregister
Symbol_swigregister(Symbol)

class SymbolTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MaBoSSCC3DPy.new_SymbolTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSymbol(self, symb):
        return _MaBoSSCC3DPy.SymbolTable_getSymbol(self, symb)

    def getOrMakeSymbol(self, symb):
        return _MaBoSSCC3DPy.SymbolTable_getOrMakeSymbol(self, symb)

    def getSymbolValue(self, symbol, check=True):
        return _MaBoSSCC3DPy.SymbolTable_getSymbolValue(self, symbol, check)

    def getSymbolCount(self):
        return _MaBoSSCC3DPy.SymbolTable_getSymbolCount(self)

    def setSymbolValue(self, symbol, value):
        return _MaBoSSCC3DPy.SymbolTable_setSymbolValue(self, symbol, value)

    def overrideSymbolValue(self, symbol, value):
        return _MaBoSSCC3DPy.SymbolTable_overrideSymbolValue(self, symbol, value)

    def display(self, os, check=True):
        return _MaBoSSCC3DPy.SymbolTable_display(self, os, check)

    def checkSymbols(self):
        return _MaBoSSCC3DPy.SymbolTable_checkSymbols(self)

    def getSymbolsNames(self):
        return _MaBoSSCC3DPy.SymbolTable_getSymbolsNames(self)

    def reset(self):
        return _MaBoSSCC3DPy.SymbolTable_reset(self)

    def addSymbolExpression(self, exp):
        return _MaBoSSCC3DPy.SymbolTable_addSymbolExpression(self, exp)

    def unsetSymbolExpressions(self):
        return _MaBoSSCC3DPy.SymbolTable_unsetSymbolExpressions(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_SymbolTable
    __del__ = lambda self: None
SymbolTable_swigregister = _MaBoSSCC3DPy.SymbolTable_swigregister
SymbolTable_swigregister(SymbolTable)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_Network(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def parse(self, file=None, nodes_indexes=None, is_temp_file=False):
        return _MaBoSSCC3DPy.Network_parse(self, file, nodes_indexes, is_temp_file)

    def parseExpression(self, content=None, nodes_indexes=None):
        return _MaBoSSCC3DPy.Network_parseExpression(self, content, nodes_indexes)

    def getIStateGroup(self):
        return _MaBoSSCC3DPy.Network_getIStateGroup(self)

    def cloneIStateGroup(self, _istate_group_list):
        return _MaBoSSCC3DPy.Network_cloneIStateGroup(self, _istate_group_list)

    def getSymbolTable(self):
        return _MaBoSSCC3DPy.Network_getSymbolTable(self)

    def defineNode(self, *args):
        return _MaBoSSCC3DPy.Network_defineNode(self, *args)

    def getNode(self, *args):
        return _MaBoSSCC3DPy.Network_getNode(self, *args)

    def getOrMakeNode(self, label):
        return _MaBoSSCC3DPy.Network_getOrMakeNode(self, label)

    def getNodeCount(self):
        return _MaBoSSCC3DPy.Network_getNodeCount(self)
    if _newclass:
        getMaxNodeSize = staticmethod(_MaBoSSCC3DPy.Network_getMaxNodeSize)
    else:
        getMaxNodeSize = _MaBoSSCC3DPy.Network_getMaxNodeSize

    def compile(self, nodes_indexes=None):
        return _MaBoSSCC3DPy.Network_compile(self, nodes_indexes)

    def getInputNodes(self):
        return _MaBoSSCC3DPy.Network_getInputNodes(self)

    def getNonInputNodes(self):
        return _MaBoSSCC3DPy.Network_getNonInputNodes(self)

    def getNodes(self):
        return _MaBoSSCC3DPy.Network_getNodes(self)

    def toString(self):
        return _MaBoSSCC3DPy.Network_toString(self)

    def initStates(self, initial_state, randgen):
        return _MaBoSSCC3DPy.Network_initStates(self, initial_state, randgen)

    def displayHeader(self, os):
        return _MaBoSSCC3DPy.Network_displayHeader(self, os)

    def display(self, os):
        return _MaBoSSCC3DPy.Network_display(self, os)

    def generateLogicalExpressions(self, os):
        return _MaBoSSCC3DPy.Network_generateLogicalExpressions(self, os)

    def isNodeDefined(self, identifier):
        return _MaBoSSCC3DPy.Network_isNodeDefined(self, identifier)

    def setNodeAsDefined(self, identifier):
        return _MaBoSSCC3DPy.Network_setNodeAsDefined(self, identifier)

    def resetNodeDefinition(self):
        return _MaBoSSCC3DPy.Network_resetNodeDefinition(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Network
    __del__ = lambda self: None

    __swig_getmethods__["nodes"] = getNodes
    __swig_setmethods__["nodes"] = readonly_property_setter("nodes")
    if _newclass: nodes = property(getNodes, readonly_property_setter("nodes"))


    def __str__(self):
        return self.toString()

Network_swigregister = _MaBoSSCC3DPy.Network_swigregister
Network_swigregister(Network)

def Network_getMaxNodeSize():
    return _MaBoSSCC3DPy.Network_getMaxNodeSize()
Network_getMaxNodeSize = _MaBoSSCC3DPy.Network_getMaxNodeSize

class NetworkState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkState, name)
    __repr__ = _swig_repr
    if _newclass:
        nodeBit = staticmethod(_MaBoSSCC3DPy.NetworkState_nodeBit)
    else:
        nodeBit = _MaBoSSCC3DPy.NetworkState_nodeBit

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_NetworkState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNodeState(self, node):
        return _MaBoSSCC3DPy.NetworkState_getNodeState(self, node)

    def setNodeState(self, node, node_state):
        return _MaBoSSCC3DPy.NetworkState_setNodeState(self, node, node_state)

    def flipState(self, node):
        return _MaBoSSCC3DPy.NetworkState_flipState(self, node)

    def computeNodeState(self, node, node_state):
        return _MaBoSSCC3DPy.NetworkState_computeNodeState(self, node, node_state)

    def display(self, os, network):
        return _MaBoSSCC3DPy.NetworkState_display(self, os, network)

    def getName(self, *args):
        return _MaBoSSCC3DPy.NetworkState_getName(self, *args)

    def displayOneLine(self, *args):
        return _MaBoSSCC3DPy.NetworkState_displayOneLine(self, *args)

    def hamming(self, network, state):
        return _MaBoSSCC3DPy.NetworkState_hamming(self, network, state)
    if _newclass:
        getState = staticmethod(_MaBoSSCC3DPy.NetworkState_getState)
    else:
        getState = _MaBoSSCC3DPy.NetworkState_getState
    __swig_destroy__ = _MaBoSSCC3DPy.delete_NetworkState
    __del__ = lambda self: None
NetworkState_swigregister = _MaBoSSCC3DPy.NetworkState_swigregister
NetworkState_swigregister(NetworkState)

def NetworkState_nodeBit(node_index):
    return _MaBoSSCC3DPy.NetworkState_nodeBit(node_index)
NetworkState_nodeBit = _MaBoSSCC3DPy.NetworkState_nodeBit

def NetworkState_getState(*args):
    return _MaBoSSCC3DPy.NetworkState_getState(*args)
NetworkState_getState = _MaBoSSCC3DPy.NetworkState_getState

class Expression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.Expression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.Expression_hasCycle(self, node)

    def toString(self):
        return _MaBoSSCC3DPy.Expression_toString(self)

    def clone(self):
        return _MaBoSSCC3DPy.Expression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.Expression_cloneAndShrink(self, shrinked)

    def display(self, os):
        return _MaBoSSCC3DPy.Expression_display(self, os)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.Expression_isConstantExpression(self)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.Expression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.Expression_generateLogicalExpression(self, genctx)

    def generationWillAddParenthesis(self):
        return _MaBoSSCC3DPy.Expression_generationWillAddParenthesis(self)

    def evalIfConstant(self, *args):
        return _MaBoSSCC3DPy.Expression_evalIfConstant(self, *args)
    if _newclass:
        cloneAndShrinkRecursive = staticmethod(_MaBoSSCC3DPy.Expression_cloneAndShrinkRecursive)
    else:
        cloneAndShrinkRecursive = _MaBoSSCC3DPy.Expression_cloneAndShrinkRecursive

    def asNotLogicalExpression(self):
        return _MaBoSSCC3DPy.Expression_asNotLogicalExpression(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Expression
    __del__ = lambda self: None

    def __str__(self):
        return self.toString()

Expression_swigregister = _MaBoSSCC3DPy.Expression_swigregister
Expression_swigregister(Expression)

def Expression_cloneAndShrinkRecursive(expr):
    return _MaBoSSCC3DPy.Expression_cloneAndShrinkRecursive(expr)
Expression_cloneAndShrinkRecursive = _MaBoSSCC3DPy.Expression_cloneAndShrinkRecursive

class NodeExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeExpression, name)
    __repr__ = _swig_repr

    def __init__(self, node):
        this = _MaBoSSCC3DPy.new_NodeExpression(node)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.NodeExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.NodeExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.NodeExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.NodeExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.NodeExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.NodeExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_NodeExpression
    __del__ = lambda self: None
NodeExpression_swigregister = _MaBoSSCC3DPy.NodeExpression_swigregister
NodeExpression_swigregister(NodeExpression)

class BinaryExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryExpression, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.BinaryExpression_hasCycle(self, node)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.BinaryExpression_isConstantExpression(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_BinaryExpression
    __del__ = lambda self: None
BinaryExpression_swigregister = _MaBoSSCC3DPy.BinaryExpression_swigregister
BinaryExpression_swigregister(BinaryExpression)

class MulExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MulExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MulExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_MulExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.MulExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.MulExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.MulExpression_display(self, os)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.MulExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_MulExpression
    __del__ = lambda self: None
MulExpression_swigregister = _MaBoSSCC3DPy.MulExpression_swigregister
MulExpression_swigregister(MulExpression)

class DivExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_DivExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.DivExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.DivExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.DivExpression_display(self, os)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.DivExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_DivExpression
    __del__ = lambda self: None
DivExpression_swigregister = _MaBoSSCC3DPy.DivExpression_swigregister
DivExpression_swigregister(DivExpression)

class AddExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_AddExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.AddExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.AddExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.AddExpression_display(self, os)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.AddExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_AddExpression
    __del__ = lambda self: None
AddExpression_swigregister = _MaBoSSCC3DPy.AddExpression_swigregister
AddExpression_swigregister(AddExpression)

class SubExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_SubExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.SubExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.SubExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.SubExpression_display(self, os)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.SubExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_SubExpression
    __del__ = lambda self: None
SubExpression_swigregister = _MaBoSSCC3DPy.SubExpression_swigregister
SubExpression_swigregister(SubExpression)

class EqualExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_EqualExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.EqualExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.EqualExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.EqualExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.EqualExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.EqualExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_EqualExpression
    __del__ = lambda self: None
EqualExpression_swigregister = _MaBoSSCC3DPy.EqualExpression_swigregister
EqualExpression_swigregister(EqualExpression)

class NotEqualExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotEqualExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotEqualExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_NotEqualExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.NotEqualExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.NotEqualExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.NotEqualExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.NotEqualExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.NotEqualExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_NotEqualExpression
    __del__ = lambda self: None
NotEqualExpression_swigregister = _MaBoSSCC3DPy.NotEqualExpression_swigregister
NotEqualExpression_swigregister(NotEqualExpression)

class LetterExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LetterExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LetterExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_LetterExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.LetterExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.LetterExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.LetterExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.LetterExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.LetterExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_LetterExpression
    __del__ = lambda self: None
LetterExpression_swigregister = _MaBoSSCC3DPy.LetterExpression_swigregister
LetterExpression_swigregister(LetterExpression)

class LetterOrEqualExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LetterOrEqualExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LetterOrEqualExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_LetterOrEqualExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.LetterOrEqualExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.LetterOrEqualExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.LetterOrEqualExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.LetterOrEqualExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.LetterOrEqualExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_LetterOrEqualExpression
    __del__ = lambda self: None
LetterOrEqualExpression_swigregister = _MaBoSSCC3DPy.LetterOrEqualExpression_swigregister
LetterOrEqualExpression_swigregister(LetterOrEqualExpression)

class GreaterExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GreaterExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GreaterExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_GreaterExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.GreaterExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.GreaterExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.GreaterExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.GreaterExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.GreaterExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_GreaterExpression
    __del__ = lambda self: None
GreaterExpression_swigregister = _MaBoSSCC3DPy.GreaterExpression_swigregister
GreaterExpression_swigregister(GreaterExpression)

class GreaterOrEqualExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GreaterOrEqualExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GreaterOrEqualExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_GreaterOrEqualExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.GreaterOrEqualExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.GreaterOrEqualExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.GreaterOrEqualExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.GreaterOrEqualExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.GreaterOrEqualExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_GreaterOrEqualExpression
    __del__ = lambda self: None
GreaterOrEqualExpression_swigregister = _MaBoSSCC3DPy.GreaterOrEqualExpression_swigregister
GreaterOrEqualExpression_swigregister(GreaterOrEqualExpression)

class CondExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CondExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CondExpression, name)
    __repr__ = _swig_repr

    def __init__(self, cond_expr, true_expr, false_expr):
        this = _MaBoSSCC3DPy.new_CondExpression(cond_expr, true_expr, false_expr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.CondExpression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.CondExpression_cloneAndShrink(self, shrinked)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.CondExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.CondExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.CondExpression_display(self, os)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.CondExpression_isConstantExpression(self)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.CondExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.CondExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CondExpression
    __del__ = lambda self: None
CondExpression_swigregister = _MaBoSSCC3DPy.CondExpression_swigregister
CondExpression_swigregister(CondExpression)

class ConstantExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantExpression, name)
    __repr__ = _swig_repr

    def __init__(self, value):
        this = _MaBoSSCC3DPy.new_ConstantExpression(value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.ConstantExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.ConstantExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.ConstantExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.ConstantExpression_display(self, os)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.ConstantExpression_isConstantExpression(self)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.ConstantExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.ConstantExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_ConstantExpression
    __del__ = lambda self: None
ConstantExpression_swigregister = _MaBoSSCC3DPy.ConstantExpression_swigregister
ConstantExpression_swigregister(ConstantExpression)

class SymbolExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolExpression, name)
    __repr__ = _swig_repr

    def __init__(self, symbol_table, symbol):
        this = _MaBoSSCC3DPy.new_SymbolExpression(symbol_table, symbol)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.SymbolExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.SymbolExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.SymbolExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.SymbolExpression_display(self, os)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.SymbolExpression_isConstantExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.SymbolExpression_generateLogicalExpression(self, genctx)

    def unset(self):
        return _MaBoSSCC3DPy.SymbolExpression_unset(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_SymbolExpression
    __del__ = lambda self: None
SymbolExpression_swigregister = _MaBoSSCC3DPy.SymbolExpression_swigregister
SymbolExpression_swigregister(SymbolExpression)

class AliasExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AliasExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AliasExpression, name)
    __repr__ = _swig_repr

    def __init__(self, identifier):
        this = _MaBoSSCC3DPy.new_AliasExpression(identifier)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.AliasExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.AliasExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.AliasExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.AliasExpression_display(self, os)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.AliasExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_AliasExpression
    __del__ = lambda self: None
AliasExpression_swigregister = _MaBoSSCC3DPy.AliasExpression_swigregister
AliasExpression_swigregister(AliasExpression)

class OrLogicalExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrLogicalExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrLogicalExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_OrLogicalExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.OrLogicalExpression_cloneAndShrink(self, shrinked)

    def clone(self):
        return _MaBoSSCC3DPy.OrLogicalExpression_clone(self)

    def generationWillAddParenthesis(self):
        return _MaBoSSCC3DPy.OrLogicalExpression_generationWillAddParenthesis(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.OrLogicalExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.OrLogicalExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.OrLogicalExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.OrLogicalExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_OrLogicalExpression
    __del__ = lambda self: None
OrLogicalExpression_swigregister = _MaBoSSCC3DPy.OrLogicalExpression_swigregister
OrLogicalExpression_swigregister(OrLogicalExpression)

class AndLogicalExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndLogicalExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AndLogicalExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_AndLogicalExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.AndLogicalExpression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.AndLogicalExpression_cloneAndShrink(self, shrinked)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.AndLogicalExpression_eval(self, this_node, network_state)

    def generationWillAddParenthesis(self):
        return _MaBoSSCC3DPy.AndLogicalExpression_generationWillAddParenthesis(self)

    def display(self, os):
        return _MaBoSSCC3DPy.AndLogicalExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.AndLogicalExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.AndLogicalExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_AndLogicalExpression
    __del__ = lambda self: None
AndLogicalExpression_swigregister = _MaBoSSCC3DPy.AndLogicalExpression_swigregister
AndLogicalExpression_swigregister(AndLogicalExpression)

class XorLogicalExpression(BinaryExpression):
    __swig_setmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XorLogicalExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryExpression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XorLogicalExpression, name)
    __repr__ = _swig_repr

    def __init__(self, left, right):
        this = _MaBoSSCC3DPy.new_XorLogicalExpression(left, right)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.XorLogicalExpression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.XorLogicalExpression_cloneAndShrink(self, shrinked)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.XorLogicalExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.XorLogicalExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.XorLogicalExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.XorLogicalExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_XorLogicalExpression
    __del__ = lambda self: None
XorLogicalExpression_swigregister = _MaBoSSCC3DPy.XorLogicalExpression_swigregister
XorLogicalExpression_swigregister(XorLogicalExpression)

class NotLogicalExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotLogicalExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotLogicalExpression, name)
    __repr__ = _swig_repr

    def __init__(self, expr):
        this = _MaBoSSCC3DPy.new_NotLogicalExpression(expr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.NotLogicalExpression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.NotLogicalExpression_cloneAndShrink(self, shrinked)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.NotLogicalExpression_eval(self, this_node, network_state)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.NotLogicalExpression_hasCycle(self, node)

    def asNotLogicalExpression(self):
        return _MaBoSSCC3DPy.NotLogicalExpression_asNotLogicalExpression(self)

    def display(self, os):
        return _MaBoSSCC3DPy.NotLogicalExpression_display(self, os)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.NotLogicalExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.NotLogicalExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_NotLogicalExpression
    __del__ = lambda self: None
NotLogicalExpression_swigregister = _MaBoSSCC3DPy.NotLogicalExpression_swigregister
NotLogicalExpression_swigregister(NotLogicalExpression)

class ParenthesisExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParenthesisExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParenthesisExpression, name)
    __repr__ = _swig_repr

    def __init__(self, expr):
        this = _MaBoSSCC3DPy.new_ParenthesisExpression(expr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.ParenthesisExpression_clone(self)

    def cloneAndShrink(self, shrinked):
        return _MaBoSSCC3DPy.ParenthesisExpression_cloneAndShrink(self, shrinked)

    def generationWillAddParenthesis(self):
        return _MaBoSSCC3DPy.ParenthesisExpression_generationWillAddParenthesis(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.ParenthesisExpression_eval(self, this_node, network_state)

    def asNotLogicalExpression(self):
        return _MaBoSSCC3DPy.ParenthesisExpression_asNotLogicalExpression(self)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.ParenthesisExpression_hasCycle(self, node)

    def display(self, os):
        return _MaBoSSCC3DPy.ParenthesisExpression_display(self, os)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.ParenthesisExpression_isConstantExpression(self)

    def isLogicalExpression(self):
        return _MaBoSSCC3DPy.ParenthesisExpression_isLogicalExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.ParenthesisExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_ParenthesisExpression
    __del__ = lambda self: None
ParenthesisExpression_swigregister = _MaBoSSCC3DPy.ParenthesisExpression_swigregister
ParenthesisExpression_swigregister(ParenthesisExpression)

class ArgumentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgumentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgumentList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MaBoSSCC3DPy.new_ArgumentList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, expr):
        return _MaBoSSCC3DPy.ArgumentList_push_back(self, expr)

    def clone(self):
        return _MaBoSSCC3DPy.ArgumentList_clone(self)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.ArgumentList_hasCycle(self, node)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.ArgumentList_isConstantExpression(self)

    def display(self, os):
        return _MaBoSSCC3DPy.ArgumentList_display(self, os)

    def getExpressionList(self):
        return _MaBoSSCC3DPy.ArgumentList_getExpressionList(self)

    def getExpressionListCount(self):
        return _MaBoSSCC3DPy.ArgumentList_getExpressionListCount(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_ArgumentList
    __del__ = lambda self: None
ArgumentList_swigregister = _MaBoSSCC3DPy.ArgumentList_swigregister
ArgumentList_swigregister(ArgumentList)

class FuncCallExpression(Expression):
    __swig_setmethods__ = {}
    for _s in [Expression]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncCallExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [Expression]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuncCallExpression, name)
    __repr__ = _swig_repr

    def __init__(self, funname, arg_list):
        this = _MaBoSSCC3DPy.new_FuncCallExpression(funname, arg_list)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clone(self):
        return _MaBoSSCC3DPy.FuncCallExpression_clone(self)

    def eval(self, this_node, network_state):
        return _MaBoSSCC3DPy.FuncCallExpression_eval(self, this_node, network_state)

    def display(self, os):
        return _MaBoSSCC3DPy.FuncCallExpression_display(self, os)

    def hasCycle(self, node):
        return _MaBoSSCC3DPy.FuncCallExpression_hasCycle(self, node)

    def isConstantExpression(self):
        return _MaBoSSCC3DPy.FuncCallExpression_isConstantExpression(self)

    def generateLogicalExpression(self, genctx):
        return _MaBoSSCC3DPy.FuncCallExpression_generateLogicalExpression(self, genctx)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_FuncCallExpression
    __del__ = lambda self: None
FuncCallExpression_swigregister = _MaBoSSCC3DPy.FuncCallExpression_swigregister
FuncCallExpression_swigregister(FuncCallExpression)

class IStateGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IStateGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IStateGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_IStateGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_IStateGroup
    __del__ = lambda self: None

    def getNodes(self):
        return _MaBoSSCC3DPy.IStateGroup_getNodes(self)

    def getProbaIStates(self):
        return _MaBoSSCC3DPy.IStateGroup_getProbaIStates(self)

    def getProbaSum(self):
        return _MaBoSSCC3DPy.IStateGroup_getProbaSum(self)

    def isRandom(self):
        return _MaBoSSCC3DPy.IStateGroup_isRandom(self)

    def hasNode(self, node):
        return _MaBoSSCC3DPy.IStateGroup_hasNode(self, node)
    if _newclass:
        checkAndComplete = staticmethod(_MaBoSSCC3DPy.IStateGroup_checkAndComplete)
    else:
        checkAndComplete = _MaBoSSCC3DPy.IStateGroup_checkAndComplete
    if _newclass:
        initStates = staticmethod(_MaBoSSCC3DPy.IStateGroup_initStates)
    else:
        initStates = _MaBoSSCC3DPy.IStateGroup_initStates
    if _newclass:
        display = staticmethod(_MaBoSSCC3DPy.IStateGroup_display)
    else:
        display = _MaBoSSCC3DPy.IStateGroup_display
    if _newclass:
        reset = staticmethod(_MaBoSSCC3DPy.IStateGroup_reset)
    else:
        reset = _MaBoSSCC3DPy.IStateGroup_reset
    if _newclass:
        setNodeProba = staticmethod(_MaBoSSCC3DPy.IStateGroup_setNodeProba)
    else:
        setNodeProba = _MaBoSSCC3DPy.IStateGroup_setNodeProba
    if _newclass:
        setInitialState = staticmethod(_MaBoSSCC3DPy.IStateGroup_setInitialState)
    else:
        setInitialState = _MaBoSSCC3DPy.IStateGroup_setInitialState

    @staticmethod
    def ProbaIState(proba_expr: Expression, state_expr_list: Vector_Expression_Ptr):
        return ProbaIState(proba_expr, state_expr_list)

IStateGroup_swigregister = _MaBoSSCC3DPy.IStateGroup_swigregister
IStateGroup_swigregister(IStateGroup)

def IStateGroup_checkAndComplete(network):
    return _MaBoSSCC3DPy.IStateGroup_checkAndComplete(network)
IStateGroup_checkAndComplete = _MaBoSSCC3DPy.IStateGroup_checkAndComplete

def IStateGroup_initStates(network, initial_state, randgen):
    return _MaBoSSCC3DPy.IStateGroup_initStates(network, initial_state, randgen)
IStateGroup_initStates = _MaBoSSCC3DPy.IStateGroup_initStates

def IStateGroup_display(network, os):
    return _MaBoSSCC3DPy.IStateGroup_display(network, os)
IStateGroup_display = _MaBoSSCC3DPy.IStateGroup_display

def IStateGroup_reset(network):
    return _MaBoSSCC3DPy.IStateGroup_reset(network)
IStateGroup_reset = _MaBoSSCC3DPy.IStateGroup_reset

def IStateGroup_setNodeProba(network, node, value):
    return _MaBoSSCC3DPy.IStateGroup_setNodeProba(network, node, value)
IStateGroup_setNodeProba = _MaBoSSCC3DPy.IStateGroup_setNodeProba

def IStateGroup_setInitialState(network, state):
    return _MaBoSSCC3DPy.IStateGroup_setInitialState(network, state)
IStateGroup_setInitialState = _MaBoSSCC3DPy.IStateGroup_setInitialState


def setConfigVariables(*args):
    return _MaBoSSCC3DPy.setConfigVariables(*args)
setConfigVariables = _MaBoSSCC3DPy.setConfigVariables
class RandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomGenerator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        resetGeneratedNumberCount = staticmethod(_MaBoSSCC3DPy.RandomGenerator_resetGeneratedNumberCount)
    else:
        resetGeneratedNumberCount = _MaBoSSCC3DPy.RandomGenerator_resetGeneratedNumberCount

    def getName(self):
        return _MaBoSSCC3DPy.RandomGenerator_getName(self)

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.RandomGenerator_isPseudoRandom(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.RandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.RandomGenerator_generate(self)

    def setSeed(self, seed):
        return _MaBoSSCC3DPy.RandomGenerator_setSeed(self, seed)
    if _newclass:
        getGeneratedNumberCount = staticmethod(_MaBoSSCC3DPy.RandomGenerator_getGeneratedNumberCount)
    else:
        getGeneratedNumberCount = _MaBoSSCC3DPy.RandomGenerator_getGeneratedNumberCount
    __swig_destroy__ = _MaBoSSCC3DPy.delete_RandomGenerator
    __del__ = lambda self: None
RandomGenerator_swigregister = _MaBoSSCC3DPy.RandomGenerator_swigregister
RandomGenerator_swigregister(RandomGenerator)
backward_istate = cvar.backward_istate

def RandomGenerator_resetGeneratedNumberCount():
    return _MaBoSSCC3DPy.RandomGenerator_resetGeneratedNumberCount()
RandomGenerator_resetGeneratedNumberCount = _MaBoSSCC3DPy.RandomGenerator_resetGeneratedNumberCount

def RandomGenerator_getGeneratedNumberCount():
    return _MaBoSSCC3DPy.RandomGenerator_getGeneratedNumberCount()
RandomGenerator_getGeneratedNumberCount = _MaBoSSCC3DPy.RandomGenerator_getGeneratedNumberCount

class PhysicalRandomGenerator(RandomGenerator):
    __swig_setmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhysicalRandomGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicalRandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MaBoSSCC3DPy.new_PhysicalRandomGenerator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.PhysicalRandomGenerator_isPseudoRandom(self)

    def getName(self):
        return _MaBoSSCC3DPy.PhysicalRandomGenerator_getName(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.PhysicalRandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.PhysicalRandomGenerator_generate(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_PhysicalRandomGenerator
    __del__ = lambda self: None
PhysicalRandomGenerator_swigregister = _MaBoSSCC3DPy.PhysicalRandomGenerator_swigregister
PhysicalRandomGenerator_swigregister(PhysicalRandomGenerator)

class Rand48RandomGenerator(RandomGenerator):
    __swig_setmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rand48RandomGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rand48RandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _MaBoSSCC3DPy.new_Rand48RandomGenerator(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_isPseudoRandom(self)

    def getName(self):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_getName(self)

    def next(self):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_next(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_generate(self)

    def setSeed(self, seed):
        return _MaBoSSCC3DPy.Rand48RandomGenerator_setSeed(self, seed)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_Rand48RandomGenerator
    __del__ = lambda self: None
Rand48RandomGenerator_swigregister = _MaBoSSCC3DPy.Rand48RandomGenerator_swigregister
Rand48RandomGenerator_swigregister(Rand48RandomGenerator)

class GLibCRandomGenerator(RandomGenerator):
    __swig_setmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLibCRandomGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLibCRandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _MaBoSSCC3DPy.new_GLibCRandomGenerator(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.GLibCRandomGenerator_isPseudoRandom(self)

    def getName(self):
        return _MaBoSSCC3DPy.GLibCRandomGenerator_getName(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.GLibCRandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.GLibCRandomGenerator_generate(self)

    def setSeed(self, seed):
        return _MaBoSSCC3DPy.GLibCRandomGenerator_setSeed(self, seed)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_GLibCRandomGenerator
    __del__ = lambda self: None
GLibCRandomGenerator_swigregister = _MaBoSSCC3DPy.GLibCRandomGenerator_swigregister
GLibCRandomGenerator_swigregister(GLibCRandomGenerator)

class MT19937RandomGenerator(RandomGenerator):
    __swig_setmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MT19937RandomGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [RandomGenerator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MT19937RandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, seed):
        this = _MaBoSSCC3DPy.new_MT19937RandomGenerator(seed)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.MT19937RandomGenerator_isPseudoRandom(self)

    def getName(self):
        return _MaBoSSCC3DPy.MT19937RandomGenerator_getName(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.MT19937RandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.MT19937RandomGenerator_generate(self)

    def setSeed(self, seed):
        return _MaBoSSCC3DPy.MT19937RandomGenerator_setSeed(self, seed)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_MT19937RandomGenerator
    __del__ = lambda self: None
MT19937RandomGenerator_swigregister = _MaBoSSCC3DPy.MT19937RandomGenerator_swigregister
MT19937RandomGenerator_swigregister(MT19937RandomGenerator)

class RandomGeneratorFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomGeneratorFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomGeneratorFactory, name)
    __repr__ = _swig_repr
    DEFAULT = _MaBoSSCC3DPy.RandomGeneratorFactory_DEFAULT
    GLIBC = _MaBoSSCC3DPy.RandomGeneratorFactory_GLIBC
    MERSENNE_TWISTER = _MaBoSSCC3DPy.RandomGeneratorFactory_MERSENNE_TWISTER
    PHYSICAL = _MaBoSSCC3DPy.RandomGeneratorFactory_PHYSICAL

    def __init__(self, type):
        this = _MaBoSSCC3DPy.new_RandomGeneratorFactory(type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def generateRandomGenerator(self, seed=1):
        return _MaBoSSCC3DPy.RandomGeneratorFactory_generateRandomGenerator(self, seed)

    def getName(self):
        return _MaBoSSCC3DPy.RandomGeneratorFactory_getName(self)

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.RandomGeneratorFactory_isPseudoRandom(self)

    def isThreadSafe(self):
        return _MaBoSSCC3DPy.RandomGeneratorFactory_isThreadSafe(self)
    __swig_destroy__ = _MaBoSSCC3DPy.delete_RandomGeneratorFactory
    __del__ = lambda self: None
RandomGeneratorFactory_swigregister = _MaBoSSCC3DPy.RandomGeneratorFactory_swigregister
RandomGeneratorFactory_swigregister(RandomGeneratorFactory)

class RunConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunConfig, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _MaBoSSCC3DPy.new_RunConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_RunConfig
    __del__ = lambda self: None

    def parse(self, network, file=None):
        return _MaBoSSCC3DPy.RunConfig_parse(self, network, file)

    def parseExpression(self, network, expr):
        return _MaBoSSCC3DPy.RunConfig_parseExpression(self, network, expr)

    def setParameter(self, param, value):
        return _MaBoSSCC3DPy.RunConfig_setParameter(self, param, value)

    def getRandomGeneratorFactory(self):
        return _MaBoSSCC3DPy.RunConfig_getRandomGeneratorFactory(self)

    def getTimeTick(self):
        return _MaBoSSCC3DPy.RunConfig_getTimeTick(self)

    def getMaxTime(self):
        return _MaBoSSCC3DPy.RunConfig_getMaxTime(self)

    def getSampleCount(self):
        return _MaBoSSCC3DPy.RunConfig_getSampleCount(self)

    def isDiscreteTime(self):
        return _MaBoSSCC3DPy.RunConfig_isDiscreteTime(self)

    def getSeedPseudoRandom(self):
        return _MaBoSSCC3DPy.RunConfig_getSeedPseudoRandom(self)

    def setSeedPseudoRandom(self, seed):
        return _MaBoSSCC3DPy.RunConfig_setSeedPseudoRandom(self, seed)

    def display(self, *args):
        return _MaBoSSCC3DPy.RunConfig_display(self, *args)

    def displayTrajectories(self):
        return _MaBoSSCC3DPy.RunConfig_displayTrajectories(self)

    def getThreadCount(self):
        return _MaBoSSCC3DPy.RunConfig_getThreadCount(self)

    def getStatDistTrajCount(self):
        return _MaBoSSCC3DPy.RunConfig_getStatDistTrajCount(self)

    def getStatdistClusterThreshold(self):
        return _MaBoSSCC3DPy.RunConfig_getStatdistClusterThreshold(self)

    def getStatDistSimilarityCacheMaxSize(self):
        return _MaBoSSCC3DPy.RunConfig_getStatDistSimilarityCacheMaxSize(self)

    def generateTemplate(self, network, os):
        return _MaBoSSCC3DPy.RunConfig_generateTemplate(self, network, os)

    def dump(self, network, os):
        return _MaBoSSCC3DPy.RunConfig_dump(self, network, os)
RunConfig_swigregister = _MaBoSSCC3DPy.RunConfig_swigregister
RunConfig_swigregister(RunConfig)


def RC_scan_expression(arg1):
    return _MaBoSSCC3DPy.RC_scan_expression(arg1)
RC_scan_expression = _MaBoSSCC3DPy.RC_scan_expression

def runconfig_setConfig(config):
    return _MaBoSSCC3DPy.runconfig_setConfig(config)
runconfig_setConfig = _MaBoSSCC3DPy.runconfig_setConfig
class CC3DRandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DRandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DRandomGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_CC3DRandomGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CC3DRandomGenerator
    __del__ = lambda self: None

    def getName(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_getName(self)

    def isPseudoRandom(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_isPseudoRandom(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_generate(self)

    def setSeed(self, _seed):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_setSeed(self, _seed)

    def getSeed(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_getSeed(self)

    def getRandomGenerator(self):
        return _MaBoSSCC3DPy.CC3DRandomGenerator_getRandomGenerator(self)
CC3DRandomGenerator_swigregister = _MaBoSSCC3DPy.CC3DRandomGenerator_swigregister
CC3DRandomGenerator_swigregister(CC3DRandomGenerator)

class CC3DRunConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DRunConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DRunConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_CC3DRunConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CC3DRunConfig
    __del__ = lambda self: None

    def getRandomGenerator(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_getRandomGenerator(self)

    def getTimeTick(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_getTimeTick(self)

    def setTimeTick(self, time_tick):
        return _MaBoSSCC3DPy.CC3DRunConfig_setTimeTick(self, time_tick)

    def getSampleCount(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_getSampleCount(self)

    def setSampleCount(self, sample_count):
        return _MaBoSSCC3DPy.CC3DRunConfig_setSampleCount(self, sample_count)

    def getDiscreteTime(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_getDiscreteTime(self)

    def setDiscreteTime(self, discrete_time):
        return _MaBoSSCC3DPy.CC3DRunConfig_setDiscreteTime(self, discrete_time)

    def setSeed(self, seed):
        return _MaBoSSCC3DPy.CC3DRunConfig_setSeed(self, seed)

    def getSeed(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_getSeed(self)

    def generateUInt32(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_generateUInt32(self)

    def generate(self):
        return _MaBoSSCC3DPy.CC3DRunConfig_generate(self)

    def parse(self, network, file=None):
        return _MaBoSSCC3DPy.CC3DRunConfig_parse(self, network, file)

    def parseExpression(self, network, expr):
        return _MaBoSSCC3DPy.CC3DRunConfig_parseExpression(self, network, expr)

    __swig_getmethods__["sample_count"] = getSampleCount
    __swig_setmethods__["sample_count"] = setSampleCount
    if _newclass: sample_count = property(getSampleCount, setSampleCount)


    __swig_getmethods__["seed"] = getSeed
    __swig_setmethods__["seed"] = setSeed
    if _newclass: seed = property(getSeed, setSeed)


    __swig_getmethods__["time_tick"] = getTimeTick
    __swig_setmethods__["time_tick"] = setTimeTick
    if _newclass: time_tick = property(getTimeTick, setTimeTick)

CC3DRunConfig_swigregister = _MaBoSSCC3DPy.CC3DRunConfig_swigregister
CC3DRunConfig_swigregister(CC3DRunConfig)

class CC3DMaBoSSNodeAttributeAccessorPy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DMaBoSSNodeAttributeAccessorPy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DMaBoSSNodeAttributeAccessorPy, name)
    __repr__ = _swig_repr

    def __init__(self, _node, _attr_name):
        this = _MaBoSSCC3DPy.new_CC3DMaBoSSNodeAttributeAccessorPy(_node, _attr_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CC3DMaBoSSNodeAttributeAccessorPy
    __del__ = lambda self: None

    def getExpression(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy_getExpression(self)

    def setExpression(self, expr):
        return _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy_setExpression(self, expr)

    def getString(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy_getString(self)

    def setString(self, str):
        return _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy_setString(self, str)

    def __str__(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy___str__(self)

    __swig_getmethods__["attr_expression"] = getExpression
    __swig_setmethods__["attr_expression"] = setExpression
    if _newclass: attr_expression = property(getExpression, setExpression)


    __swig_getmethods__["attr_string"] = getString
    __swig_setmethods__["attr_string"] = setString
    if _newclass: attr_string = property(getString, setString)

CC3DMaBoSSNodeAttributeAccessorPy_swigregister = _MaBoSSCC3DPy.CC3DMaBoSSNodeAttributeAccessorPy_swigregister
CC3DMaBoSSNodeAttributeAccessorPy_swigregister(CC3DMaBoSSNodeAttributeAccessorPy)

class CC3DMaBoSSNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DMaBoSSNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DMaBoSSNode, name)
    __repr__ = _swig_repr

    def __init__(self, _node, _network, _networkState, _randGen):
        this = _MaBoSSCC3DPy.new_CC3DMaBoSSNode(_node, _network, _networkState, _randGen)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CC3DMaBoSSNode
    __del__ = lambda self: None

    def getLabel(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getLabel(self)

    def setDescription(self, description):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setDescription(self, description)

    def getDescription(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getDescription(self)

    def setLogicalInputExpression(self, logicalInputExpr):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setLogicalInputExpression(self, logicalInputExpr)

    def setRateUpExpression(self, expr):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setRateUpExpression(self, expr)

    def setRateDownExpression(self, expr):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setRateDownExpression(self, expr)

    def getLogicalInputExpression(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getLogicalInputExpression(self)

    def getRateUpExpression(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getRateUpExpression(self)

    def getRateDownExpression(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getRateDownExpression(self)

    def setAttributeExpression(self, attr_name, expr):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setAttributeExpression(self, attr_name, expr)

    def getIState(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getIState(self)

    def setIState(self, istate):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setIState(self, istate)

    def istateSetRandomly(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_istateSetRandomly(self)

    def isInternal(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_isInternal(self)

    def setInternal(self, is_internal):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setInternal(self, is_internal)

    def isReference(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_isReference(self)

    def setReference(self, is_reference):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setReference(self, is_reference)

    def getReferenceState(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getReferenceState(self)

    def setReferenceState(self, referenceState):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setReferenceState(self, referenceState)

    def getAttributeExpression(self, attr_name):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getAttributeExpression(self, attr_name)

    def setAttributeString(self, attr_name, str):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setAttributeString(self, attr_name, str)

    def getAttributeString(self, attr_name):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getAttributeString(self, attr_name)

    def isInputNode(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_isInputNode(self)

    def getRateUp(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getRateUp(self)

    def getRateDown(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getRateDown(self)

    def getNodeState(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_getNodeState(self)

    def setNodeState(self, state):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_setNodeState(self, state)

    def computeNodeState(self, state):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_computeNodeState(self, state)

    def toString(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode_toString(self)

    def __getitem__(self, key):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode___getitem__(self, key)

    def __str__(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSNode___str__(self)

    __swig_getmethods__["description"] = getDescription
    __swig_setmethods__["description"] = setDescription
    if _newclass: description = property(getDescription, setDescription)


    __swig_getmethods__["is_input"] = isInputNode
    __swig_setmethods__["is_input"] = readonly_property_setter("is_input")
    if _newclass: is_input = property(isInputNode, readonly_property_setter("is_input"))


    __swig_getmethods__["is_internal"] = isInternal
    __swig_setmethods__["is_internal"] = setInternal
    if _newclass: is_internal = property(isInternal, setInternal)


    __swig_getmethods__["is_reference"] = isReference
    __swig_setmethods__["is_reference"] = setReference
    if _newclass: is_reference = property(isReference, setReference)


    __swig_getmethods__["istate"] = getIState
    __swig_setmethods__["istate"] = setIState
    if _newclass: istate = property(getIState, setIState)


    __swig_getmethods__["logical_input_expr"] = getLogicalInputExpression
    __swig_setmethods__["logical_input_expr"] = setLogicalInputExpression
    if _newclass: logical_input_expr = property(getLogicalInputExpression, setLogicalInputExpression)


    __swig_getmethods__["rate_down"] = getRateDown
    __swig_setmethods__["rate_down"] = readonly_property_setter("rate_down")
    if _newclass: rate_down = property(getRateDown, readonly_property_setter("rate_down"))


    __swig_getmethods__["rate_down_expr"] = getRateDownExpression
    __swig_setmethods__["rate_down_expr"] = setRateDownExpression
    if _newclass: rate_down_expr = property(getRateDownExpression, setRateDownExpression)


    __swig_getmethods__["rate_up"] = getRateUp
    __swig_setmethods__["rate_up"] = readonly_property_setter("rate_up")
    if _newclass: rate_up = property(getRateUp, readonly_property_setter("rate_up"))


    __swig_getmethods__["rate_up_expr"] = getRateUpExpression
    __swig_setmethods__["rate_up_expr"] = setRateUpExpression
    if _newclass: rate_up_expr = property(getRateUpExpression, setRateUpExpression)


    __swig_getmethods__["ref_state"] = getReferenceState
    __swig_setmethods__["ref_state"] = setReferenceState
    if _newclass: ref_state = property(getReferenceState, setReferenceState)


    __swig_getmethods__["state"] = getNodeState
    __swig_setmethods__["state"] = setNodeState
    if _newclass: state = property(getNodeState, setNodeState)


    def __str__(self):
        return self.toString()

CC3DMaBoSSNode_swigregister = _MaBoSSCC3DPy.CC3DMaBoSSNode_swigregister
CC3DMaBoSSNode_swigregister(CC3DMaBoSSNode)

class CC3DMaBoSSEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC3DMaBoSSEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CC3DMaBoSSEngine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _MaBoSSCC3DPy.new_CC3DMaBoSSEngine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MaBoSSCC3DPy.delete_CC3DMaBoSSEngine
    __del__ = lambda self: None

    def step(self, _stepSize=-1.):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_step(self, _stepSize)

    def loadNetworkState(self, _networkState):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_loadNetworkState(self, _networkState)

    def getTime(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_getTime(self)

    def getNetwork(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_getNetwork(self)

    def getRunConfig(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_getRunConfig(self)

    def getNode(self, label):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_getNode(self, label)

    def __getitem__(self, key):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine___getitem__(self, key)

    def __setitem__(self, key, value):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine___setitem__(self, key, value)

    def copy(self):
        return _MaBoSSCC3DPy.CC3DMaBoSSEngine_copy(self)

    __swig_getmethods__["run_config"] = getRunConfig
    __swig_setmethods__["run_config"] = readonly_property_setter("run_config")
    if _newclass: run_config = property(getRunConfig, readonly_property_setter("run_config"))


    __swig_getmethods__["network"] = getNetwork
    __swig_setmethods__["network"] = readonly_property_setter("network")
    if _newclass: network = property(getNetwork, readonly_property_setter("network"))


    __swig_getmethods__["time"] = getTime
    __swig_setmethods__["time"] = readonly_property_setter("time")
    if _newclass: time = property(getTime, readonly_property_setter("time"))

CC3DMaBoSSEngine_swigregister = _MaBoSSCC3DPy.CC3DMaBoSSEngine_swigregister
CC3DMaBoSSEngine_swigregister(CC3DMaBoSSEngine)

# This file is compatible with both classic and new-style classes.


