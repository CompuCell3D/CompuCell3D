#include "GraphicsBase.h"
#include <qpainter.h>
#include <qlabel.h>
#include <qpixmap.h>
#include <qpainter.h>
#include <qpen.h>

#include <cmath>

#include <iostream>


using namespace std;

GraphicsBase::GraphicsBase()
{
   legendWidth = 10;
   silentMode=false;
   currentConcentrationFieldPtr=0;
   graphFieldsPtr=0;
   univGraphSetPtr=0;     
   maxConcentrationToggled=false;
   latticeType=CompuCell3D::SQUARE_LATTICE;
   
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GraphicsBase::~GraphicsBase(){


}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float GraphicsBase::percentageQuantity(float _mag, float _min, float _max){
   float ratio=(_mag - _min)/(_max-_min);
  
   return  (ratio> 1.0 ? 1.0: ratio) ;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::fillFakeConcentration(){}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GraphicsBase::paintConcentrationLattice(){
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::paintLegend(float minConcentration, float maxConcentration,std::string location,std::string type){
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int GraphicsBase::legendDimension(std::string location, unsigned int &rectWidth,unsigned int & rectHeight,std::string type){
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::drawCurrentScene(){
   (this->*paintingFcnPtr)();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::paintLattice(){

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GraphicsBase::doContourLines(){
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::produceImage(QImage & image){

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GraphicsBase::paintingFcnPtr_t GraphicsBase::getCurrentPainitgFcnPtr(){
   return paintingFcnPtr;

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void GraphicsBase::setCurrentPainitgFcnPtr(GraphicsBase::paintingFcnPtr_t _paintingFcnPtr){
   paintingFcnPtr=_paintingFcnPtr;

}
