# -*- coding: utf-8 -*-
import os
import types

from PyQt4.QtCore import *
from PyQt4.QtGui import *
#from Messaging import stdMsg, dbgMsg,pd, errMsg, setDebugging

import Configuration
#import ConfigurationPageBase
from ConfigurationPageBase import ConfigurationPageBase

import ui_configurationdlg  # the file generated by 'pyuic4' using the .ui Designer file

MAC = "qt_mac_set_native_menubar" in dir()

MODULENAME = '------- ConfigurationDialog.py: '


class ConfigurationDialog(QDialog, ui_configurationdlg.Ui_CC3DPrefs, ConfigurationPageBase):
   
    def __init__(self, parent = None, name = None, modal = False):
        QDialog.__init__(self, parent)
        self.setModal(modal)
        
#        self.config = Configuration()
        
        self.paramCC3D = {}   #  dict for ALL parameters on CC3D Preferences dialog
        self.initParams()  # read params from QSession file
        
        self.setupUi(self)   # in ui_configurationdlg.Ui_CC3DPrefs
        
        # for now, let's disable these guys until we want to handle them.  But can still do: compucell3d.sh --prefs=myprefs
        self.prefsFileLineEdit.setEnabled(False)
        self.prefsFileButton.setEnabled(False)
  
#        if not MAC:
#            self.cancelButton.setFocusPolicy(Qt.NoFocus)
#        self.updateUi()

        # ------- the following 'connect' method basically establish callback methods -----------
#        self.tabWidget.currentChanged.connect(currentChanged)
#        self.connect(self.tabWidget,   SIGNAL("currentChanged()"),       self.currentChanged)
        self.tabWidget.currentChanged.connect(self.currentTabChanged)
        
        # Output tab
        self.outputImagesCheckBox.clicked.connect(self.outputImagesClicked)
        self.outputLatticeDataCheckBox.clicked.connect(self.outputLatticeDataClicked)
        self.outputToProjectCheckBox.clicked.connect(self.outputToProjectClicked)
        
        # Cell Type/Colors tab
        self.typeColorTable.clicked.connect(self.typeColorTableClicked)
        
        self.cellBorderColorButton.clicked.connect(self.cellBorderColorClicked)
        self.clusterBorderColorButton.clicked.connect(self.clusterBorderColorClicked)
        self.contourColorButton.clicked.connect(self.contourColorClicked)
#        self.windowColorButton.clicked.connect(self.windowColorClicked)
        
        cellGlyphScaleValid = QDoubleValidator(self.cellGlyphScale)
        self.cellGlyphScale.setValidator(cellGlyphScaleValid)
        
        # Field tab (handles both scalar and vector fields)
        # The following will constrain the input to be valid (double) numeric values
#        self.fieldComboBox.activated.connect(self.fieldComboBoxClicked)
        self.fieldComboBox.currentIndexChanged.connect(self.fieldComboBoxClicked)
        self.lastSelectedField = -1
        
        fieldMinValid = QDoubleValidator(self.fieldMinRange)
        self.fieldMinRange.setValidator(fieldMinValid)
        fieldMaxValid = QDoubleValidator(self.fieldMaxRange)
        self.fieldMaxRange.setValidator(fieldMaxValid)
        
        self.fieldMinRangeFixedCheckBox.clicked.connect(self.fieldMinRangeClicked)
        self.fieldMaxRangeFixedCheckBox.clicked.connect(self.fieldMaxRangeClicked)
        
#        minVecValid = QDoubleValidator(self.vectorsMinMag)
#        self.vectorsMinMag.setValidator(minVecValid)
#        maxVecValid = QDoubleValidator(self.vectorsMaxMag)
#        self.vectorsMaxMag.setValidator(maxVecValid)
        
        self.vectorsArrowColorCheckBox.clicked.connect(self.vectorsArrowColorClicked)
        self.vectorsArrowColorButton.clicked.connect(self.vectorsArrowColorButtonClicked)
        
#        self.connect(self.buttonBox,   SIGNAL("accepted()"),       self.accept)  # done implicitly
#        self.connect(self.buttonBox,   SIGNAL("rejected()"),       self.reject)  # done implicitly
#        self.connect(self.buttonBox,   SIGNAL("clicked()"),       self.buttonClicked)    # doesn't work
        self.buttonBox.clicked.connect(self.buttonBoxClicked)


#        self.connect(self.configWidget.buttonBox,   SIGNAL("rejected()"),       self.reject)
#        self.connect(self.configWidget,             SIGNAL('configsChanged'),   self.__configsChanged)
        self.updateUI()
        
#        self.connect(self.tabWidget,   SIGNAL("currentChanged()"),       self.tabChanged)
        

#    @pyqtSignature("")
#    def on_borderColorButton_clicked(self):
#        print MODULENAME,'  on_borderColorButton_clicked'
        
#    @tabWidget.currentChanged.connect

    #----------- following methods are callbacks from the above "connect"s  ------------
    def currentTabChanged(self):
#        print MODULENAME,' ------ tab changed()'
#        print '      tab currentIndex =',self.tabWidget.currentIndex()
        Configuration.setSetting("TabIndex", self.tabWidget.currentIndex())
        if (self.tabWidget.currentIndex() == 2):
            if self.lastSelectedField >= 0: 
                self.fieldComboBox.setCurrentIndex(self.lastSelectedField)
    
    # -------- Output widgets CBs
    def outputImagesClicked(self):
        if self.outputImagesCheckBox.isChecked():
            self.saveImageSpinBox.setEnabled(True)
            
        else:
            self.saveImageSpinBox.setEnabled(False)
            
            
    def outputLatticeDataClicked(self):
        if self.outputLatticeDataCheckBox.isChecked():
            self.saveLatticeSpinBox.setEnabled(True)
            
        else:
            self.saveLatticeSpinBox.setEnabled(False)
            
    def outputToProjectClicked(self):
        if self.outputToProjectCheckBox.isChecked():
            self.outputLocationLineEdit.setEnabled(False)
            self.outputLocationButton.setEnabled(False)
        else:
            self.outputLocationLineEdit.setEnabled(True)
            self.outputLocationButton.setEnabled(True)
            
        
    # -------- Cell Type (colors) widgets CBs
    def typeColorTableClicked(self):
#        print MODULENAME,"    typeColorTableClicked"
        row = self.typeColorTable.currentRow()
        col = self.typeColorTable.currentColumn()
#        print "  current row,col=",row,col
        self.typeColorTable.setCurrentCell(row,0)  # highlight the left column cell (cell #), not cell w/ the color
        item = self.typeColorTable.item(row,1)
#        if row == 0 or col == 0: return  # ECM is special; only proceed with color dialog/selection if user chose color column
        keys = self.paramCC3D["TypeColorMap"].keys()
        print 'keys= ',keys
#            item = QTableWidgetItem()
        
#            item.setBackground(QBrush(self.paramCC3D["TypeColorMap"][keys[row]]))
#            self.typeColorTable.setItem(row, 1, item)
#            cellColor = QColor(Qt.yellow)
        cellColor = self.paramCC3D["TypeColorMap"][keys[row]]
        color = QColorDialog.getColor(cellColor)
        if color.isValid():
#            print 'color= ',color
#            print 'rgb= ',color.red(),color.green(),color.blue()
            self.paramCC3D["TypeColorMap"][keys[row]] = color
#            Configuration.setSetting("TypeColorMap",self.paramCC3D["TypeColorMap"])  # is this necessary yet?
            item.setBackground(QBrush(color))
#            self.populateCellColors()
            
         
#         color = self.selectColor(self.clusterBorderColorButton, Configuration.getSetting("ClusterBorderColor"))
#         print '      typeColorTableClicked: color=',color.red(),color.green(),color.blue()
        
    def updateColorButton(self, btn, name):
        color = self.selectColor(btn, Configuration.getSetting(name))
#        print '      updateColorButton: color=',color.red(),color.green(),color.blue()
        # which of the following is necessary at this point?
        Configuration.setSetting(name, color)
        self.paramCC3D[name] = color
        
    def cellBorderColorClicked(self):
#        dbgMsg(MODULENAME,' ------ cellBorderColorClicked()')  # why isn't my 'print' printing?!
        self.updateColorButton(self.cellBorderColorButton, "BorderColor")
#        color = self.selectColor(self.cellBorderColorButton, Configuration.getSetting("BorderColor"))
#        print '      color=',color
#        Configuration.setSetting("BorderColor", color)
        
    def clusterBorderColorClicked(self):
#        print MODULENAME,' ------ clusterBorderColorClicked()'
        self.updateColorButton(self.clusterBorderColorButton, "ClusterBorderColor")
#        color = self.selectColor(self.clusterBorderColorButton, Configuration.getSetting("ClusterBorderColor"))
#        print '      color=',color
#        Configuration.setSetting("ClusterBorderColor", color)
        
    def contourColorClicked(self):
#        print MODULENAME,' ------ countourColorClicked()'
        self.updateColorButton(self.contourColorButton, "ContourColor")
#        color = self.selectColor(self.contourColorButton, Configuration.getSetting("ContourColor"))
#        print '      color=',color
#        Configuration.setSetting("ContourColor", color)

    def windowColorClicked(self):
        self.updateColorButton(self.windowColorButton, "WindowColor")


    # -------- Field widgets CBs  (was both Colormap and Vector tabs, now combined in Field tab)
    def fieldComboBoxClicked(self):
        fname = self.fieldComboBox.currentText()
        
        fieldIndex = self.fieldComboBox.currentIndex()
        Configuration.setSetting("FieldIndex", fieldIndex)
        self.lastSelectedField = fieldIndex
#        print MODULENAME,' fieldComboBoxClicked():  fieldIndex (=lastSelectedField)=',fieldIndex
#        print '=================================='
#        print MODULENAME,' fieldComboBoxClicked():  fname=',fname
#        print MODULENAME,' fieldComboBoxClicked():  type(fname)=',type(fname)   # <class 'PyQt4.QtCore.QString'>
#        print MODULENAME,' fieldComboBoxClicked():  str(fname)=',str(fname)
#        print MODULENAME,' fieldComboBoxClicked():  type(str(fname))=',type(str(fname))   # 
        
        allFieldsDict = Configuration.getSimFieldsParams()
#        print MODULENAME, 'fieldComboBoxClicked():  allFieldsDict = ',allFieldsDict
#        if len(allFieldsDict) == 0:
#            print 
#            print MODULENAME, '-------------------------'
#            print MODULENAME, 'fieldComboBoxClicked():  WARNING   empty allFieldsDict'
#            print MODULENAME, '-------------------------'
#            print 
#------- ConfigurationDialog.py:  fieldComboBoxClicked():  allFieldsDict =  {'VectorField': 
#{'MaxRangeFixed': False, 'MaxRange': 1.0, 'LegendEnable': True, 'MinRange': -11.0,
#'MinRangeFixed': True, 'ContoursOn': False, 'ScaleArrowsOn': False,
#'FixedArrowColorOn': False, 'NumberOfLegendBoxes': 6, 'NumberAccuracy': 2, 'NumberOfContourLines': 5, 
#'OverlayVectorsOn': False,
#'ArrowColor': <PyQt4.QtGui.QColor object at 0x114f95ad0>, 'ArrowLength': 1}, 
#'IdField': {'MaxRange': 1.0, 'MinRange': 0.0}, 
#'ExtraField': {'MaxRange': 1.0, 'MinRange': 0.0}, 
#'FGF': {'MaxRange': 1.0, 'MinRange': 0.0}, 
#'VectorFieldCellLevel': {'MaxRange': 1.0, 'MinRange': 0.0}}
#        print MODULENAME, 'fieldComboBoxClicked():  type(allFieldsDict) = ',type(allFieldsDict)
        key1 = allFieldsDict.keys()[0]
#        print MODULENAME, 'fieldComboBoxClicked():  allFieldsDict.keys()[0] = ',key1
#        print MODULENAME, 'fieldComboBoxClicked():  type(allFieldsDict.keys()[0]) = ',type(key1)
#        print MODULENAME, 'fieldComboBoxClicked():  isinstance(key1,str)= ',isinstance(key1,str)
#        fieldParams = allFieldsDict[fname]
#        fieldParams = allFieldsDict[fname].toMap()
        if isinstance(key1,str):
            fieldParams = allFieldsDict[str(fname)]
        else:
            fieldParams = allFieldsDict[fname]
#        print MODULENAME, 'fieldComboBoxClicked():  fieldParams = ',fieldParams
#        print MODULENAME, 'fieldComboBoxClicked():  type(fieldParams) = ',type(fieldParams)   # <class 'PyQt4.QtCore.QVariant'>
        if not isinstance(fieldParams,dict):
#            print MODULENAME, 'fieldComboBoxClicked():  convert to dict via toMap()'
            fieldParamsDict = fieldParams.toMap()
        else:
#            print MODULENAME, 'fieldComboBoxClicked():  is already a dict'
            fieldParamsDict = fieldParams
            
#        print MODULENAME, 'fieldComboBoxClicked():  fieldParamsDict = ',fieldParamsDict
#        print MODULENAME, 'fieldComboBoxClicked():  type(fieldParamsDict) = ',type(fieldParamsDict)
        
        val = fieldParamsDict["MinRange"]
#        print MODULENAME, 'fieldComboBoxClicked():       type(val)= ',type(val)
#        print MODULENAME, 'fieldComboBoxClicked():       MinRange  = ',val
        self.fieldMinRange.setText( str(val) )
        val = fieldParamsDict["MinRangeFixed"]
#        print MODULENAME, 'fieldComboBoxClicked():       type(val)= ',type(val)
#        print MODULENAME, 'fieldComboBoxClicked():       MinRangeFixed  = ',val
        self.fieldMinRangeFixedCheckBox.setChecked( val )
        self.fieldMinRangeClicked()   # enable/disable
        
        val = fieldParamsDict["MaxRange"]
#        print MODULENAME, 'fieldComboBoxClicked():       type(val)= ',type(val)
#        print MODULENAME, 'fieldComboBoxClicked():       MaxRange  = ',val
        self.fieldMaxRange.setText( str(val) )
        val = fieldParamsDict["MaxRangeFixed"]
        self.fieldMaxRangeFixedCheckBox.setChecked( val )
        self.fieldMaxRangeClicked()   # enable/disable
        
        val = fieldParamsDict["NumberOfLegendBoxes"]
#        print MODULENAME, 'fieldComboBoxClicked(): NumberOfLegendBoxes      type(val)= ',type(val)
        self.fieldLegendNumLabels.setValue(val)
        
        val = fieldParamsDict["NumberAccuracy"]
#        print MODULENAME, 'fieldComboBoxClicked(): NumberAccuracy      type(val)= ',type(val)
        self.fieldLegendAccuracy.setValue(val)
        
        val = fieldParamsDict["LegendEnable"]
        self.fieldShowLegendCheckBox.setChecked(val)
         
        try:
            val = fieldParamsDict["ScalarIsoValues"]
#            print MODULENAME,'  val=',val
#            print MODULENAME,'  dir(val)=',dir(val)
            if type(val) == QVariant:  self.isovalList.setText(val.toString())
            elif type(val) == QString:  self.isovalList.setText(val)
        except KeyError:
            print '-----------------\n'
            print MODULENAME,'  WARNING fieldParamsDict key "ScalarIsoValues" not defined'
            print MODULENAME,'  fieldParamsDict=',fieldParamsDict
            print '\n'
        val = fieldParamsDict["NumberOfContourLines"]
#        print MODULENAME, 'fieldComboBoxClicked(): NumberOfContourLines      type(val)= ',type(val)
        self.numberOfContoursLinesSpinBox.setValue(val)
#        val = fieldParamsDict["ContoursOn"]
#        self.contoursShowCheckBox.setChecked(val)
        
        val = fieldParamsDict["ArrowLength"]
        self.vectorsArrowLength.setValue(val)
        val = fieldParamsDict["ScaleArrowsOn"]
        self.vectorsScaleArrowCheckBox.setChecked(val)
        val = fieldParamsDict["FixedArrowColorOn"]
        self.vectorsArrowColorCheckBox.setChecked(val)
        self.vectorsArrowColorClicked()  # enable/disable
        
#        val = fieldParamsDict["OverlayVectorsOn"]
#        self.vectorsOverlayCheckBox.setChecked(val)
        
#        print '=================================='
        
        # update the params in the widgets for this newly selected field
#        self.fieldMinRange.setText( str(Configuration.getSetting("MinRange")))
#        self.fieldMinRangeFixedCheckBox.setChecked(Configuration.getSetting("MinRangeFixed"))
#        self.fieldMinRangeClicked()   # enable/disable
#        self.fieldMaxRange.setText( str(Configuration.getSetting("MaxRange")))
#        self.fieldMaxRangeFixedCheckBox.setChecked(Configuration.getSetting("MaxRangeFixed"))
#        self.fieldMaxRangeClicked()   # enable/disable
#        
#        self.fieldLegendNumLabels.setValue(self.paramCC3D["NumberOfLegendBoxes"])
#        self.fieldLegendAccuracy.setValue(self.paramCC3D["NumberAccuracy"])
#        self.fieldShowLegendCheckBox.setChecked(self.paramCC3D["LegendEnable"])
#        
#        self.numberOfContoursLinesSpinBox.setValue(self.paramCC3D["NumberOfContourLines"])
#        self.contoursShowCheckBox.setChecked(self.paramCC3D["ContoursOn"])
#        
#        self.vectorsArrowLength.setValue(self.paramCC3D["ArrowLength"])
#        self.vectorsScaleArrowCheckBox.setChecked(self.paramCC3D["ScaleArrowsOn"])
#        self.vectorsArrowColorCheckBox.setChecked(self.paramCC3D["FixedArrowColorOn"])
#        self.vectorsArrowColorClicked()  # enable/disable
#        
#        self.vectorsOverlayCheckBox.setChecked(self.paramCC3D["OverlayVectorsOn"])
#        
#        color = Configuration.getSetting("ArrowColor")
#        pm = QPixmap(size.width(), size.height())
#        pm.fill(color)
#        self.vectorsArrowColorButton.setIconSize(pm.size())
#        self.vectorsArrowColorButton.setIcon(QIcon(pm))
        
        
    def fieldMinRangeClicked(self):
        if self.fieldMinRangeFixedCheckBox.isChecked():
            self.fieldMinRange.setEnabled(True)
            self.fieldMinLabel.setEnabled(True)
        else:
            self.fieldMinRange.setEnabled(False)
            self.fieldMinLabel.setEnabled(False)
            
    def fieldMaxRangeClicked(self):
        if self.fieldMaxRangeFixedCheckBox.isChecked():
            self.fieldMaxRange.setEnabled(True)
            self.fieldMaxLabel.setEnabled(True)
        else:
            self.fieldMaxRange.setEnabled(False)
            self.fieldMaxLabel.setEnabled(False)
            
    # -------- Vectors widgets CBs
    def vectorsMinMagClicked(self):
        if self.vectorsMinMagFixedCheckBox.isChecked():
            self.vectorsMinMag.setEnabled(True)
            self.vectorsMinMagLabel.setEnabled(True)
        else:
            self.vectorsMinMag.setEnabled(False)
            self.vectorsMinMagLabel.setEnabled(False)
            
    def vectorsMaxMagClicked(self):
        if self.vectorsMaxMagFixedCheckBox.isChecked():
            self.vectorsMaxMag.setEnabled(True)
            self.vectorsMaxMagLabel.setEnabled(True)
        else:
            self.vectorsMaxMag.setEnabled(False)
            self.vectorsMaxMagLabel.setEnabled(False)

    def vectorsArrowColorClicked(self):
        if self.vectorsArrowColorCheckBox.isChecked():
            self.vectorsArrowColorButton.setEnabled(True)
        else:
            self.vectorsArrowColorButton.setEnabled(False)
        
    def vectorsArrowColorButtonClicked(self):
        self.updateColorButton(self.vectorsArrowColorButton, "ArrowColor")
        
        
#    def buttonClicked(self,btn):
#    def apply(self):
    def buttonBoxClicked(self,btn):
#        print MODULENAME, 'buttonBoxClicked():    type(btn.text())=',type(btn.text())
#        print MODULENAME, 'buttonBoxClicked():    btn.text()=',btn.text()
        if str(btn.text()) == 'Apply':
            if self.outputImagesCheckBox.isChecked() and (self.saveImageSpinBox.value() < self.updateScreenSpinBox.value()):
                saveImgStr = str(self.saveImageSpinBox.value())
                QMessageBox.warning(None,"WARN","If saving images, you need to Update screen at least as frequently as Save image (e.g. Update screen = "+saveImgStr+')', QMessageBox.Ok)
                return
            self.updatePreferences()
        
        
    def accept(self):
#        print MODULENAME, 'accept <<<<<<<<<<<<<----------------'
#        Configuration.setSetting()
        if self.outputImagesCheckBox.isChecked() and (self.saveImageSpinBox.value() < self.updateScreenSpinBox.value()):
            saveImgStr = str(self.saveImageSpinBox.value())
            QMessageBox.warning(None,"WARN","If saving images, you need to Update screen at least as frequently as Save image (e.g. Update screen = "+saveImgStr+')', QMessageBox.Ok)
            return
        
        self.updatePreferences()
        QDialog.accept(self)
        
    def enableLatticeOutput(self, boolFlag):
        self.outputLatticeDataCheckBox.setEnabled(boolFlag)
    
        
#    def reject(self):
#        print MODULENAME, 'reject <<<<<<<<<<<<<----------------'
#        QDialog.reject(self)
#        
#    def apply(self):  # never called
#        print MODULENAME, 'apply <<<<<<<<<<<<<----------------'
#        QDialog.apply(self)
#
        
        
#    @pyqtSignature("") # signature of the signal emitted by the button
#    def on_okButton_clicked(self):
#        print MODULENAME, 'on_okButton_clicked <<<<<<<<<<<<<----------------'
#        self.updatePreferences()        
#        self.close()

#    @pyqtSignature("")
#    def on_borderColorButton_clicked(self):
#        """
#        Private slot to set the color for border
#        """
#        print MODULENAME,'-------- on_borderColorButton_clicked --------'
#        self.cellColors["Border"] = self.selectColor(self.borderColorButton, self.cellColors["Border"])

    # The following "on_blah_clicked" methods magically happen when a UI button (whose name *matches* "blah") is clicked
    @pyqtSignature("") # signature of the signal emitted by the button
    def on_projectLocationButton_clicked(self):
        currentProjectDir=Configuration.getSetting('ProjectLocation')
        dirName = QFileDialog.getExistingDirectory ( self, "Specify CC3D Project Directory", currentProjectDir, QFileDialog.ShowDirsOnly)
        dirName=str(dirName)
        dirName.rstrip()
        if dirName=="":
            return
        
        dirName=os.path.abspath(dirName)
        self.projectLocationLineEdit.setText(dirName)
        Configuration.setSetting('ProjectLocation',dirName)
        
    @pyqtSignature("") # signature of the signal emitted by the button
    def on_outputLocationButton_clicked(self):
        currentOutputDir=Configuration.getSetting('OutputLocation')
        dirName = QFileDialog.getExistingDirectory ( self, "Specify CC3D Output Directory", currentOutputDir, QFileDialog.ShowDirsOnly)
        dirName=str(dirName)        
        dirName.rstrip()
        print "dirName=",dirName
        if dirName=="":
            return
        dirName=os.path.abspath(dirName)
        self.outputLocationLineEdit.setText(dirName)
        Configuration.setSetting('OutputLocation',dirName)
        
    @pyqtSignature("") # signature of the signal emitted by the button
    def on_prefsFileButton_clicked(self):
        currentPrefsFile = Configuration.getSetting('PreferencesFile')
        fileName = QFileDialog.getOpenFileName(self, "Specify Preferences Filename", currentPrefsFile)
        fileName=str(fileName)        
        fileName.rstrip()
        print "fileName=",fileName
        if fileName=="":
            return
        fileName=os.path.abspath(fileName)
        self.prefsFileLineEdit.setText(fileName)
        Configuration.setSetting('PreferencesFile',fileName)
        
    @pyqtSignature("") # signature of the signal emitted by the button
    def on_addCellTypeButton_clicked(self):   
    
        lastRowIdx=self.typeColorTable.rowCount()-1

        typeItem=self.typeColorTable.item(lastRowIdx,0)
        lastTypeNumber,flag=typeItem.text().toInt()
        
        
        if not flag:
            #conversion to integer unsuccessful
            return
            
        if  lastTypeNumber>=256:
            #cc3d supports only up to 256 cell types
            return
            
        colorItem = self.typeColorTable.item(lastRowIdx,1)
        print 'type(colorItem)=',type(colorItem)
        print 'dir(colorItem)=',dir(colorItem)
#        lastTypeColor=colorItem.background().color()
        self.typeColorTable.insertRow(lastRowIdx+1)

        # fill new row
        self.typeColorTable.setItem(lastRowIdx+1,0,QTableWidgetItem(str(lastTypeNumber+1)))
        self.typeColorTable.setItem(lastRowIdx+1,1,QTableWidgetItem())
        colorITem=self.typeColorTable.item(lastRowIdx+1,1)
#        colorITem.setBackground(QBrush(lastTypeColor))
        # init setting dictionary        
#        self.paramCC3D["TypeColorMap"][lastRowIdx+1]=lastTypeColor
        
        
    def populateCellColors(self):
        from CompuCellSetup import ExtractTypeNamesAndIds
#        print MODULENAME,'    populateCellColors'

#        self.typeColorTable.setHorizontalHeaderLabels(['type','name','color'])    # doesn't work
        
        cw=self.typeColorTable.columnWidth(1)
#        print '    col 2 width=',self.typeColorTable.columnWidth(2)   # = 50
        self.typeColorTable.setColumnWidth(1,cw*2)
        
        rowCount = len(self.paramCC3D["TypeColorMap"])
#        print MODULENAME,"populateCellColors: rowCount=", rowCount
        self.typeColorTable.setRowCount(rowCount)
        keys = self.paramCC3D["TypeColorMap"].keys()
#        print MODULENAME,'    keys= ',keys
        for i in range(rowCount):
#            if i==0:
#                item = QTableWidgetItem(QString("ECM"))
#            else:
            item = QTableWidgetItem(QString("%1").arg(keys[i]))
            self.typeColorTable.setItem(i, 0, item)
            
            item = QTableWidgetItem()
            item.setBackground(QBrush(self.paramCC3D["TypeColorMap"][keys[i]]))
            self.typeColorTable.setItem(i, 2, item)
            
        names_ids = ExtractTypeNamesAndIds()
        if names_ids is None:
            return
#        print '  names_ids = ',names_ids   # e.g. names_ids =  {0: 'Medium', 1: 'Foam'}
        vals = names_ids.values()
        for i in range(len(vals)):
            item = QTableWidgetItem(QString("%1").arg(vals[i]))
            self.typeColorTable.setItem(i, 1, item)
            
            
    def updateFieldParams(self,fieldName):
#        print MODULENAME,' updateFieldParams():  fieldName=',fieldName
#        print MODULENAME,' updateFieldParams():  Configuration.simFieldsParams=',Configuration.simFieldsParams
        
        fieldDict = {}
        key = "MinRange"
        val = self.fieldMinRange.text()
#        fieldDict[key] = val
        fieldDict[key] = float(val)
#        print MODULENAME,' updateFieldParams():  type(val)  for MinRange=',type(val)   # <class 'PyQt4.QtCore.QString'>
#        print MODULENAME,' updateFieldParams():  dir(val)  for MinRange=',dir(val)  # ... toFloat(), toDouble() ...
        Configuration.setSetting(key,val)
        key = "MinRangeFixed"
        val = self.fieldMinRangeFixedCheckBox.isChecked()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        key = "MaxRange"
        val = self.fieldMaxRange.text()
#        fieldDict[key] = val
        fieldDict[key] = float(val)
        Configuration.setSetting(key,val)
        key = "MaxRangeFixed"
        val = self.fieldMaxRangeFixedCheckBox.isChecked()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        
        key = "NumberOfLegendBoxes"
        val = self.fieldLegendNumLabels.value()  # spinbox
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        key = "NumberAccuracy"
        val = self.fieldLegendAccuracy.value()  # spinbox
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        key = "LegendEnable" 
        val = self.fieldShowLegendCheckBox.isChecked()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
            
        key = "ScalarIsoValues" 
        val = self.isovalList.text()
        fieldDict[key] = val
#        print MODULENAME,' updateFieldParams():  fieldDict (after adding ScalarIsoValues)=',fieldDict
        Configuration.setSetting(key,val)
        key = "NumberOfContourLines" 
        val = self.numberOfContoursLinesSpinBox.value()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
#        key = "ContoursOn" 
#        val = self.contoursShowCheckBox.isChecked()
#        fieldDict[key] = val
#        Configuration.setSetting(key,val)
            
        key = "ArrowLength" 
        val = self.vectorsArrowLength.value()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        key = "ScaleArrowsOn" 
        val = self.vectorsScaleArrowCheckBox.isChecked()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        key = "FixedArrowColorOn" 
        val = self.vectorsArrowColorCheckBox.isChecked()
        fieldDict[key] = val
        Configuration.setSetting(key,val)
        color = Configuration.getSetting("ArrowColor")
#        print MODULENAME,'   updateFieldsParams:  type(color),color=',type(color),color
        fieldDict["ArrowColor"] = color
#        fieldDict["ArrowColor"] = (color.red(),color.green(),color.blue())
#        key = "OverlayVectorsOn" 
#        val = self.vectorsOverlayCheckBox.isChecked()
#        fieldDict[key] = val
#        Configuration.setSetting(key,val)
        
#        if fieldName not in Configuration.simFieldsParams.keys():
#            Configuration.simFieldsParams[fieldName] = fieldDict
#        print MODULENAME,' updateFieldParams():  post Configuration.simFieldsParams=',Configuration.simFieldsParams
#        print MODULENAME,' updateFieldParams():  fieldDict=',fieldDict
        Configuration.updateFieldsParams(fieldName,fieldDict)
        
    def updatePreferences(self):
#        print MODULENAME, ' -----------  updatePreferences  -------------------------'
        
        # rwh: check if the PreferencesFile is different; if so, update it
        Configuration.mySettings = QSettings(QSettings.IniFormat, QSettings.UserScope, "Biocomplexity", self.prefsFileLineEdit.text())

#        configuration=self.editorWindow.configuration
#        configuration.updatedConfigs={}

        # update flags in menus:  CC3DOutputOn, etc. (rf. ViewManager/SimpleViewManager)
        
        
        # Output
        Configuration.setSetting("ScreenUpdateFrequency", self.updateScreenSpinBox.value())
        Configuration.setSetting("ImageOutputOn", self.outputImagesCheckBox.isChecked())
        Configuration.setSetting("SaveImageFrequency", self.saveImageSpinBox.value())
        Configuration.setSetting("LatticeOutputOn", self.outputLatticeDataCheckBox.isChecked())
        Configuration.setSetting("SaveLatticeFrequency", self.saveLatticeSpinBox.value())
        Configuration.setSetting("UseInternalConsole", self.useInternalConsoleCheckBox.isChecked())
        Configuration.setSetting("ClosePlayerAfterSimulationDone", self.closePlayerCheckBox.isChecked())
        Configuration.setSetting("ProjectLocation", self.projectLocationLineEdit.text())
        Configuration.setSetting("OutputLocation", self.outputLocationLineEdit.text())
        Configuration.setSetting("OutputToProjectOn", self.outputToProjectCheckBox.isChecked())
        Configuration.setSetting("PreferencesFile", self.prefsFileLineEdit.text())

        # Cell Type/Colors
        Configuration.setSetting("TypeColorMap",self.paramCC3D["TypeColorMap"])  # rwh
        
#        Configuration.setSetting("BorderColor", self.cellBorderColorButton
##        Configuration.setSetting("ClusterBorderColor", self.
#        Configuration.setSetting("ContourColor", self.
#        Configuration.setSetting("BrushColor", self.
#        Configuration.setSetting("PenColor", self.

        Configuration.setSetting("CellGlyphScale", self.cellGlyphScale.text())
        Configuration.setSetting("CellGlyphThetaRes", self.cellGlyphThetaRes.value())  # spinbox
        Configuration.setSetting("CellGlyphPhiRes", self.cellGlyphPhiRes.value())  # spinbox



        # Field  (scalars and vectors)
#        print '         self.fieldMinRange.text() = ',self.fieldMinRange.text()

        fp = Configuration.getSetting("FieldParams")
#        print MODULENAME, '  updatePreferences():   FieldParams =',fp
        
        # get Field name from combobox in the Field tab and save the current settings for that field
        fname = self.fieldComboBox.currentText()
#        print MODULENAME,'  updatePreferences():  fname=',fname
#        print MODULENAME,'  updatePreferences():  type(fname)=',type(fname)
#        Configuration.updateSimFieldsParams(fname)
        self.updateFieldParams(fname)

        Configuration.setSetting("MinRange", self.fieldMinRange.text())
        Configuration.setSetting("MinRangeFixed", self.fieldMinRangeFixedCheckBox.isChecked())
        Configuration.setSetting("MaxRange", self.fieldMaxRange.text())
        Configuration.setSetting("MaxRangeFixed", self.fieldMaxRangeFixedCheckBox.isChecked())
        
        Configuration.setSetting("NumberOfLegendBoxes", self.fieldLegendNumLabels.value())  # spinbox
        Configuration.setSetting("NumberAccuracy", self.fieldLegendAccuracy.value())   # spinbox
        Configuration.setSetting("LegendEnable", self.fieldShowLegendCheckBox.isChecked())
        
        Configuration.setSetting("ScalarIsoValues", self.isovalList.text())
        Configuration.setSetting("NumberOfContourLines", self.numberOfContoursLinesSpinBox.value())
#        print MODULENAME, '      updatePreferences:  self.contoursShowCheckBox.isChecked() = ',self.contoursShowCheckBox.isChecked()
#        Configuration.setSetting("ContoursOn", self.contoursShowCheckBox.isChecked())

        
        # Vectors
#        if configuration.setting("UseTabSpaces")!=self.tabSpacesCheckBox.isChecked():
#            configuration.updatedConfigs["UseTabSpaces"]=self.tabSpacesCheckBox.isChecked()
#        Configuration.setSetting("MinMagnitude", self.vectorsMinMag.text())
#        Configuration.setSetting("MinMagnitudeFixed", self.vectorsMinMagFixedCheckBox.isChecked())
#        Configuration.setSetting("MaxMagnitude", self.vectorsMaxMag.text())
#        Configuration.setSetting("MaxMagnitudeFixed", self.vectorsMaxMagFixedCheckBox.isChecked())
        
#        Configuration.setSetting("NumberOfLegendBoxesVector", self.vectorsLegendNumLabels.value())
#        Configuration.setSetting("NumberAccuracyVector", self.vectorsLegendAccuracy.value())
#        Configuration.setSetting("LegendEnableVector", self.vectorsShowLegendCheckBox.isChecked())
        
        Configuration.setSetting("ArrowLength", self.vectorsArrowLength.value())
        Configuration.setSetting("ScaleArrowsOn", self.vectorsScaleArrowCheckBox.isChecked())
        Configuration.setSetting("FixedArrowColorOn", self.vectorsArrowColorCheckBox.isChecked())
        
#        Configuration.setSetting("OverlayVectorsOn", self.vectorsOverlayCheckBox.isChecked())

        # 3D
        # Display size, Camera params...
        # Invisible cell types in 3D
        Configuration.setSetting("Types3DInvisible", self.cellTypesInvisibleList.text())
        Configuration.setSetting("BoundingBoxOn", self.boundingBoxCheckBox.isChecked())
    
    def updateUI(self):
#        print MODULENAME, ' ----------------  updateUI  -------------------------'

        # rwh: what to use: self.paramCC3D[] or Configuration.getSetting?        
        
        self.tabWidget.setCurrentIndex(Configuration.getSetting("TabIndex"))
        
        fieldIndex = Configuration.getSetting("FieldIndex")
        self.lastSelectedField = fieldIndex
        self.fieldComboBox.setCurrentIndex(self.lastSelectedField)
#        if self.lastSelectedField: 
        
        # Output
        self.updateScreenSpinBox.setValue(Configuration.getSetting("ScreenUpdateFrequency"))
#        self.updateScreenSpinBox.setMinimum(1)
        self.outputImagesCheckBox.setChecked(Configuration.getSetting("ImageOutputOn"))
        self.saveImageSpinBox.setValue(Configuration.getSetting("SaveImageFrequency"))
        self.outputImagesClicked()  # enable/disable
#        self.saveImageSpinBox.setMinimum(1)
        self.outputLatticeDataCheckBox.setChecked(Configuration.getSetting("LatticeOutputOn"))
        self.saveLatticeSpinBox.setValue(Configuration.getSetting("SaveLatticeFrequency"))
        self.outputLatticeDataClicked()   # enable/disable
        
        self.useInternalConsoleCheckBox.setChecked(Configuration.getSetting("UseInternalConsole"))
        self.closePlayerCheckBox.setChecked(Configuration.getSetting("ClosePlayerAfterSimulationDone"))
        
        self.projectLocationLineEdit.setText( str(Configuration.getSetting("ProjectLocation")))
        self.outputLocationLineEdit.setText( str(Configuration.getSetting("OutputLocation")))
        self.outputToProjectCheckBox.setChecked(Configuration.getSetting("OutputToProjectOn"))
        
        self.prefsFileLineEdit.setText( str(Configuration.getSetting("PreferencesFile")))
        
        
        
        # Cell Type/Colors
#        self.paramCC3D["TypeColorMap"]
        self.populateCellColors()
        # rwh: the following pops up the color selection widget
#        self.selectColor(self.borderColorButton, Configuration.getSetting("BorderColor"))
#        defaultConfigs["BorderColor"] = QColor(Qt.yellow); paramTypeColor.append("BorderColor")
#        defaultConfigs["ContourColor"] = QColor(Qt.white); paramTypeColor.append("ContourColor")
#        defaultConfigs["BrushColor"] = QColor(Qt.white); paramTypeColor.append("BrushColor")
#        defaultConfigs["PenColor"] =

#        palette = QPalette()
#        brush = QBrush(QColor(237,236,235))
#        brush.setStyle(Qt.SolidPattern)
#        palette.setBrush(QPalette.Disabled, QPalette.Window,brush)
#        self.cellBorderColorButton.setPalette(palette)
        
#        color = prefMethod(configColor)
        color = Configuration.getSetting("BorderColor")
        size = self.cellBorderColorButton.size()
#        print '        size w,h=',size.width(),size.height()
        pm = QPixmap(size.width(), size.height())
        pm.fill(color)
        self.cellBorderColorButton.setIconSize(pm.size())
        self.cellBorderColorButton.setIcon(QIcon(pm))
        
        color = Configuration.getSetting("ClusterBorderColor")
        pm = QPixmap(size.width(), size.height())
        pm.fill(color)
        self.clusterBorderColorButton.setIconSize(pm.size())
        self.clusterBorderColorButton.setIcon(QIcon(pm))
        
        color = Configuration.getSetting("ContourColor")
        pm = QPixmap(size.width(), size.height())
        pm.fill(color)
        self.contourColorButton.setIconSize(pm.size())
        self.contourColorButton.setIcon(QIcon(pm))
        
        color = Configuration.getSetting("WindowColor")
        pm = QPixmap(size.width(), size.height())
        pm.fill(color)
        self.windowColorButton.setIconSize(pm.size())
        self.windowColorButton.setIcon(QIcon(pm))
        
        self.cellGlyphScale.setText( str(Configuration.getSetting("CellGlyphScale")))
        self.cellGlyphThetaRes.setValue(self.paramCC3D["CellGlyphThetaRes"])
        self.cellGlyphPhiRes.setValue(self.paramCC3D["CellGlyphPhiRes"])
        
        
        # Field (scalar and vector)   (used to be 'Colormap' and 'Vectors')
#        self.fieldMinRange.setText(str(self.colormap["MinConcentration"]))
        fp = Configuration.getSetting("FieldParams")
        
        self.fieldMinRange.setText( str(Configuration.getSetting("MinRange")))
        self.fieldMinRangeFixedCheckBox.setChecked(Configuration.getSetting("MinRangeFixed"))
        self.fieldMinRangeClicked()   # enable/disable
        self.fieldMaxRange.setText( str(Configuration.getSetting("MaxRange")))
        self.fieldMaxRangeFixedCheckBox.setChecked(Configuration.getSetting("MaxRangeFixed"))
        self.fieldMaxRangeClicked()   # enable/disable
        
        self.fieldLegendNumLabels.setValue(self.paramCC3D["NumberOfLegendBoxes"])
        self.fieldLegendAccuracy.setValue(self.paramCC3D["NumberAccuracy"])
        self.fieldShowLegendCheckBox.setChecked(self.paramCC3D["LegendEnable"])
#        
        self.isovalList.setText(Configuration.getSetting("ScalarIsoValues"))
        self.numberOfContoursLinesSpinBox.setValue(self.paramCC3D["NumberOfContourLines"])
#        self.contoursShowCheckBox.setChecked(self.paramCC3D["ContoursOn"])
        
        
        # Vectors
#        self.vectorsMinMag.setText( str(Configuration.getSetting("MinMagnitude")))
#        self.vectorsMinMagFixedCheckBox.setChecked(self.paramCC3D["MinMagnitudeFixed"])
#        self.vectorsMinMagClicked()  # enable/disable
#        
#        self.vectorsMaxMag.setText( str(Configuration.getSetting("MaxMagnitude")))
#        self.vectorsMaxMagFixedCheckBox.setChecked(self.paramCC3D["MaxMagnitudeFixed"])
#        self.vectorsMaxMagClicked()  # enable/disable
#        
#        self.vectorsLegendNumLabels.setValue(self.paramCC3D["NumberOfLegendBoxesVector"])
#        self.vectorsLegendAccuracy.setValue(self.paramCC3D["NumberAccuracyVector"])
#        self.vectorsShowLegendCheckBox.setChecked(self.paramCC3D["LegendEnableVector"])
        
        self.vectorsArrowLength.setValue(self.paramCC3D["ArrowLength"])
        self.vectorsScaleArrowCheckBox.setChecked(self.paramCC3D["ScaleArrowsOn"])
        self.vectorsArrowColorCheckBox.setChecked(self.paramCC3D["FixedArrowColorOn"])
        self.vectorsArrowColorClicked()  # enable/disable
        
#        self.vectorsOverlayCheckBox.setChecked(self.paramCC3D["OverlayVectorsOn"])
        
        color = Configuration.getSetting("ArrowColor")
        pm = QPixmap(size.width(), size.height())
        pm.fill(color)
        self.vectorsArrowColorButton.setIconSize(pm.size())
        self.vectorsArrowColorButton.setIcon(QIcon(pm))
        
        # 3D
        self.cellTypesInvisibleList.setText(Configuration.getSetting("Types3DInvisible"))
        self.boundingBoxCheckBox.setChecked(self.paramCC3D["BoundingBoxOn"])

#        configuration=self.editorWindow.configuration
#        self.tabSpacesCheckBox.setChecked(configuration.setting("UseTabSpaces"))
    
    def initParams(self):  # rwh: why the heck should we do this?
#        print MODULENAME, ' initParams -------------------'
        # Output tab
        paramList = ["ImageOutputOn","LatticeOutputOn","ScreenUpdateFrequency","SaveImageFrequency",
                     "UseInternalConsole","ClosePlayerAfterSimulationDone","OutputToProjectOn"]
        # Colors tab: cell type, borders, etc
        paramList += ["TypeColorMap","BorderColor","ClusterBorderColor","ContourColor","BrushColor",
                      "PenColor","Types3DInvisible","CellGlyphScale","CellGlyphThetaRes","CellGlyphPhiRes"]
        # Field tab
        paramList += ["MinRange","MinRangeFixed","MaxRange","MaxRangeFixed","NumberAccuracy","NumberOfLegendBoxes",
                      "LegendEnable","ScalarIsoValues","NumberOfContourLines"]
#                      "LegendEnable","ScalarIsoValues","ContoursOn","NumberOfContourLines"]
        # Field tab
#        paramList += ["ArrowColor","ArrowLength","FixedArrowColorOn","LegendEnableVector","ScaleArrowsOn",
#                      "NumberAccuracyVector","NumberOfLegendBoxesVector","OverlayVectorsOn",
#                      "MaxMagnitude","MaxMagnitudeFixed","MinMagnitude","MinMagnitudeFixed"]
        paramList += ["ArrowColor","ArrowLength","FixedArrowColorOn","ScaleArrowsOn","OverlayVectorsOn"]
        
        # 3D
        paramList += ["BoundingBoxOn"]
        for p in paramList:
            self.paramCC3D[p] = Configuration.getSetting(p)
#            if p == "TypeColorMap":
#                print MODULENAME,'  paramCC3D[TypeColorMap]=',self.paramCC3D[p]
            
            
        # rwh: do we also need to set the widgets here, using the params?
