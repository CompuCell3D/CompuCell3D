import vtk
#
# Test butterfly subdivision of point data
#
sphere = vtk.vtkSphereSource()
sphere.SetPhiResolution(11)
sphere.SetThetaResolution(11)

source1 = vtk.vtkImageCanvasSource2D()
source1.SetScalarTypeToUnsignedChar()
source1.SetNumberOfScalarComponents(3)
source1.SetExtent(0, 100, 0, 100, 0, 0)
source1.SetDrawColor(0, 0, 0, 1)
source1.FillBox(0, 100, 0, 100)
source1.SetDrawColor(255, 0, 0, 1)
source1.FillBox(10, 20, 10, 20)
source1.FillBox(40, 50, 20, 30)
source1.Update()



colorIt = vtk.vtkElevationFilter()
colorIt.SetInputConnection(source1.GetOutputPort())
colorIt.SetLowPoint(0,0,-.5)
colorIt.SetHighPoint(0,0,.5)
butterfly = vtk.vtkButterflySubdivisionFilter()
butterfly.SetInputConnection(colorIt.GetOutputPort())
butterfly.SetNumberOfSubdivisions(3)
lut = vtk.vtkLookupTable()
lut.SetNumberOfColors(256)
lut.Build()
mapper = vtk.vtkPolyDataMapper()
mapper.SetInputConnection(butterfly.GetOutputPort())
mapper.SetLookupTable(lut)
# actor = vtk.vtkActor()
# actor.SetMapper(mapper)
# linear = vtk.vtkLinearSubdivisionFilter()
# linear.SetInputConnection(colorIt.GetOutputPort())
# linear.SetNumberOfSubdivisions(3)
# mapper2 = vtk.vtkPolyDataMapper()
# mapper2.SetInputConnection(linear.GetOutputPort())
# mapper2.SetLookupTable(lut)
# actor2 = vtk.vtkActor()
# actor2.SetMapper(mapper2)

# source1 = vtk.vtkImageCanvasSource2D()
# source1.SetScalarTypeToUnsignedChar()
# source1.SetNumberOfScalarComponents(3)
# source1.SetExtent(0, 100, 0, 100, 0, 0)
# source1.SetDrawColor(0, 0, 0, 1)
# source1.FillBox(0, 100, 0, 100)
# source1.SetDrawColor(255, 0, 0, 1)
# source1.FillBox(10, 20, 10, 20)
# source1.FillBox(40, 50, 20, 30)
# source1.Update()


mapper3 = vtk.vtkPolyDataMapper()
mapper3.SetInputConnection(colorIt.GetOutputPort())
# mapper3.SetLookupTable(lut)
actor3 = vtk.vtkActor()
actor3.SetMapper(mapper3)
# ren1 = vtk.vtkRenderer()
# ren2 = vtk.vtkRenderer()
ren3 = vtk.vtkRenderer()
renWin = vtk.vtkRenderWindow()
# renWin.AddRenderer(ren1)
# renWin.AddRenderer(ren2)
renWin.AddRenderer(ren3)
iren = vtk.vtkRenderWindowInteractor()
iren.SetRenderWindow(renWin)
# ren1.AddActor(actor)
# ren1.SetBackground(1,1,1)
# ren2.AddActor(actor2)
# ren2.SetBackground(1,1,1)
ren3.AddActor(actor3)
ren3.SetBackground(1,1,1)
renWin.SetSize(600,200)
aCamera = vtk.vtkCamera()
aCamera.Azimuth(70)
aLight = vtk.vtkLight()
aLight.SetPosition(aCamera.GetPosition())
aLight.SetFocalPoint(aCamera.GetFocalPoint())
# ren1.SetActiveCamera(aCamera)
# ren1.AddLight(aLight)
# ren1.ResetCamera()
# aCamera.Dolly(1.4)
# ren1.ResetCameraClippingRange()
# ren2.SetActiveCamera(aCamera)
# ren2.AddLight(aLight)
ren3.SetActiveCamera(aCamera)
ren3.AddLight(aLight)
ren3.SetViewport(0,0,.33,1)
# ren2.SetViewport(.33,0,.67,1)
# ren1.SetViewport(.67,0,1,1)
# iren.Initialize()

# actor.GetProperty().SetInterpolationToFlat()
# actor2.GetProperty().SetInterpolationToFlat()
actor3.GetProperty().SetInterpolationToFlat()

ren3 = vtk.vtkRenderer()
ren3.AddActor(actor3)


# renWin = vtk.vtkRenderWindow()
# renWin.AddRenderer(ren1)
# renWin.SetSize(200,200)
# iren = vtk.vtkRenderWindowInteractor()
# iren.SetRenderWindow(renWin)
# renWin.Render()
renWin = vtk.vtkRenderWindow()
renWin.AddRenderer(ren3)

renderWindowInteractor = vtk.vtkRenderWindowInteractor()
renderWindowInteractor.SetRenderWindow(renWin)

# ren1.AddActor(sphereActor)
# ren1.SetBackground(colors.GetColor3d("white"))  # Background color white
renWin.Render()
renderWindowInteractor.Start()


# def flat (__vtk__temp0=0,__vtk__temp1=0):
#     actor.GetProperty().SetInterpolationToFlat()
#     actor2.GetProperty().SetInterpolationToFlat()
#     actor3.GetProperty().SetInterpolationToFlat()
#     renWin.Render()