/****************************************************************************
**
** Copyright (C) 2004-2005 Trolltech AS. All rights reserved.
**
** This file is part of the example classes of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of
** this file.  Please review the following information to ensure GNU
** General Public Licensing requirements will be met:
** http://www.trolltech.com/products/qt/opensource.html
**
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://www.trolltech.com/products/qt/licensing.html or contact the
** sales department at sales@trolltech.com.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#include <QtGui>
#include <QWidget>
#include <iostream>
#include "imagewindow.h"
#include "FileUtils.h"
#include "ScreenshotData.h"
#include <sstream>

#include "ScreenshotFrequencyConfigure.h"
#include "ColormapPlotConfigure.h"
#include "VectorFieldPlotConfigure.h"
#include "TypesThreeDConfigure.h"
#include "Configure3DDialog.h"
#include "CellTypeColorConfigure.h"
#include "PythonConfigureDialog.h"
#include "SimulationFileOpenDialog.h"
#include "ColorItem.h"
#include "Display3D.h"

#include <QVTKWidget.h>
#include <vtkRenderWindow.h>
#include <vtkRenderer.h>


#include <vtkActor.h>
#include <vtkRenderer.h>
#include <vtkRenderWindow.h>
#include "vtkCylinderSource.h"
#include <vtkPolyDataMapper.h>



#include <CompuCell3D/Simulator.h>
//#include "glwidget.h"
// #include <QRadioButton>
// #include <QButtonGroup>

using namespace std;

ImageWindow::ImageWindow(bool _silent):
     maxScreenshotListLength(20), silent(_silent),screenshotCoreName("screen")
      
{
    
    mcStep=0;
    runPythonFlag=false;  
    transactionCC3D=0;
    screenUpdateFrequency=1;
    numScreenNameDigits=5;//screenshots numbers will have  that many digits
    bufferFillUsedSemPtr=0;
    bufferFillFreeSemPtr=0;

    bufferFillUsedSemPtr=new QSemaphore(1);
    bufferFillFreeSemPtr=new QSemaphore(1);

    cerr<<"before setting threadTargetWidget"<<endl;
//     thread.setTargetWidget(this);
    
    thread.setTargetObject((QObject*)this);
    cerr<<"after setting threadTargetWidget"<<endl;
//     exit(0);
    univGraphSet.zoomFactor=1;
    readSettings();///read settings  

//      textEdit = new QTextEdit;
//      setCentralWidget(textEdit);

//    curFileStripped=strippedName(curFile);
//    setCurrentFile(curFileStripped);

    
    createActions();
    createMenus();
    createSteeringBar();
    createStatusBar();
    
    curFileStripped=strippedName(curFile);
    setCurrentFile(curFile);

    modified = false;

    painter=0;
    
    screenshotCounter=0;
    scrollView=0;
    scrollView = new QScrollArea();
    scrollView->setBackgroundRole(QPalette::Dark);
    
    
    graphFieldsPtr=new GraphicsDataFields();

     graphics2DPtr = new Graphics2D(this);
     graphics2DPtr->setId(QString("2D"));
     ((Graphics2D*)graphics2DPtr)->resize(0,0);
     ((Graphics2D*)graphics2DPtr)->setSizePolicy(QSizePolicy::Ignored,
                               QSizePolicy::Ignored);
 
     ((Graphics2D*)graphics2DPtr)->setBackgroundRole(QPalette::Shadow);
     ((Graphics2D*)graphics2DPtr)->setAlignment(Qt::AlignLeft | Qt::AlignTop);
     
     projDataPtr= &((Graphics2D*)graphics2DPtr)->projData;
 
     graphics2DPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
     graphics2DPtr->setUnivGraphSetPtr(&univGraphSet);

//      scrollView->setWidget((Graphics2D*)graphics2DPtr);
      setCentralWidget(scrollView);
   //      setCentralWidget((Graphics2D*)graphics2DPtr) ;
     scrollView->setWidget((Graphics2D*)graphics2DPtr);
     ((Graphics2D*)graphics2DPtr)->setVisible(true);

    


//    glWidget= new GLWidget(this);
//    ((GLWidget*)glWidget)->setVisible(false);


// //     qvtkWidget=new QVTKWidget(this);
// //     qvtkWidget->resize(400,400);
// //     
// //    
// //      vtkRenderWindow* renwin = vtkRenderWindow::New();
// //      renwin->StereoCapableWindowOn();
// //      qvtkWidget->SetRenderWindow(renwin);
// // 
// //      qvtkWidget->setVisible(false);
// //      renwin->Delete();
// // 
// //   // add a renderer
// //    ren = vtkRenderer::New();
// //    qvtkWidget->GetRenderWindow()->AddRenderer(ren);
// // 
// //    cerr<<"CREATED QVTK WIDGET n\n\n\n"<<endl;
// // //    qvtkWidget->resize(400,400);   
// //    qvtkWidget->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
// //    ren->SetBackground(1,1,0);
// // 
// // //  Geometry
// //   source = vtkCylinderSource::New();
// // 
// //   // Mapper
// //   mapper = vtkPolyDataMapper::New();
// //   mapper->ImmediateModeRenderingOn();
// //   mapper->SetInputConnection(source->GetOutputPort());
// // 
// //   // Actor in scene
// //   actor = vtkActor::New();
// //   actor->SetMapper(mapper);
// // 
// //   ren->AddActor(actor);
// // 
// //   // Reset camera
// //   ren->ResetCamera();
// // 
// //   ren->GetRenderWindow()->Render();





   
   


//    scrollView->setWidget(qvtkWidget);
   setCentralWidget(scrollView);
//    setCentralWidget(qvtkWidget);

//    ptr3D=new Display3D(this);
// 
// 
// //     display3Dqvtk=(QVTKWidget*)ptr3D;
//     display3D=(GraphicsBase*)ptr3D;
//     display3D->setId(QString("3D"));
// 
//    display3Dqvtk=ptr3D->getQVTKWidget();

   cerr<<"BEFORE CREATING DISPLAY 3D"<<endl;
    display3D=new Display3D(this);
    display3D->setId(QString("3D"));
    display3Dqvtk=(QVTKWidget*)display3D;

//     ((Display3D*)display3D)->resize(0,0);

//     ((Display3D*)display3D)->setSizePolicy(QSizePolicy::Ignored,
//                               QSizePolicy::Ignored);
//     ((Display3D*)display3D)->setBackgroundMode(PaletteDark);
//     ((Display3D*)display3D)->setBackgroundRole(QPalette::Shadow);

//      setCentralWidget((Display3D*)display3D);

//      setCentralWidget((Display3D*)display3D);

//       scrollView->setWidget((Display3D*)display3D);
//     ((Display3D*)display3D)->setVisible(false);
//    ((QVTKWidget*)display3D)->setVisible(false);
//     ((Display3D*)display3D)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
//     ((QVTKWidget*)display3D)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
       ((Display3D*)display3D)->setVisible(false);
      ((Display3D*)display3D)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
//     clearWState( WState_Polished );



    display3D->setGraphicsDataFieldPtr(graphFieldsPtr);
    display3D->setUnivGraphSetPtr(&univGraphSet);

//     ((Display3D*)display3D)->initializeVTKSettings();

     currentGraphicsPtr=graphics2DPtr;
     currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintLattice());
 
     graphicsPtrVec.push_back(graphics2DPtr);
     graphicsPtrVec.push_back(display3D);

    
    for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
         graphicsPtrVec[i]->setMinMagnitudeFixed(minMagnitudeFixed);
         graphicsPtrVec[i]->setMaxMagnitudeFixed(maxMagnitudeFixed);
         graphicsPtrVec[i]->setMinMagnitude(minMagnitude);
         graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
         graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
         graphicsPtrVec[i]->setNumberOfLegendBoxes(numberOfLegendBoxes);
         graphicsPtrVec[i]->setNumberAccuracy(numberAccuracy);
         
         graphicsPtrVec[i]->setArrowLength(arrowLength);
         graphicsPtrVec[i]->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
         graphicsPtrVec[i]->setNumberAccuracyVector(numberAccuracyVector);
         graphicsPtrVec[i]->setLegendEnableVector(legendEnableVector);                  
      }

            
    inventoryFileName="graphicsList.grl";

   drawingAllowed=false;


//     connect(textEdit->document(), SIGNAL(contentsChanged()),
//             this, SLOT(documentWasModified()));

    
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ImageWindow::~ImageWindow(){
   if(painter) delete painter; painter=0;

   if(graphFieldsPtr) delete graphFieldsPtr; graphFieldsPtr=0;
   if (scrollView) delete scrollView;scrollView=0;

   for(list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){
      if(*litr){
         delete *litr;
         *litr=0;
      }      
   }


   if(bufferFillUsedSemPtr) delete bufferFillUsedSemPtr; bufferFillUsedSemPtr=0;
   if(bufferFillFreeSemPtr) delete bufferFillFreeSemPtr; bufferFillFreeSemPtr=0;
   

   
   mutex.lock();
   mutex.unlock();
   mutexStartPause.lock();
   mutexStartPause.unlock();
   mutexFieldDraw.lock();
   mutexFieldDraw.unlock();
   mutexTransaction.lock();
   mutexTransaction.unlock();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void ImageWindow::setXMLFile(const QString &fileName){
   setCurrentFile(fileName);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::setRunPythonFlag(bool _pythonFlag){
   runPythonFlag=_pythonFlag;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::setPythonScript(const QString &fileName){
   pyConfData.pythonFileName=fileName;
   runPythonFlag=true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::setScreenshotDescriptionFileName(const QString & scrDesFileName){
   screenshotDescriptionFileName=scrDesFileName;
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::startSimulation(){
   simulation();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::writeSettings(){
   
    QSettings settings("Biocomplexity","CompuCellPlayer");

//     settings.setPath("physics.indiana.edu", "CompuCellPlayer.info");
    settings.beginGroup("/DefaultColors");
    settings.setValue("/brush", univGraphSet.defaultBrush.color().name());
    settings.setValue("/pen", univGraphSet.defaultPen.color().name());
    settings.setValue("/border", univGraphSet.borderPen.color().name());
    settings.setValue("/bordersOn",univGraphSet.bordersOn/*QString().setNum(bordersOn) */);
    settings.setValue("/concentrationLimitsOn",univGraphSet.concentrationLimitsOn/*QString().setNum(bordersOn) */);
    
    settings.setValue("/contour", univGraphSet.contourPen.color().name());
    settings.setValue("/contoursOn",univGraphSet.contoursOn/*QString().setNum(contoursOn)*/ );
    settings.setValue("/recentFile",curFile);
    
    QStringList penColorList;
    std::map<unsigned short,QPen>::iterator penMitr;

    for( penMitr = univGraphSet.typePenMap.begin() ; penMitr != univGraphSet.typePenMap.end() ; ++penMitr ){
        penColorList+=QString().setNum(penMitr->first);
        penColorList+=penMitr->second.color().name();
    }
    settings.setValue("/typeColorMap", penColorList);
    settings.setValue("/zoomFactor",univGraphSet.zoomFactor);
    settings.setValue("/screenshotFrequency",(int)screenshotFrequency);
    settings.setValue("/screenUpdateFrequency",(int)screenUpdateFrequency);

    settings.setValue("/minConcentration",graphics2DPtr->getMinConcentration());
    settings.setValue("/minConcentrationFixed",graphics2DPtr->getMinConcentrationFixed());
    settings.setValue("/maxConcentration",graphics2DPtr->getMaxConcentration());
    settings.setValue("/maxConcentrationFixed",graphics2DPtr->getMaxConcentrationFixed());

    settings.setValue("/minMagnitude",graphics2DPtr->getMinMagnitude());
    settings.setValue("/minMagnitudeFixed",graphics2DPtr->getMinMagnitudeFixed());
    settings.setValue("/maxMagnitude",graphics2DPtr->getMaxMagnitude());
    settings.setValue("/maxMagnitudeFixed",graphics2DPtr->getMaxMagnitudeFixed());
    settings.setValue("/numberOfLegendBoxes",(int)graphics2DPtr->getNumberOfLegendBoxes());
    settings.setValue("/numberAccuracy",(int)graphics2DPtr->getNumberAccuracy());
    settings.setValue("/legendEnable",graphics2DPtr->getLegendEnable());
    
    settings.setValue("/arrowLength",graphics2DPtr->getArrowLength());
    settings.setValue("/numberOfLegendBoxesVector",(int)graphics2DPtr->getNumberOfLegendBoxesVector());
    settings.setValue("/numberAccuracyVector",(int)graphics2DPtr->getNumberAccuracyVector());
    settings.setValue("/legendEnableVector",graphics2DPtr->getLegendEnableVector());
    settings.setValue("/runPython",runPythonFlag);
    settings.setValue("/pythonFileName",pyConfData.pythonFileName);

    
    QStringList types3DinvisibleList;
    for(unsigned int i = 0 ; i < univGraphSet.types3DInvisibleVec.size() ; ++i){
      types3DinvisibleList+=QString().setNum(univGraphSet.types3DInvisibleVec[i]);
    }
    settings.setValue("/types3DInvisible", types3DinvisibleList);
    settings.endGroup();

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::saveSettings(){
   writeSettings();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::readSettings(){
   
    QSettings settings("Biocomplexity","CompuCellPlayer");
   
    QString defaultBrushColor;
    QString defaultPenColor;
    QString borderPenColor;
    QString contourPenColor;

    
//     settings.setPath("physics.indiana.edu", "CompuCellPlayer.info");
       
    settings.beginGroup("/DefaultColors");
    defaultBrushColor=settings.value("/brush","white").toString();
    defaultPenColor=settings.value("/pen"," white").toString();
    borderPenColor=settings.value("/border","blue").toString();
    univGraphSet.bordersOn=settings.value("/bordersOn",false).toBool();
    univGraphSet.concentrationLimitsOn=settings.value("/concentrationLimitsOn",false).toBool();
    contourPenColor=settings.value("/contour","magenta").toString();
    univGraphSet.contoursOn=settings.value("/contoursOn",false).toBool();
    curFile=settings.value("/recentFile","xml").toString();
    

    univGraphSet.defaultBrush.setColor(QColor(defaultBrushColor));
    univGraphSet.defaultPen.setColor(QColor(defaultPenColor));
    univGraphSet.borderPen.setColor(QColor(borderPenColor));
    univGraphSet.contourPen.setColor(QColor(contourPenColor));

    univGraphSet.defaultColor=QColor(defaultPenColor);
    univGraphSet.borderColor=QColor(borderPenColor);
    univGraphSet.contourColor=QColor(contourPenColor);
    
        

    QString key,value;
    QStringList defaultPenColorList;
    defaultPenColorList+="0";
    defaultPenColorList+="black";
    defaultPenColorList+="1";
    defaultPenColorList+="green";
    defaultPenColorList+="2";
    defaultPenColorList+="blue";
    defaultPenColorList+="3";
    defaultPenColorList+="red";
    defaultPenColorList+="4";
    defaultPenColorList+="darkorange";
    defaultPenColorList+="5";
    defaultPenColorList+="darksalmon";
    defaultPenColorList+="6";
    defaultPenColorList+="darkviolet";
    defaultPenColorList+="7";
    defaultPenColorList+="navy";
    defaultPenColorList+="8";
    defaultPenColorList+="cyan";
    defaultPenColorList+="9";
    defaultPenColorList+="greenyellow";
    defaultPenColorList+="10";
    defaultPenColorList+="hotpink";


    



    
    
    QStringList penColorList=settings.value("/typeColorMap").toStringList();
    if(penColorList.empty()){
      penColorList=defaultPenColorList;
    }
    
    for ( QStringList::Iterator it = penColorList.begin(); it != penColorList.end();  ) {
         key=*it;
         ++it;
         value=*it;
         ++it;
         univGraphSet.typePenMap.insert(std::make_pair(key.toUShort(),QPen(QColor(value))));
         univGraphSet.typeBrushMap.insert(std::make_pair(key.toUShort(),QBrush(QColor(value))));
         univGraphSet.typeColorMap.insert(std::make_pair(key.toUShort(),QColor(value)));
      
    }

    univGraphSet.zoomFactor=settings.value("/zoomFactor",1).toInt();
    screenshotFrequency=settings.value("/screenshotFrequency",1).toInt();
    screenUpdateFrequency=settings.value("/screenUpdateFrequency",1).toInt();

    minConcentration = settings.value("/minConcentration",0.0).toDouble();
    minConcentrationFixed = settings.value("/minConcentrationFixed",false).toBool();
    maxConcentration = settings.value("/maxConcentration",1.0).toDouble();
    maxConcentrationFixed = settings.value("/maxConcentrationFixed",false).toBool();

    minMagnitude = settings.value("/minMagnitude",0.0).toDouble();
    minMagnitudeFixed = settings.value("/minMagnitudeFixed",false).toBool();
    maxMagnitude = settings.value("/maxMagnitude",1.0).toDouble();
    maxMagnitudeFixed = settings.value("/maxMagnitudeFixed",false).toBool();
    numberOfLegendBoxes=settings.value("/numberOfLegendBoxes",5).toInt();
    numberAccuracy=settings.value("/numberAccuracy",3).toInt();
    legendEnable=settings.value("/legendEnable",true).toBool();
    arrowLength = settings.value("/arrowLength",3).toInt();
    numberOfLegendBoxesVector=settings.value("/numberOfLegendBoxesVector",5).toInt();
    numberAccuracyVector=settings.value("/numberAccuracyVector",3).toInt();
    legendEnableVector=settings.value("/legendEnableVector",true).toBool();
    runPythonFlag=settings.value("/runPython",false).toBool();
    pyConfData.pythonFileName=settings.value("/pythonFileName","defaultCompuCellScript.py").toString();
    
    QStringList types3DinvisibleList=settings.value("/types3DInvisible").toStringList();
    
    univGraphSet.types3DInvisibleVec.clear();
    univGraphSet.types3DInvisibleVec.push_back(0);//by default avoid displaying medium in 3D
    for ( QStringList::Iterator it = types3DinvisibleList.begin(); it != types3DinvisibleList.end(); ++it ) {
      if((*it).toUShort() != 0)
        univGraphSet.types3DInvisibleVec.push_back((*it).toUShort());
    }

    
    settings.endGroup();

   
    
    
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::customEvent(QEvent *event){

QEvent::Type type=((CustomEvent*)event)->type();
// cerr<<"got event of the type:"<<type<<endl;
//    if (type == (QEvent::Type)TransactionStartEvent::TransactionStart) {
//       cerr<<"got START EVENT:"<<type<<endl;
//    }

   if (type == (QEvent::Type)TransactionStartEvent::TransactionStart) {

//       cerr<<" \n\n\n GOT START EVENT \n\n\n";

      GraphicsBase &graphics2D = *graphics2DPtr;
      for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
         graphicsPtrVec[i]->setMinConcentrationFixed(minConcentrationFixed);
         graphicsPtrVec[i]->setMaxConcentrationFixed(maxConcentrationFixed);
         graphicsPtrVec[i]->setMinConcentration(minConcentration);
         graphicsPtrVec[i]->setMaxConcentration(maxConcentration);
         graphicsPtrVec[i]->setNumberOfLegendBoxes(numberOfLegendBoxes);
         graphicsPtrVec[i]->setNumberAccuracy(numberAccuracy);
         graphicsPtrVec[i]->setLegendEnable(legendEnable);
         graphicsPtrVec[i]->setArrowLength(arrowLength);
         graphicsPtrVec[i]->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
         graphicsPtrVec[i]->setNumberAccuracyVector(numberAccuracyVector);
         graphicsPtrVec[i]->setLegendEnableVector(legendEnableVector);

      }

      


      TransactionStartEvent *transactionStartEvent = (TransactionStartEvent*)(event);

//       cerr<<"graphFieldsPtr->getSizeL()="<<graphFieldsPtr->getSizeL()<<endl;
//       cerr<<"graphFieldsPtr->getSizeM()="<<graphFieldsPtr->getSizeM()<<endl;
//       cerr<<"graphFieldsPtr->getSizeN()="<<graphFieldsPtr->getSizeN()<<endl;
      xSpinBox->setMinimum(0);
      xSpinBox->setMaximum(graphFieldsPtr->getSizeL()-1);
      xSpinBox->setValue(graphFieldsPtr->getSizeL()/2);
      xSpinBox->setWrapping(true);


      ySpinBox->setMinimum(0);
      ySpinBox->setMaximum(graphFieldsPtr->getSizeM()-1);
      ySpinBox->setValue(graphFieldsPtr->getSizeM()/2);
      ySpinBox->setWrapping(true);



       zSpinBox->setMinimum(0);
       zSpinBox->setMaximum(graphFieldsPtr->getSizeN()-1);
       zSpinBox->setValue(graphFieldsPtr->getSizeN()/2);
       zSpinBox->setWrapping(true);



     ///using custom settings provided by users in xml config file
      if(transactionStartEvent->playerSettings.xyProjFlag){
         zSpinBox->setValue(transactionStartEvent->playerSettings.xyProj);
      }

      if(transactionStartEvent->playerSettings.xzProjFlag){
         ySpinBox->setValue(transactionStartEvent->playerSettings.xzProj);
      }

      if(transactionStartEvent->playerSettings.yzProjFlag){
         xSpinBox->setValue(transactionStartEvent->playerSettings.yzProj);
      }

//      cerr<<" \n\n\n GOT START EVENT 1 \n\n\n";
      ///initialize graphics obj

      Configure3DData data3D;
      if(transactionStartEvent->playerSettings.rotationXFlag){
         data3D.rotationX=transactionStartEvent->playerSettings.rotationX;
      }

      if(transactionStartEvent->playerSettings.rotationYFlag){
         data3D.rotationY=transactionStartEvent->playerSettings.rotationY;
      }
      if(transactionStartEvent->playerSettings.rotationZFlag){
         data3D.rotationZ=transactionStartEvent->playerSettings.rotationZ;
      }

      if(transactionStartEvent->playerSettings.sizeX3DFlag){
         data3D.sizeX=transactionStartEvent->playerSettings.sizeX3D;
      }else{
         data3D.sizeX=graphFieldsPtr->getSizeL();
      }

      if(transactionStartEvent->playerSettings.sizeY3DFlag){
         data3D.sizeY=transactionStartEvent->playerSettings.sizeY3D;
      }else{
         data3D.sizeY=graphFieldsPtr->getSizeM();
      }

      if(transactionStartEvent->playerSettings.sizeZ3DFlag){
         data3D.sizeZ=transactionStartEvent->playerSettings.sizeZ3D;
      }else{
         data3D.sizeZ=graphFieldsPtr->getSizeN();
      }

      data3D.sizeL=graphFieldsPtr->getSizeL();
      data3D.sizeM=graphFieldsPtr->getSizeM();
      data3D.sizeN=graphFieldsPtr->getSizeN();
//uncomment here
       ((Display3D*)display3D)->setInitialConfigure3DData(data3D);




///      projDataPtr->imageLabelPtr=imageLabel;
      projDataPtr->sizeL = graphFieldsPtr->getSizeL(); //change it!
      projDataPtr->sizeM = graphFieldsPtr->getSizeM(); //change it!

      //default configuration
      projDataPtr->xMin = 0;
      projDataPtr->xMax = graphFieldsPtr->getSizeL();
      projDataPtr->yMin = 0;
      projDataPtr->yMax = graphFieldsPtr->getSizeM();
      projDataPtr->zMin = graphFieldsPtr->getSizeN()/2;
      projDataPtr->zMax = graphFieldsPtr->getSizeN()/2+1;
      projDataPtr->projection="xy";

//       cerr<<" \n\n\n GOT START EVENT 2 \n\n\n";

      if(transactionStartEvent->playerSettings.initialProjection=="xy"){
         initProjectionXYData();
      }

      if(transactionStartEvent->playerSettings.initialProjection=="xz"){
         initProjectionXZData();
      }

      if(transactionStartEvent->playerSettings.initialProjection=="yz"){
         initProjectionYZData();
      }

//       cerr<<" \n\n\n GOT START EVENT 3\n\n\n";
      ///initialize painter and pixmap

      ((Graphics2D*)graphics2DPtr)->getPixmap().fill(Qt::red);
       ///painter=new QPainter(imageLabel->pixmap(),this);

       ///projDataPtr->painterPtr=painter;

       /// Required activate  projection  pixmap and painter must be initialized
       if(transactionStartEvent->playerSettings.initialProjection=="xy"){
         xyButton->toggle();
       }else if(transactionStartEvent->playerSettings.initialProjection=="xz"){
         xzButton->toggle();
       }else if(transactionStartEvent->playerSettings.initialProjection=="yz"){
         yzButton->toggle();
       }else{
         xyButton->toggle();
       }

//       cerr<<" \n\n\n GOT START EVENT 4 \n\n\n";
//       cerr<<" \n\n\n GOT projection: "<<transactionStartEvent->playerSettings.initialProjection<<"\n\n\n";

      ///initialize Combo box with field types
      GraphicsDataFields::floatField3DNameMapItr_t mitr;


      plotTypeComboBox->addItem(QString("Cell Field"));
      ///initialize Combo box with scalar field names
      for ( mitr = graphics2D.getGraphFieldsPtr()->getFloatField3DNameMap().begin();
            mitr != graphics2D.getGraphFieldsPtr()->getFloatField3DNameMap().end() ;
            ++mitr)
      {
         plotTypeComboBox->addItem(QString(mitr->first.c_str()));
      }

      //vectorCellFloatField3DNameMapItr_t
      GraphicsDataFields::vectorFieldCellLevelNameMapItr_t mitrV;
      ///initialize Combo box with  vector field names
      for ( mitrV = graphics2D.getGraphFieldsPtr()->getVectorFieldCellLevelNameMap().begin();
            mitrV != graphics2D.getGraphFieldsPtr()->getVectorFieldCellLevelNameMap().end() ;
            ++mitrV)
      {
         plotTypeComboBox->addItem(QString(mitrV->first.c_str()));
      }

      ///make tmp directory for storing pictures
      tmpDirName=curFileStripped;
      QDate date=QDate::currentDate();
      QTime time=QTime::currentTime();
      QString dirSuffix;

      dirSuffix+=QString("_");
      dirSuffix+=date.toString();
      dirSuffix+=QString("_");
      dirSuffix+=time.toString();
      tmpDirName+=dirSuffix;



      cerr<<"NAME OF THE TEMPORARY DIR: "<<tmpDirName.toStdString()<<endl;
      QDir dir;

      bool dirOK=dir.mkdir(tmpDirName);
      if(!dirOK){
         cerr<<"could not create directory: "<<tmpDirName.toStdString()<<endl;
         cerr<<"Make sure that directory with this name is removed"<<endl;
         exit(0);
      }

      ///opening graphics list file
      QString path=dir.absolutePath();
      simulationRootDir=QString(path+QString(QDir::separator())+tmpDirName);
      QString fullInventoryFileName(simulationRootDir+QString(QDir::separator())+inventoryFileName);
      cerr<<fullInventoryFileName.toStdString()<<endl;



      inventoryFile.open(fullInventoryFileName.toStdString().c_str());

      ///copying xml file to folder with graphics
      QString xmlFileFullName=simulationRootDir+QString(QDir::separator())+curFileStripped;
      copyFile( curFile.toStdString().c_str() , xmlFileFullName.toStdString().c_str());


      ///enabling zooms
      if(univGraphSet.zoomFactor>1){
         zoomOutAct->setEnabled(true);
      }
      zoomInAct->setEnabled(true);
      ///enabling show menu


      if(univGraphSet.bordersOn){
         showBordersAct->setChecked(true);
      }
      showBordersAct->setEnabled(true);

      if(univGraphSet.contoursOn){
         showContoursAct->setChecked(true);
      }

      if(univGraphSet.concentrationLimitsOn){
         showConcentrationLimitsAct->setChecked(true);
      }
      showConcentrationLimitsAct->setEnabled(true);

      showContoursAct->setEnabled(true);



      drawingAllowed=true;
      ((Display3D*)display3D)->setDrawingAllowedFlag(true);


      ///init screenshot data
      if(silent && ! screenshotDescriptionFileName.isEmpty()){
         readScreenshotDescriptionList(screenshotDescriptionList,screenshotDescriptionFileName.toStdString());
         produceScreenshotDataList(screenshotDescriptionList);
      }


      //setting numScreenNameDigits;
      //this is not might be not greatest method for determining it, but it works
      ostringstream numStream;
      string numString;

      numStream<<transactionStartEvent->numSteps;

      numString=numStream.str();

      numScreenNameDigits=numString.size();

      return;

   }

   if (type == (QEvent::Type)TransactionRefreshEvent::TransactionRefresh) {
       TransactionRefreshEvent *refreshEvent = (TransactionRefreshEvent *)event;
       ((Graphics2D*)graphics2DPtr)->getPixmap().fill();
//       ((Graphics2D*)graphics2DPtr)->getPixmap().fill(Qt::red);
      ///lock mutextransaction -prevents compucell thread "overrunning"

       //mutexTransaction.lock();
       bufferFillUsedSemPtr->acquire();
//        cerr<<"acquired bufferFillUsedSem in imagewindow"<<endl;
       mcStepLabel->setText("MC Step: "+QString::number(refreshEvent->mcStep));
       mcStep=refreshEvent->mcStep;
       drawField();

       ///lock mutextransaction
       //mutexTransaction.unlock();
// 
//       ///screenshot
      outputScreenshot();

      bufferFillFreeSemPtr->release();
      
      

      return;
   }

   if (type == (QEvent::Type)TransactionFinishEvent::TransactionFinish) {

      TransactionFinishEvent *finishEvent = (TransactionFinishEvent *)event;
      cerr<<finishEvent->message.toStdString()<<endl;
      exit(0);

   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::drawField(){
//    cerr<<"drawField before ptr fcn call"<<endl;
//     cerr<<"ptr="<<draw<<endl;
    (this->*draw)();
//    cerr<<"drawField after ptr fcn call"<<endl;
   
   mutexFieldDraw.lock();
      if(!plotTypeComboBox->count()){ ///no items in combo box - return
      mutexFieldDraw.unlock();
      return;

    }
    

   //Once we know the name of the field to plot we will check what type of plot it has associated with it and set corresponding pointers to plotting functions
   //and data
   QString selectedPlotName=plotTypeComboBox->currentText();
   std::string plotType=currentGraphicsPtr->getGraphFieldsPtr()->checkPlotType(selectedPlotName.toStdString());

   cerr<<"THE TYPE OF "<<selectedPlotName.toStdString()<<" is "<<plotType<<endl;
  
//    if( selectedPlotType == QString("Cell Field") ){
   //for definition of allowed plot types see GraphicsDataFields.h

   if( plotType == "cell_field" ){
//       cerr<<"\n\n draw Cell Field\n\n"<<endl;
     currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintLattice());
     currentGraphicsPtr->drawCurrentScene();

     
     
   }
//    else if(selectedPlotType == QString("CellVelocity")){
   else if(plotType == "vector_cell_level"){   
      cerr<<"INSIDE VECTOR_CELL_LEVEL_OPTION"<<endl;
     map<std::string, GraphicsDataFields::vectorFieldCellLevel_t * >::iterator mitr=
     currentGraphicsPtr->getGraphFieldsPtr()->getVectorFieldCellLevelNameMap().find(string(selectedPlotName.toStdString().c_str()));
     
     currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintCellVectorFieldLattice());
     currentGraphicsPtr->setCurrentVectorCellLevelFieldPtr(mitr->second);
     currentGraphicsPtr->drawCurrentScene();
   }
   else if (plotType == "scalar"){
      GraphicsDataFields::floatField3DNameMapItr_t mitr=
         currentGraphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().find(string(selectedPlotName.toStdString().c_str()));

//       cerr<<"LOOKING FOR A STRING:"<<string(selectedPlotType.ascii())<<endl;
      
      if(mitr != currentGraphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().end() ){
      
//          cerr<<"FOUND:"<<string(selectedPlotType.ascii())<<endl;   
         currentGraphicsPtr->setCurrentConcentrationFieldPtr(mitr->second);

         currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintConcentrationLattice());
         currentGraphicsPtr->drawCurrentScene();
                  
                  
         if(univGraphSet.concentrationLimitsOn){
            minMaxConcentrationLabel->setText(QString("Min: "+QString::number(currentGraphicsPtr->getMinConcentrationTrue())+" Max:"+
            QString::number(currentGraphicsPtr->getMaxConcentrationTrue())));

// // /*            minMaxConcentrationLabel->setText(tr(
// //                                                    "Min: "+QString::number(currentGraphicsPtr->getMinConcentrationTrue())+
// //                                                    " Max: "+QString::number(currentGraphicsPtr->getMaxConcentrationTrue())
// //             ));*/
         }
         
      }else{
      
         currentGraphicsPtr->setCurrentConcentrationFieldPtr(& currentGraphicsPtr->getGraphFieldsPtr()->field3DConcentration);
         
         currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintConcentrationLattice());
         currentGraphicsPtr->drawCurrentScene();
         
         if(univGraphSet.concentrationLimitsOn){
//             minMaxConcentrationLabel->setText(tr(
//                                                    "Min"+QString::number(currentGraphicsPtr->getMinConcentrationTrue())+
//                                                    " Max"+QString::number(currentGraphicsPtr->getMaxConcentrationTrue())
//             ));
         }         

      }
   }


   mutexFieldDraw.unlock();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///this function draws Field in 2D

void ImageWindow::drawField2D(){
   return;
//    cerr<<"\t\t\t\t\t\t inside Field draw2D"<<endl;

// cerr<<"scrollView="<<scrollView<<endl;
    mutexFieldDraw.lock();
   ///setting central widget
//    //    scrollView->removeChild((Display3D*)display3D);
//    //    scrollView->addChild((Graphics2D*)graphics2DPtr);
// //    cerr<<"scrollView="<<scrollView<<endl;
//    if(scrollView->widget()){
// /*      scrollView->takeWidget();
//       scrollView->setWidget((Graphics2D*)graphics2DPtr);*/
//    }else{
// //       scrollView->setWidget((Graphics2D*)graphics2DPtr);
//    }
// //    setCentralWidget(scrollView);
// //      setCentralWidget((Graphics2D*)graphics2DPtr);
// //    ((Display3D*)display3D)->setShown(false);
//      ((Graphics2D*)graphics2DPtr)->setShown(true);
// //      scrollView->show();

   ///setting central widget
   QWidget *widget=scrollView->widget();

   

   if(widget && currentGraphicsPtr->getId()==QString("2D")){

   }else{
//       cerr<<" \t\t\t\t\t\t SWITCHING WIDGETS to 2D"<<endl;

      scrollView->takeWidget();
      scrollView->setWidget((Graphics2D*)graphics2DPtr);
//       ((Display3D*)display3D)->setShown(false);      
      (display3Dqvtk)->setShown(false);      
      ((Graphics2D*)graphics2DPtr)->setShown(true);
   }


    mutexFieldDraw.unlock();

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///this function draws Field in 3D
void ImageWindow::drawField3D(){
   return;
   mutexFieldDraw.lock();
   
//    scrollView->removeChild((Graphics2D*)graphics2DPtr);
//    scrollView->addChild((Display3D*)display3D);
//    setCentralWidget(scrollView);
   QWidget *widget=scrollView->widget();
/*   if(widget && currentGraphicsPtr->getId()==QString("3D")){

   }else{*/
//       cerr<<" \t\t\t\t\t\t SWITCHING WIDGETS to 3D"<<endl;
      scrollView->takeWidget();
//       scrollView->setWidget((Display3D*)display3D);
      scrollView->setWidget(display3Dqvtk);
      //setCentralWidget((Display3D*)display3D);
      ((Graphics2D*)graphics2DPtr)->setShown(false);
//       ((Display3D*)display3D)->setShown(true);
      display3Dqvtk->setShown(true);
//    }

   mutexFieldDraw.unlock();
      
   
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void ImageWindow::switch3D(bool state){

   
   if(state){
      draw = &ImageWindow::drawField3D;
      currentGraphicsPtr=display3D;
      cerr<<"\t\t\t TURNED OFF 2D"<<endl;
      ((Graphics2D*)graphics2DPtr)->hide();



      scrollView->setBackgroundRole(QPalette::Dark);
      scrollView->takeWidget();
//       QGLFormat formatGL;
//       formatGL.setDoubleBuffer(false);
//       ((Display3D*)display3D)->setFormat(formatGL);

//       setCentralWidget((Display3D*)display3D);
//       scrollView->setWidget(qvtkWidget);
//       scrollView->setVisible(true);
//       scrollView->show();
//       scrollView->setWidget(display3Dqvtk);
//       display3Dqvtk->setVisible(true);
//       display3Dqvtk->show();

      scrollView->setWidget((Display3D*)display3D);
      ((Display3D*)display3D)->setVisible(true);
      ((Display3D*)display3D)->show();

      
      cerr<<"\t\t\t TURNED ON 3D"<<endl;

   }else{
      draw = &ImageWindow::drawField2D;
      currentGraphicsPtr=graphics2DPtr;
      
      ((Display3D*)display3D)->hide();

//       display3Dqvtk->hide();
/*      QGLContext *contextGL=const_cast<QGLContext*>(((Display3D*)display3D)->context());
      contextGL->reset();*/
      scrollView->setBackgroundRole(QPalette::Dark);
      setCentralWidget(scrollView);
      cerr<<"\t\t\t TURNED OFF 3D"<<endl;
      scrollView->takeWidget();
      scrollView->setWidget((Graphics2D*)graphics2DPtr);

//       setCentralWidget((Graphics2D*)graphics2DPtr);

      ((Graphics2D*)graphics2DPtr)->show();
      cerr<<"\t\t\t TURNED ON 2D"<<endl;
      
   }
   
   drawField();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::outputScreenshot(){

   screenshotCounter=mcStep;

   if(screenshotCounter % screenshotFrequency){
//        ++screenshotCounter;
      return;
   }

   QImage image;
   
   
   ostringstream imageFileFullNameStream("");
   ostringstream imageFileNameStream("");
   imageCoreFileName=curFileStripped.toStdString();
   imageFileExtension="png";
   imageFileFullNameStream<<tmpDirName.toStdString()<<QString(QDir::separator()).toStdString()<<imageCoreFileName<<".";

   imageFileFullNameStream.width(numScreenNameDigits);
   imageFileFullNameStream.fill('0');
   imageFileFullNameStream<<screenshotCounter<<"."<<imageFileExtension;

   imageFileNameStream<<imageCoreFileName<<".";
   imageFileNameStream.width(numScreenNameDigits);
   imageFileNameStream.fill('0');
   imageFileNameStream<<screenshotCounter<<"."<<imageFileExtension;
	       
   
   


      if(display3DButton->isChecked()){
            display3D->produceImage(imageFileFullNameStream.str());
      }else{
         graphics2DPtr->produceImage(image);
         image.save(QString(imageFileFullNameStream.str().c_str()),"PNG");
      }

      inventoryFile<<imageFileNameStream.str()<<endl;
      cerr<<"SAVING: "<<imageFileFullNameStream.str()<<endl;


   for(list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){
      (*litr)->outputScreenshot(screenshotCounter,numScreenNameDigits);
      
   }

   
   ++screenshotCounter;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::closeEvent(QCloseEvent *event)
{
    if (maybeSave()) {
        writeSettings();
        event->accept();
    } else {
        event->ignore();
    }
}

void ImageWindow::newFile()
{
    if (maybeSave()) {
//         textEdit->clear();
        setCurrentFile("");
    }
}

void ImageWindow::open()
{

      SimulationFileOpenDialogForm dialog;
      
      dialog.loadCurrentValues(curFile,pyConfData.pythonFileName,runPythonFlag);
      if(dialog.exec()){

         QString fileName=dialog.getUi().xmlFileLineEdit->text();
         if (!fileName.isEmpty()){
               loadFile(fileName);
               curFile=fileName;
               curFileStripped=strippedName(fileName);
               setCurrentFile(fileName);

         }

         runPythonFlag=dialog.getUi().pythonScriptCheckBox->isChecked();
         pyConfData.pythonFileName=dialog.getUi().pythonFileLineEdit->text();;

      }else{


      }


//     if (maybeSave()) {
// 
//         
//         QString fileName = QFileDialog::getOpenFileName(this,
// 	"Choose an XML simulation file to open",
// 	".",
// 	"Simulation Files (*.xml)");
//         if (!fileName.isEmpty())
//             loadFile(fileName);
//     }
}

bool ImageWindow::save()
{
    if (curFile.isEmpty()) {
        return saveAs();
    } else {
        return saveFile(curFile);
    }
}

bool ImageWindow::saveAs()
{
    QString fileName = QFileDialog::getSaveFileName(this);
    if (fileName.isEmpty())
        return false;

    return saveFile(fileName);
}

void ImageWindow::about()
{
   QMessageBox::about(this, tr("About Player"),
            tr("<b>CompuCell Player</b> is a visualization engine for CompuCell "
               "It will play all simultions including Paris Hilton new album "
               ));
}

void ImageWindow::documentWasModified()
{
//     setWindowModified(textEdit->document()->isModified());
}

void ImageWindow::configurePython(){
   
//    PythonConfigureDialog dialog;
//    
//    dialog.loadCurrentValues(pyConfData);
//    if(dialog.exec()){
//       pyConfData.pythonFileName=dialog.getUi().pythonFileNameField->text();
//    }else{
// 
// //       cerr<<"NO EXE"<<endl;
//    }
}


void ImageWindow::createActions()
{

   openAct = new QAction(QIcon(":/images/open.png"),tr("&Open Simulation..."), this);
   openAct->setShortcut(tr("Ctrl+O"));
   openAct->setStatusTip(tr("Open an existing simulation"));
   connect(openAct, SIGNAL(triggered()),
            this, SLOT(open()));
   
      saveScrDesAct = new QAction(tr("Save Screenshot Description..."), this);
      saveScrDesAct->setStatusTip(tr("Save Screenshot Description text file"));
      connect(saveScrDesAct, SIGNAL(triggered()),
            this, SLOT(saveScrDes()));
      saveScrDesAct->setEnabled(false);
   
            
   
      exitAct = new QAction(tr("E&xit"), this);
      exitAct->setShortcut(tr("Ctrl+Q"));
      exitAct->setStatusTip(tr("Exit the application"));
      connect(exitAct, SIGNAL(triggered()),
            this, SLOT(close()));
   
   
      ///simulation
      simulationAct = new QAction(QIcon(":/images/Tape_play.png"),tr("Start Si&mulation"), this);
      simulationAct->setShortcut(tr("Ctrl+M"));
      simulationAct->setStatusTip(tr("Start simulation"));
   
      connect(simulationAct, SIGNAL(triggered()),
            this, SLOT(simulation()));
   
   
      simulationPauseAct = new QAction(QIcon(":/images/Tape_pause.png"),tr("Pause Simulation"), this);
      simulationPauseAct->setShortcut(tr("Ctrl+Z"));
      simulationPauseAct->setStatusTip(tr("Pause simulation"));
   
      simulationPauseAct->setEnabled(false);
      
      connect(simulationPauseAct, SIGNAL(triggered()),
            this, SLOT(simulationPause()));


      simulationSerializeAct = new QAction(/*QIcon(":/images/Tape_pause.png"),*/tr("Serialize simulation"), this);
      simulationSerializeAct->setShortcut(tr("Ctrl+L"));
      simulationSerializeAct->setStatusTip(tr("Serialize simulation"));
   
      simulationSerializeAct->setEnabled(false);
      
      connect(simulationSerializeAct, SIGNAL(triggered()),
            this, SLOT(simulationSerialize()));
   
            
   ///zooming
      zoomInAct = new QAction(QIcon(":/images/zoomin.png"),tr("ZoomIn"),this);
      zoomInAct->setShortcut(tr("Ctrl++"));
      zoomInAct->setStatusTip(tr("ZoomIn view"));
      
      
      connect(zoomInAct, SIGNAL(triggered()),
            this, SLOT(zoomIn()));
   
      zoomInAct->setEnabled(false);   
   
      zoomOutAct = new QAction(QIcon(":/images/zoomout.png"),tr("ZoomOut"),this);
      zoomOutAct->setShortcut(tr("Ctrl+-"));
      zoomOutAct->setStatusTip(tr("ZoomOut view"));
   
         
      connect(zoomOutAct, SIGNAL(triggered()),
            this, SLOT(zoomOut()));
   
      zoomOutAct->setEnabled(false);
            
   ///Show actions
      showBordersAct = new QAction(tr("Cell borders"), this);
   
      showBordersAct->setStatusTip(tr("Show cell borders"));
      
      showBordersAct->setCheckable(true);
      
      connect(showBordersAct, SIGNAL(toggled(bool)),
            this, SLOT(bordersDisplay(bool)));
   
   
      showContoursAct = new QAction(tr("Concentration contours"), this);
                                    
      showContoursAct->setStatusTip(tr("Show concentration isocontour lines"));
      
      showContoursAct->setCheckable(true);
      
      connect(showContoursAct, SIGNAL(toggled(bool)),
            this, SLOT(contoursDisplay(bool)));
            
      showConcentrationLimitsAct = new QAction(tr("Concentration limits"),this);
   
      showConcentrationLimitsAct->setStatusTip(tr("Show min and max concentration"));
      
      showConcentrationLimitsAct->setCheckable(true);
      
      connect(showConcentrationLimitsAct, SIGNAL(toggled(bool)),
            this, SLOT(concentrationLimitsDisplay(bool)));
   
         
      ///Configure colors action
   
      typeColorAct = new QAction(tr("Cell type colors..."), this);
                                    
      typeColorAct->setStatusTip(tr("Display and configure cell type colors"));
   
      connect(typeColorAct, SIGNAL(triggered()),
            this, SLOT(configureCellTypeColors()));
   
      colorMapPlotAct = new QAction(tr("Colormap plot..."), this);
   
      colorMapPlotAct->setStatusTip(tr("Configure color map plot"));
   
      connect(colorMapPlotAct, SIGNAL(triggered()),
            this, SLOT(configureColorMapPlot()));
      
      vectorFieldPlotAct = new QAction(tr("Vector Field plot..."),this);
   
      vectorFieldPlotAct->setStatusTip(tr("Configure vector field plot"));
   
      connect(vectorFieldPlotAct, SIGNAL(triggered()),
            this, SLOT(configureVectorFieldPlot()));
                        
   
      screenshotFrequencyAct = new QAction(tr("Screenshot frequency..."),this);
   
      screenshotFrequencyAct->setStatusTip(tr("Configure screenshot frequency"));
   
      connect(screenshotFrequencyAct, SIGNAL(triggered()),
            this, SLOT(configureScreenshotFrequency()));
            
      types3DInvisibleAct = new QAction(tr("Cell Types invisible in 3D..."),this);
   
      types3DInvisibleAct->setStatusTip(tr("You may list cell types that will be invisible in 3D"));
   
      connect(types3DInvisibleAct, SIGNAL(triggered()),
            this, SLOT(configureTypes3DInvisible()));
            
   
      configure3DDisplayAct = new QAction(tr("3D Display configuration"), this);
   
      configure3DDisplayAct->setStatusTip(tr("3D Display configuration"));
   
      connect(configure3DDisplayAct, SIGNAL(triggered()),
            this, SLOT(configure3DDisplay()));
   
      //save settings Action
   
      saveSettingsAct = new QAction(tr("Save Default Settings"),this);
      saveSettingsAct->setStatusTip(tr("Saves current settings as default settings"));
      connect(saveSettingsAct, SIGNAL(triggered()),
            this, SLOT(saveSettings()));
      

//     runPythonAct = new QAction(tr("Run Python Script"), this);
//     runPythonAct->setStatusTip(tr("Enable/Disable Use of Python Extensions"));
//     runPythonAct->setCheckable(true);  
//     
//     connect(runPythonAct, SIGNAL(toggled(bool)),this, SLOT(runPython(bool)));
//     if(runPythonFlag){
//          runPythonAct->setChecked(true);
//     }
// 
// 
//    //configurePython Action
//    configurePythonAct = new QAction("Configure Python Extensions...",this);
//    configurePythonAct->setStatusTip(tr("Configures Python Extensions..."));
//     connect(configurePythonAct , SIGNAL(triggered()),this, SLOT(configurePython ()));


                        
      aboutAct = new QAction(tr("&About"), this);
      aboutAct->setStatusTip(tr("Show the application's About box"));
      connect(aboutAct, SIGNAL(triggered()),
            this, SLOT(about()));
   
   
      aboutQtAct = new QAction(tr("About &Qt"), this);
      aboutQtAct->setStatusTip(tr("Show the Qt library's About box"));
      connect(aboutQtAct, SIGNAL(triggered()),
            qApp, SLOT(aboutQt()));
   
            
            
}

void ImageWindow::createMenus()
{

    fileMenu = menuBar()->addMenu(tr("&File"));
    fileMenu->addAction(openAct);
    fileMenu->addAction(saveScrDesAct);
    fileMenu->addSeparator();
    fileMenu->addAction(exitAct);

   simulationMenu = menuBar()->addMenu(tr("Si&mulation"));
   simulationMenu -> addAction(simulationAct);
   simulationMenu -> addAction(simulationPauseAct);
   simulationMenu -> addAction(simulationSerializeAct);
   
   zoomMenu = menuBar()->addMenu(tr("Zoom"));
   zoomMenu->addAction(zoomInAct);
   zoomMenu->addAction(zoomOutAct);

   showMenu = menuBar()->addMenu(tr("Show"));
   showMenu->addAction(showBordersAct);
   showMenu->addAction(showContoursAct);
   
   showMenu->addAction(showConcentrationLimitsAct);
   showBordersAct->setEnabled(false);
   showContoursAct->setEnabled(false);

   configureMenu = menuBar()->addMenu(tr("Configure"));
   configureMenu->addAction(typeColorAct);
   configureMenu->addAction(colorMapPlotAct);
   configureMenu->addAction(vectorFieldPlotAct);
   configureMenu->addAction(screenshotFrequencyAct);
   configureMenu->addAction(types3DInvisibleAct);
   configureMenu->addAction(configure3DDisplayAct);
   configureMenu->addSeparator();
   configureMenu->addAction(saveSettingsAct);

//    pythonMenu=menuBar()->addMenu("Python");
//    pythonMenu->addAction(runPythonAct);
//    pythonMenu->addAction(configurePythonAct);

   helpMenu = menuBar()->addMenu(tr("&Help"));
   helpMenu->addAction(aboutAct);
   helpMenu->addAction(aboutQtAct);

    
}

void ImageWindow::createSteeringBar(){
    steeringBar = addToolBar(tr("Steering"));
    steeringBar->addAction(simulationAct);
    steeringBar->addAction(simulationPauseAct);
    simulationPauseAct->setEnabled(false);
    steeringBar->addAction(zoomInAct);
    steeringBar->addAction(zoomOutAct);
    
    steeringBar->addSeparator();

   display3DButton = new QRadioButton(tr("3D"));


//    QToolTip::add(display3DButton,tr("Switch to 3D mode. To speed up rendering \n set some cell types to be invisible in the 3D mode\nClick: Configure->Cell types invisible in 3D..."));
   
   ///xy cross section
   xyButton=new QRadioButton(tr("xy"));
//    QToolTip::add(xyButton,tr("View lattice along xy plane"));
    zSpinBox=new QSpinBox();
//    QToolTip::add(zSpinBox,tr("Change \'z\' coordinate of xy plane"));

   ///xz cross section
   xzButton=new QRadioButton(tr("xz"));
//    QToolTip::add(xzButton,tr("View lattice along xz plane"));
   ySpinBox=new QSpinBox();
//    QToolTip::add(ySpinBox,tr("Change \'y\' coordinate of xz plane"));
   
   yzButton=new QRadioButton(tr("yz"));
//    QToolTip::add(yzButton,tr("View lattice along yz plane"));
   xSpinBox=new QSpinBox();
//    QToolTip::add(xSpinBox,tr("Change \'x\' coordinate of yz plane"));
   
   steeringBar->addSeparator();

    
    

    crossSectionButtonsG = new QButtonGroup(steeringBar);
    QGroupBox *groupBox = new QGroupBox(tr("Cross Section"));

    xyButton = new QRadioButton(tr("xy"));
    xzButton = new QRadioButton(tr("xz"));
    yzButton = new QRadioButton(tr("yz"));

//     xyButton->setChecked(true);

    QHBoxLayout *hbox = new QHBoxLayout;
    hbox->addWidget(display3DButton);
    hbox->addWidget(xyButton);
    hbox->addWidget(zSpinBox);
    hbox->addWidget(xzButton);
    hbox->addWidget(ySpinBox);
    hbox->addWidget(yzButton);
    hbox->addWidget(xSpinBox);
    //hbox->addStretch(0);
//     hbox->addStretch(1);
//     hbox->addSpacing(1);
    groupBox->setLayout(hbox);

   steeringBar ->addWidget(groupBox);

   steeringBar->addSeparator();
   plotTypeComboBoxName=new QLabel(tr("Plot Type"));
   plotTypeComboBox=new QComboBox();
   plotTypeComboBox->setMinimumContentsLength(5);
   plotTypeComboBox->setSizeAdjustPolicy(QComboBox::AdjustToContents);
   steeringBar -> addWidget(plotTypeComboBoxName);
   steeringBar -> addWidget(plotTypeComboBox);
//    QToolTip::add(plotTypeComboBox,tr("Select plot type"));

   steeringBar->addSeparator();
   recordButton= new QPushButton(QIcon(":/images/Camera.png"),tr(""));;
   steeringBar->addWidget(recordButton);

//    QToolTip::add(recordButton,tr("Add screenshot of current view to be recorded from now on"));


       connect(xyButton, SIGNAL(toggled(bool)),
            this, SLOT(changeProjectionXY(bool)) );

       connect(zSpinBox, SIGNAL(valueChanged(int)),
            this, SLOT(alterZCoordinate(int)) );
            
            
       connect(xzButton, SIGNAL(toggled(bool)),
            this, SLOT(changeProjectionXZ(bool)) );

       connect(ySpinBox, SIGNAL(valueChanged(int)),
            this, SLOT(alterYCoordinate(int)) );
            
            
       connect(yzButton, SIGNAL(toggled(bool)),
            this, SLOT(changeProjectionYZ(bool)) );

       connect(xSpinBox, SIGNAL(valueChanged(int)),
            this, SLOT(alterXCoordinate(int)) );

       connect(display3DButton, SIGNAL(toggled(bool)),
            this, SLOT(switch3D(bool)) );
            
            
       connect(plotTypeComboBox, SIGNAL(activated ( const QString &)),
            this, SLOT(plotTypeUpdate(const QString &)) );

       connect(recordButton, SIGNAL(clicked()),
            this, SLOT(addScreenshot()) );




}

void ImageWindow::createStatusBar()
{
    
    mcStepLabel = new QLabel(this);
    QPalette palette_back;
    palette_back.setColor(mcStepLabel->backgroundRole(), QColor("white"));
    mcStepLabel->setPalette(palette_back);
    QPalette palette_for;
    palette_for.setColor(mcStepLabel->foregroundRole(), QColor("red"));
    mcStepLabel->setPalette(palette_for);;
   
    mcStepLabel->setAlignment(Qt::AlignHCenter);
    mcStepLabel->setMinimumSize(mcStepLabel->sizeHint());
    
    minMaxConcentrationLabel=new QLabel(this);
    minMaxConcentrationLabel->setAlignment(Qt::AlignHCenter);
    minMaxConcentrationLabel->setMinimumSize(minMaxConcentrationLabel->sizeHint());

    statusBar()->addWidget(mcStepLabel);
    statusBar()->addWidget(minMaxConcentrationLabel);


}

// void ImageWindow::createStatusBar()
// {
//     statusBar()->showMessage(tr("Ready"));
// }



bool ImageWindow::maybeSave()
{
//     if (textEdit->document()->isModified()) {
//         int ret = QMessageBox::warning(this, tr("Application"),
//                      tr("The document has been modified.\n"
//                         "Do you want to save your changes?"),
//                      QMessageBox::Yes | QMessageBox::Default,
//                      QMessageBox::No,
//                      QMessageBox::Cancel | QMessageBox::Escape);
//         if (ret == QMessageBox::Yes)
//             return save();
//         else if (ret == QMessageBox::Cancel)
//             return false;
//     }
    return true;
}

void ImageWindow::loadFile(const QString &fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, tr("Application"),
                             tr("Cannot read file %1:\n%2.")
                             .arg(fileName)
                             .arg(file.errorString()));
        return;
    }

    QTextStream in(&file);
    QApplication::setOverrideCursor(Qt::WaitCursor);
//     textEdit->setPlainText(in.readAll());
    QApplication::restoreOverrideCursor();

    setCurrentFile(fileName);
    statusBar()->showMessage(tr("File loaded"), 2000);
}

bool ImageWindow::saveFile(const QString &fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr("Application"),
                             tr("Cannot write file %1:\n%2.")
                             .arg(fileName)
                             .arg(file.errorString()));
        return false;
    }

    QTextStream out(&file);
    QApplication::setOverrideCursor(Qt::WaitCursor);
//     out << textEdit->toPlainText();
    QApplication::restoreOverrideCursor();

    setCurrentFile(fileName);
    statusBar()->showMessage(tr("File saved"), 2000);
    return true;
}

void ImageWindow::setCurrentFile(const QString &fileName)
{
    curFile = fileName;
//     textEdit->document()->setModified(false);
    setWindowModified(false);

    QString shownName;
    if (curFile.isEmpty())
        shownName = "untitled.txt";
    else
        shownName = strippedName(curFile);

    setWindowTitle(tr("%1[*] - %2").arg(shownName).arg(tr("Application")));
}

QString ImageWindow::strippedName(const QString &fullFileName)
{
    return QFileInfo(fullFileName).fileName();
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ImageWindow::saveScrDes(){

    
    QString fileName = QFileDialog::getSaveFileName(0,"",".");
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr("Application"),
                             tr("Cannot write file %1:\n%2.")
                             .arg(fileName)
                             .arg(file.errorString()));
        return false;
    }

  if (!fileName.isEmpty())
        saveScrDesFile(fileName);

//     QTextStream out(&file);
    QApplication::setOverrideCursor(Qt::WaitCursor);
//     out << textEdit->toPlainText();
    QApplication::restoreOverrideCursor();

    statusBar()->showMessage(tr("File saved"), 2000);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::saveScrDesFile(const QString &fileName){

   ofstream out(fileName.toStdString().c_str());
   for (list<ScreenshotDescription>::iterator litr = screenshotDescriptionList.begin() ; litr != screenshotDescriptionList.end() ; ++litr){
      out<<*litr<<endl;
   }

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::simulation(){
    bool isLocked = true;
    if (mutexStartPause.tryLock()) {
        mutexStartPause.unlock();
        isLocked = false;
    }
    if(!isLocked){///this happens only once you start program
      cerr<<"name of the file simulation:"<<string(curFile.toAscii())<<endl;
//       CC3DTransaction *transactionCC3D= new CC3DTransaction(string(curFile.toAscii()));

      transactionCC3D= new CC3DTransaction(string(curFile.toAscii()));

      transactionCC3D->setPauseMutexPtr(&mutex);
      transactionCC3D->setFieldDrawMutexPtr(&mutexFieldDraw);
      transactionCC3D->setTransactionMutexPtr(&mutexTransaction);
      transactionCC3D->setBufferFreeSem(bufferFillFreeSemPtr);
      transactionCC3D->setBufferUsedSem(bufferFillUsedSemPtr);
      transactionCC3D->setRunPythonFlag(runPythonFlag);
      transactionCC3D->setPyDataConf(pyConfData);
      
      
      transactionCC3D->setGraphicsDataFieldPtr(graphFieldsPtr);
      transactionCC3D->setScreenUpdateFrequency(screenUpdateFrequency);

      addTransaction(transactionCC3D );
      simulationAct->setEnabled(false);
      simulationPauseAct->setEnabled(true);
      simulationSerializeAct->setEnabled(true);

    }else{
      mutex.unlock();
      mutexStartPause.unlock();
      simulationAct->setEnabled(false);
      simulationPauseAct->setEnabled(true);   
      
    }

}
void ImageWindow::addTransaction(Transaction *transact){
    thread.addTransaction(transact);
    openAct->setEnabled(false);
}


void ImageWindow::readScreenshotDescriptionList(std::list<ScreenshotDescription> & _screenshotDescriptionList, const std::string &fileName){

   ifstream in(fileName.c_str());
   if(!in.good()){
      cerr<<"Could not open file "<<fileName<<endl;
      exit(1);
   }

   _screenshotDescriptionList.clear();
   
   while(!in.eof()){
      ScreenshotDescription scshDes;
      in>>scshDes;
      cerr<<" new scrDes:"<<endl;
      cerr<<scshDes<<endl;
      if(!in.fail()){
         _screenshotDescriptionList.push_back(scshDes);
      }
   }
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::produceScreenshotDataList(const std::list<ScreenshotDescription> & _screenshotDescriptionList){
   //This function produces list of screenshot descriptions and stores them in a list. Then every screenshotFrequency MCS
   //this list is being read and screenshots are taken.
   
   //will clear screenshotDataList just in case...
   for (list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){

      delete *litr;
      *litr=0;
   }
   screenshotDataList.clear();

   int scrCounter=0;


   
   for ( list<ScreenshotDescription>::const_iterator litr = _screenshotDescriptionList.begin() ;
         litr != _screenshotDescriptionList.end() ;
         ++litr )
   {
      ScreenshotData * scshPtr=new ScreenshotData();
      if(litr->viewDimension=="3D"){
         scshPtr->graphicsPtr=new Display3D(0);
         scshPtr->setVisualizationWidgetType(QString("3D"));
         ((Display3D*)scshPtr->graphicsPtr)->setVisible(false);
         ((Display3D*)scshPtr->graphicsPtr)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
        ((Display3D * )scshPtr->graphicsPtr)->setSizeLMN(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());
        ((Display3D * )scshPtr->graphicsPtr)->setDrawingAllowedFlag(true);
        ((Display3D * )scshPtr->graphicsPtr)->setConfigure3DData(litr->data3D);
        ((Display3D*)scshPtr->graphicsPtr)->setInitialConfigure3DData(litr->data3D);
      }else{
      
         //check if projData are within field boundaries
         if(! litr->projData.checkIfCompatibleWithField(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN()) ){
            delete scshPtr ;
            continue;
         }
         
         scshPtr->graphicsPtr=new Graphics2D(0);
         scshPtr->setVisualizationWidgetType(QString("2D"));
         ((Graphics2D * )scshPtr->graphicsPtr)->projData=litr->projData;
         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
      }
      
      QString selectedPlotType=litr->plotName;
//       cerr<<" \n\n\n selectedPlotType="<<selectedPlotType.toStdString()<<" \n\n\n"<<endl;
      
      if( selectedPlotType == QString("Cell_Field") ){
         scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(scshPtr->graphicsPtr->getPaintLattice());
      }else{
         

         
         GraphicsDataFields::floatField3DNameMapItr_t mitr=
         scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().find(string(selectedPlotType.toStdString().c_str()));
   
//          cerr<<"LOOKING FOR A STRING:"<<string(selectedPlotType.toStdString().c_str())<<endl;
         
         if(mitr != scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().end() ){
         
//             cerr<<"FOUND:"<<string(selectedPlotType.toStdString().c_str())<<endl;
            scshPtr->graphicsPtr->setCurrentConcentrationFieldPtr(mitr->second);
   
            scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintConcentrationLattice());
                        
         }else{
            delete scshPtr ;
            continue;   
         }
      
      }
      
      if(screenshotDataList.size()<=maxScreenshotListLength){
      
         QString currentScreenshotName=screenshotCoreName+QString().setNum(scrCounter);
         scrCounter++;
         
         scshPtr->univGraphSet=univGraphSet;//copying current graphics settings - IMPORTANT
         
         scshPtr->setCoreName(currentScreenshotName.toStdString().c_str());
         scshPtr->setScreenshotIdName(currentScreenshotName);
         
         screenshotDataList.push_back(scshPtr);
         
         scshPtr->activate(simulationRootDir);
      }
   }
   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::simulationSerialize(){

   simulationSerializeAct->setEnabled(false);

   if(simulationPauseAct->isEnabled()){
      simulationPause();
   }
   
   transactionCC3D->getSimulator()->serialize();

   simulationSerializeAct->setEnabled(true);

   simulation();

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::simulationPause(){
   ///need to have second mutex (StartPause) because if  mutex is unlocked, then locked by cc3d thread then if between these two instructions
   ///one hits "play" button then another thread would be created if instead of if(!mutexStartPause.locked()){ there was
   ///if(!mutex.locked()){ instruction

   
   simulationPauseAct->setEnabled(false);
   mutex.lock();
   mutexStartPause.lock();
   simulationAct->setEnabled(true);
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::zoomIn(){
   
   univGraphSet.zoomFactor++;
   if((univGraphSet.zoomFactor-1)==1){
      zoomOutAct->setEnabled(true);
   }

   QSize size = ((Graphics2D*)graphics2DPtr)->size();
   size/=(univGraphSet.zoomFactor-1);
   size*=univGraphSet.zoomFactor;   
   drawField();
   cerr<<"Zoom factor="<<univGraphSet.zoomFactor<<endl;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::zoomOut(){
   
   univGraphSet.zoomFactor--;
   if(univGraphSet.zoomFactor==1){
      zoomOutAct->setEnabled(false);
   }
   QSize size = ((Graphics2D*)graphics2DPtr)->size();
   size/=(univGraphSet.zoomFactor+1);
   size*=univGraphSet.zoomFactor;
   drawField();
   cerr<<"Zoom factor="<<univGraphSet.zoomFactor<<endl;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::initProjectionXYData(){

   projDataPtr->sizeL = graphFieldsPtr->getSizeL(); //change it!
   projDataPtr->sizeM = graphFieldsPtr->getSizeM(); //change it!

   
   projDataPtr->xMin = 0;
   projDataPtr->xMax = graphFieldsPtr->getSizeL();
   projDataPtr->yMin = 0;
   projDataPtr->yMax = graphFieldsPtr->getSizeM();
   projDataPtr->zMin = zSpinBox->value();
   projDataPtr->zMax = zSpinBox->value()+1;
   projDataPtr->projection="xy";

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::changeProjectionXY(bool _state){
//    cerr<<"\n\n\nsetting draw Ptr\n\n\n";
   draw=&ImageWindow::drawField2D;

   if(_state){

      initProjectionXYData()   ;
      drawField();
   }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::alterZCoordinate(int _value){

     xyProjData=*projDataPtr;

     xyProjData.resetBoundaries(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());

     xyProjData.zMin = _value;
     xyProjData.zMax = _value+1;
     xyProjData.projection="xy";

     if(xyButton->isChecked()){
         *projDataPtr=xyProjData;

         drawField();
     }


}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::initProjectionXZData(){
   projDataPtr->sizeL = graphFieldsPtr->getSizeL(); //change it!
   projDataPtr->sizeM = graphFieldsPtr->getSizeN(); //change it!

   
   projDataPtr->xMin = 0;
   projDataPtr->xMax = graphFieldsPtr->getSizeL();
   projDataPtr->yMin = ySpinBox->value();
   projDataPtr->yMax = ySpinBox->value()+1;
   projDataPtr->zMin = 0;
   projDataPtr->zMax = graphFieldsPtr->getSizeN();
   projDataPtr->projection="xz";

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::changeProjectionXZ(bool _state){
   draw=&ImageWindow::drawField2D;


   if(_state){

      initProjectionXZData();
      drawField();
   }

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::alterYCoordinate(int _value){


     xzProjData=*projDataPtr;

     xzProjData.resetBoundaries(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());

     xzProjData.yMin = _value;
     xzProjData.yMax = _value+1;
     xzProjData.projection="xz";

     if(xzButton->isChecked()){
         *projDataPtr=xzProjData;

         drawField();
     }



}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::initProjectionYZData(){

   projDataPtr->sizeL = graphFieldsPtr->getSizeM(); //change it!
   projDataPtr->sizeM = graphFieldsPtr->getSizeN(); //change it!

   
   projDataPtr->xMin = xSpinBox->value();
   projDataPtr->xMax = xSpinBox->value()+1;
   projDataPtr->yMin = 0;
   projDataPtr->yMax = graphFieldsPtr->getSizeM();
   projDataPtr->zMin = 0;
   projDataPtr->zMax = graphFieldsPtr->getSizeN();
   projDataPtr->projection="yz";


}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::changeProjectionYZ(bool _state){

   draw=&ImageWindow::drawField2D;

   if(_state){

      initProjectionYZData();
      drawField();
   }

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::alterXCoordinate(int _value){


     yzProjData=*projDataPtr;

     yzProjData.resetBoundaries(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());

     yzProjData.xMin = _value;
     yzProjData.xMax = _value+1;
     yzProjData.projection="yz";

     if(yzButton->isChecked()){
         *projDataPtr=yzProjData;

         drawField();
     }



}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::bordersDisplay(bool _on){
   
   if(showBordersAct->isChecked()){

      univGraphSet.bordersOn=true;
      drawField();
   }else{

      univGraphSet.bordersOn=false;
      drawField();
   }

   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::runPython(bool){

   if(runPythonAct->isChecked()){
      runPythonFlag=true;
   }else{
      runPythonFlag=false;
   }

   
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::plotTypeUpdate( const QString &){

   drawField();
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void ImageWindow::contoursDisplay(bool _on){

   if(showContoursAct->isChecked()){

      univGraphSet.contoursOn=true;
      drawField();
   }else{

      univGraphSet.contoursOn=false;
      drawField();
   }


}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::concentrationLimitsDisplay(bool _on){

   if(showConcentrationLimitsAct->isChecked()){
      
      univGraphSet.concentrationLimitsOn=true;
      
      
      
   }else{

      univGraphSet.concentrationLimitsOn=false;
      minMaxConcentrationLabel->setText("");
      minMaxConcentrationLabel->setMinimumSize(QSize());
      
   }
      
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::configureScreenshotFrequency(){

   ScreenshotFrequencyConfigureForm dialog;
//    ScreenshotFrequencyDialog dialog;
   dialog.loadCurrentValues(screenshotFrequency,screenUpdateFrequency);
   ///shows dialog
   if (dialog.exec()) {
      ///dialog vanished from the screen, read values from dialog
      screenshotFrequency=dialog.getUi().freqSpinBox->value();
      screenUpdateFrequency=dialog.getUi().screenUpdateSpinBox->value();
      transactionCC3D->setScreenUpdateFrequency(screenUpdateFrequency);
   }      
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::configureColorMapPlot(){
   ColormapPlotConfigureForm dialog;

//       cerr<<"legendEnable="<<legendEnable<<endl;
      dialog.loadCurrentValues(
                                 minConcentration , minConcentrationFixed,
                                 maxConcentration , maxConcentrationFixed,
                                 numberOfLegendBoxes,numberAccuracy,legendEnable
                                 
                              );   
    ///shows dialog
    if (dialog.exec()) {
      ///dialog vanished from the screen, read values from dialog
      minConcentration = dialog.getUi().minLineEdit->text().toFloat();
      minConcentrationFixed = dialog.getUi().minCheckBox->isChecked();
      maxConcentration = dialog.getUi().maxLineEdit->text().toFloat();
      maxConcentrationFixed = dialog.getUi().maxCheckBox->isChecked();
      numberOfLegendBoxes = dialog.getUi().boxSpinBox->value();
      numberAccuracy = dialog.getUi().accuracySpinBox->value();
      legendEnable = dialog.getUi().showLegendBox->isChecked();
      
      for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
         graphicsPtrVec[i]->setMinConcentrationFixed(minConcentrationFixed);
         graphicsPtrVec[i]->setMaxConcentrationFixed(maxConcentrationFixed);
         graphicsPtrVec[i]->setMinConcentration(minConcentration);
         graphicsPtrVec[i]->setMaxConcentration(maxConcentration);
         graphicsPtrVec[i]->setNumberOfLegendBoxes(numberOfLegendBoxes);
         graphicsPtrVec[i]->setNumberAccuracy(numberAccuracy);
         graphicsPtrVec[i]->setLegendEnable(legendEnable);
      }

            
      drawField();      
    }
    
    
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::configureVectorFieldPlot(){
   VectorFieldPlotConfigureForm dialog;

      dialog.loadCurrentValues(
                                 minMagnitude , minMagnitudeFixed,
                                 maxMagnitude , maxMagnitudeFixed,
                                 arrowLength,
                                 numberOfLegendBoxesVector,numberAccuracyVector,legendEnableVector
                                 
                                 
                              );   
    ///shows dialog
    if (dialog.exec()) {
      ///dialog vanished from the screen, read values from dialog
      minMagnitude = dialog.getUi().minLineEdit->text().toFloat();
      minMagnitudeFixed = dialog.getUi().minCheckBox->isChecked();
      maxMagnitude = dialog.getUi().maxLineEdit->text().toFloat();
      maxMagnitudeFixed = dialog.getUi().maxCheckBox->isChecked();
      arrowLength = dialog.getUi().arrowLengthSpinBox->value();
      numberOfLegendBoxesVector = dialog.getUi().boxSpinBox->value();
      numberAccuracyVector = dialog.getUi().accuracySpinBox->value();
      legendEnableVector = dialog.getUi().showLegendBox->isChecked();
      
      for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
         graphicsPtrVec[i]->setMinMagnitudeFixed(minMagnitudeFixed);
         graphicsPtrVec[i]->setMaxMagnitudeFixed(maxMagnitudeFixed);
         graphicsPtrVec[i]->setMinMagnitude(minMagnitude);
         graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
         graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
         graphicsPtrVec[i]->setArrowLength(arrowLength);
         graphicsPtrVec[i]->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
         graphicsPtrVec[i]->setNumberAccuracyVector(numberAccuracyVector);
         graphicsPtrVec[i]->setLegendEnableVector(legendEnableVector);         
      }
            
      drawField();      
    }
    
    
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::configureTypes3DInvisible(){
   
   TypesThreeDConfigureForm dialog;

   dialog.loadCurrentValues(univGraphSet.types3DInvisibleVec);
      
   if (dialog.exec()) {
   
      dialog.fillTypes3DInvisibleVec(univGraphSet.types3DInvisibleVec);
      
      if(drawingAllowed)
         drawField();      
      
      
   }

 
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::configure3DDisplay(){
   
   Configure3DDialogForm dialog;
   Display3D * disp=(Display3D*)display3D;
   Configure3DData data = disp->getConfigure3DData();
   dialog.loadCurrentValues(data);


   
   if (dialog.exec()) {

      data.sizeX=dialog.getUi().xSpinBox->value();
      data.sizeY=dialog.getUi().ySpinBox->value();
      data.sizeZ=dialog.getUi().zSpinBox->value();
      data.rotationX=dialog.getUi().xRotSpinBox->value();
      data.rotationY=dialog.getUi().yRotSpinBox->value();
      data.rotationZ=dialog.getUi().zRotSpinBox->value();

      disp->setConfigure3DData(data);
      
      
      if(drawingAllowed)
         drawField();      
      
      
   }

 
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::configureCellTypeColors(){

   CellTypeColorConfigureForm dialog;
   
    short cellType;
    map<unsigned short,QPen>::iterator pmItr;
    map<unsigned short,QBrush>::iterator bmItr;
    UniversalGraphicsSettings::colorMapItr cItr;

   //loading current color assignments
   
   QPalette palette;
   palette.setColor(dialog.getUi().borderColorLabel->backgroundRole(), univGraphSet.borderPen.color());
   dialog.getUi().borderColorLabel->setPalette(palette);
   palette.setColor(dialog.getUi().contourColorLabel->backgroundRole(), univGraphSet.contourPen.color());
   dialog.getUi().contourColorLabel->setPalette(palette);

   dialog.loadCurrentValues(univGraphSet.typeColorMap);



   
   if (dialog.exec()) {

          QColor borderColor = dialog.getUi().borderColorLabel->palette().color(QPalette::Background);
          QColor contourColor = dialog.getUi().contourColorLabel->palette().color(QPalette::Background);

          univGraphSet.borderPen.setColor(borderColor);
          univGraphSet.contourPen.setColor(contourColor);

          univGraphSet.borderColor=borderColor;
          univGraphSet.contourColor=contourColor;

          for (int row=0;row < dialog.getUi().typeColorTable->rowCount() ; ++row){

            QColor color = dialog.getUi().typeColorTable->item (row, 1 )->backgroundColor();

            QString text = dialog.getUi().typeColorTable->item(row,0)->text();

            bool conversionOK;
            cellType=text.toShort(&conversionOK);

            if(!conversionOK)
               continue; //in case user enters non-number value


            pmItr=univGraphSet.typePenMap.find(cellType);
            if(pmItr != univGraphSet.typePenMap.end() ){
               univGraphSet.typePenMap.erase(pmItr);
               univGraphSet.typePenMap.insert(make_pair(cellType,QPen(color)));
            }else{
               univGraphSet.typePenMap.insert(make_pair(cellType,QPen(color)));
            }


            bmItr=univGraphSet.typeBrushMap.find(cellType);
            if(bmItr != univGraphSet.typeBrushMap.end() ){
               univGraphSet.typeBrushMap.erase(bmItr);
               univGraphSet.typeBrushMap.insert(make_pair(cellType,QBrush(color)));
            }else{
               univGraphSet.typeBrushMap.insert(make_pair(cellType,QBrush(color)));
            }

            cItr=univGraphSet.typeColorMap.find(cellType);

            if(cItr != univGraphSet.typeColorMap.end() ){
               univGraphSet.typeColorMap.erase(cItr);
               univGraphSet.typeColorMap.insert(make_pair(cellType,color));

            }else{
               univGraphSet.typeColorMap.insert(make_pair(cellType,color));
            }

          }

   }


//    cerr<<"COLOR ASSIGNMENT"<<endl;
//    for(cItr=univGraphSet.typeColorMap.begin() ;  cItr != univGraphSet.typeColorMap.end() ; ++cItr){
//       cerr<<"Type="<<cItr->first<<" color="<<cItr->second.name().toStdString()<<endl;
//    }


      if(drawingAllowed)
         drawField();


}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow::frequencyUpdate(int _value){
   screenshotFrequency=_value;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow::addScreenshot(){

      if(!drawingAllowed)
         return;
         
     mutexFieldDraw.lock();

      ScreenshotDescription scshDes;
       
      ScreenshotData * scshPtr=new ScreenshotData();
      QString scrName;
      Configure3DData   data3D;
      if(display3DButton->isChecked()){

         data3D = ((Display3D * )display3D)->getConfigure3DData();
         scrName=screenshotName3D(data3D);

      }else{
         scrName=screenshotName2D();
      }


      bool okToProceed=scshPtr->okToProceed(simulationRootDir,scrName);

      if(!okToProceed){
         if(scshPtr) delete scshPtr; scshPtr=0;
         mutexFieldDraw.unlock();
         return;

      }




      if(display3DButton->isChecked()){
         scshDes.viewDimension="3D";
         
         scshPtr->graphicsPtr=new Display3D(0);
//          cerr<<"SETTING 3D SCREENSHOT"<<endl;
         scshPtr->setVisualizationWidgetType(QString("3D"));
         
       ((Display3D*)scshPtr->graphicsPtr)->setVisible(false);
      ((Display3D*)scshPtr->graphicsPtr)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
      
//     clearWState( WState_Polished );
      


    
         scshPtr->graphicsPtr->setUnivGraphSetPtr(&univGraphSet);
         

         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
        ((Display3D * )scshPtr->graphicsPtr)->setSizeLMN(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());
        
        ((Display3D * )scshPtr->graphicsPtr)->setDrawingAllowedFlag(true);
        
         
        ((Display3D * )scshPtr->graphicsPtr)->setConfigure3DData(data3D);
//          cerr<<" CONFIGURE DATA="<<data3D<<endl;
        ((Display3D*)scshPtr->graphicsPtr)->setInitialConfigure3DData(data3D);
         scshDes.data3D=data3D;

      }else{
         //scshDes
         scshDes.viewDimension="2D";
         scshDes.projData=((Graphics2D * )graphics2DPtr)->projData;
         //scshData
         scshPtr->graphicsPtr=new Graphics2D(0);
         ((Graphics2D * )scshPtr->graphicsPtr)->projData=((Graphics2D * )graphics2DPtr)->projData;
         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
         scshPtr->setVisualizationWidgetType(QString("2D"));

//          cerr<<"SETTING 2D SCREENSHOT"<<endl;



      }

      scshPtr->univGraphSet=univGraphSet;//copying current graphics settings - IMPORTANT
      

      
      scshPtr->setCoreName(scrName.toStdString().c_str());
      scshPtr->setScreenshotIdName(scrName);


      
      QString selectedPlotType=plotTypeComboBox->currentText();
      
      if( selectedPlotType == QString("Cell Field") ){
         scshDes.plotName="Cell_Field";
         scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(scshPtr->graphicsPtr->getPaintLattice());
         
      }else{
            scshDes.plotName=selectedPlotType;
            
            GraphicsDataFields::floatField3DNameMapItr_t mitr=
            scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().find(string(selectedPlotType.toStdString().c_str()));
      
//             cerr<<"LOOKING FOR A STRING:"<<string(selectedPlotType.toStdString().c_str())<<endl;
            
            if(mitr != scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().end() ){
            
//                cerr<<"FOUND:"<<string(selectedPlotType.toStdString().c_str())<<endl;
               scshPtr->graphicsPtr->setCurrentConcentrationFieldPtr(mitr->second);
      
               scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintConcentrationLattice());
               
                        
               
               
               
            }else{
            
               scshPtr->graphicsPtr->setCurrentConcentrationFieldPtr(& scshPtr->graphicsPtr->getGraphFieldsPtr()->field3DConcentration);
               scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(scshPtr->graphicsPtr->getPaintConcentrationLattice());
               
               
      
            }
         //scshDes
         scshDes.minConcentration=minConcentration;
         scshDes.maxConcentration=maxConcentration;
         scshDes.minConcentrationFixed=minConcentrationFixed;
         scshDes.maxConcentrationFixed=maxConcentrationFixed;
         
         //scshData   
         scshPtr->graphicsPtr->setMinConcentrationFixed(minConcentrationFixed);
         scshPtr->graphicsPtr->setMaxConcentrationFixed(maxConcentrationFixed);
         scshPtr->graphicsPtr->setMinConcentration(minConcentration);
         scshPtr->graphicsPtr->setMaxConcentration(maxConcentration);
         scshPtr->graphicsPtr->setNumberOfLegendBoxes(numberOfLegendBoxes);
         scshPtr->graphicsPtr->setNumberAccuracy(numberAccuracy);
         scshPtr->graphicsPtr->setLegendEnable(legendEnable);
         scshPtr->graphicsPtr->setArrowLength(arrowLength);
         scshPtr->graphicsPtr->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
         scshPtr->graphicsPtr->setNumberAccuracyVector(numberAccuracyVector);
         scshPtr->graphicsPtr->setLegendEnableVector(legendEnableVector);
         scshPtr->graphicsPtr->setArrowLength(arrowLength);
         scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(scshPtr->graphicsPtr->getPaintConcentrationLattice());
      }

         scshPtr->activate(simulationRootDir);
         //saving scshDes
         screenshotDescriptionList.push_back(scshDes);
//          cerr<<"scshDes="<<scshDes<<endl;
         //saving scshData
         screenshotDataList.push_back(scshPtr);

         if(!saveScrDesAct->isEnabled())   
            saveScrDesAct->setEnabled(true);
         
         
         if(screenshotDataList.size()>maxScreenshotListLength){
            recordButton->setEnabled(false);
         }
         


   mutexFieldDraw.unlock();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString ImageWindow::screenshotName2D(){
   QString name;

   
   name+=QString("2D_");
   if(xyButton->isChecked()){
      name+=QString("xy_");
      name+=zSpinBox->text();
   }
   else if(xzButton->isChecked()){
      name+=QString("xz_");
      name+=ySpinBox->text();
   }
   else if(yzButton->isChecked()){
      name+=QString("yz_");
      name+=xSpinBox->text();
   }
            


   name+=QString("_");
   name+=plotTypeComboBox->currentText();
   return name;

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString ImageWindow::screenshotName3D(Configure3DData & _data3D){
   QString name;


   Display3D & d3D = *((Display3D*)display3D);
   name+=QString("3D_");
   name+=QString().setNum(_data3D.rotationX);
   name+=QString("_");
   name+=QString().setNum(_data3D.rotationY);
   name+=QString("_");
   name+=QString().setNum(_data3D.rotationZ);


   name+=QString("_");
   name+=plotTypeComboBox->currentText();
   return name;

}

   

