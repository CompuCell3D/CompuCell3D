/****************************************************************************
**
** Copyright (C) 2004-2005 Trolltech AS. All rights reserved.
**
** This file is part of the example classes of the Qt Toolkit.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of
** this file.  Please review the following information to ensure GNU
** General Public Licensing requirements will be met:
** http://www.trolltech.com/products/qt/opensource.html
**
** If you are unsure which license is appropriate for your use, please
** review the following information:
** http://www.trolltech.com/products/qt/licensing.html or contact the
** sales department at sales@trolltech.com.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

#include <QtGui>
#include <QWidget>
#include <iostream>
#include "imagewindow_NOX.h"
#include "FileUtils.h"
#include "ScreenshotData.h"
#include <sstream>

/*#include "ScreenshotFrequencyConfigure.h"
#include "ColormapPlotConfigure.h"
#include "VectorFieldPlotConfigure.h"
#include "TypesThreeDConfigure.h"
#include "Configure3DDialog.h"
#include "CellTypeColorConfigure.h"
#include "PythonConfigureDialog.h"
#include "SimulationFileOpenDialog.h"*/
#include "ColorItem.h"
#include "Graphics2D_NOX.h"
#include "Display3D_NOX.h"
// #include "Display3D.h"


// #include <QVTKWidget.h>
// #include <vtkRenderWindow.h>
// #include <vtkRenderer.h>


// #include <vtkActor.h>
// #include <vtkRenderer.h>
// #include <vtkRenderWindow.h>
// #include "vtkCylinderSource.h"
// #include <vtkPolyDataMapper.h>



#include <CompuCell3D/Simulator.h>
//#include "glwidget.h"
// #include <QRadioButton>
// #include <QButtonGroup>

using namespace std;

ImageWindow_NOX::ImageWindow_NOX(bool _silent):
     maxScreenshotListLength(20), silent(_silent),screenshotCoreName("screen")
      
{
    
    mcStep=0;
    runPythonFlag=false;  
    transactionCC3D=0;
    screenUpdateFrequency=1;
    numScreenNameDigits=5;//screenshots numbers will have  that many digits
    bufferFillUsedSemPtr=0;
    bufferFillFreeSemPtr=0;

    bufferFillUsedSemPtr=new QSemaphore(1);
    bufferFillFreeSemPtr=new QSemaphore(1);

    thread.setTargetObject(this);
    univGraphSet.zoomFactor=1;
    readSettings();///read settings  


    
    
    curFileStripped=strippedName(curFile);
    setCurrentFile(curFile);

    

    painter=0;
    
    screenshotCounter=0;
    
    
     graphFieldsPtr=new GraphicsDataFields();

     graphics2DPtr = new Graphics2D_NOX();
     graphics2DPtr->setId(QString("2D"));
     
     projDataPtr= &((Graphics2D_NOX*)graphics2DPtr)->projData;
 
//      graphics2DPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
//      graphics2DPtr->setUnivGraphSetPtr(&univGraphSet);
// 
// 
// 
//      currentGraphicsPtr=graphics2DPtr;
//      currentGraphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintLattice());
//  
//      graphicsPtrVec.push_back(graphics2DPtr);
//      graphicsPtrVec.push_back(display3D);
// 
//     
//     for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
//          graphicsPtrVec[i]->setMinMagnitudeFixed(minMagnitudeFixed);
//          graphicsPtrVec[i]->setMaxMagnitudeFixed(maxMagnitudeFixed);
//          graphicsPtrVec[i]->setMinMagnitude(minMagnitude);
//          graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
//          graphicsPtrVec[i]->setMaxMagnitude(maxMagnitude);
//          graphicsPtrVec[i]->setNumberOfLegendBoxes(numberOfLegendBoxes);
//          graphicsPtrVec[i]->setNumberAccuracy(numberAccuracy);
//          
//          graphicsPtrVec[i]->setArrowLength(arrowLength);
//          graphicsPtrVec[i]->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
//          graphicsPtrVec[i]->setNumberAccuracyVector(numberAccuracyVector);
//          graphicsPtrVec[i]->setLegendEnableVector(legendEnableVector);
//       }

            
    inventoryFileName="graphicsList.grl";



    
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ImageWindow_NOX::~ImageWindow_NOX(){
   if(painter) delete painter; painter=0;

   if(graphFieldsPtr) delete graphFieldsPtr; graphFieldsPtr=0;


   for(list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){
      if(*litr){
         delete *litr;
         *litr=0;
      }      
   }


   if(bufferFillUsedSemPtr) delete bufferFillUsedSemPtr; bufferFillUsedSemPtr=0;
   if(bufferFillFreeSemPtr) delete bufferFillFreeSemPtr; bufferFillFreeSemPtr=0;
   

   
   mutex.lock();
   mutex.unlock();
   mutexStartPause.lock();
   mutexStartPause.unlock();
   mutexFieldDraw.lock();
   mutexFieldDraw.unlock();
   mutexTransaction.lock();
   mutexTransaction.unlock();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::setCurrentFile(const QString &fileName)
{
    curFile = fileName;

}


void ImageWindow_NOX::setXMLFile(const QString &fileName){
   setCurrentFile(fileName);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::setRunPythonFlag(bool _pythonFlag){
   runPythonFlag=_pythonFlag;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow_NOX::setPythonScript(const QString &fileName){
   pyConfData.pythonFileName=fileName;
   runPythonFlag=true;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow_NOX::setScreenshotDescriptionFileName(const QString & scrDesFileName){
   screenshotDescriptionFileName=scrDesFileName;
   
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow_NOX::startSimulation(){
   simulation();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow_NOX::writeSettings(){
   
    QSettings settings("Biocomplexity","CompuCellPlayer");

//     settings.setPath("physics.indiana.edu", "CompuCellPlayer.info");
    settings.beginGroup("/DefaultColors");
    settings.setValue("/brush", univGraphSet.defaultBrush.color().name());
    settings.setValue("/pen", univGraphSet.defaultPen.color().name());
    settings.setValue("/border", univGraphSet.borderPen.color().name());
    settings.setValue("/bordersOn",univGraphSet.bordersOn/*QString().setNum(bordersOn) */);
    settings.setValue("/concentrationLimitsOn",univGraphSet.concentrationLimitsOn/*QString().setNum(bordersOn) */);
    
    settings.setValue("/contour", univGraphSet.contourPen.color().name());
    settings.setValue("/contoursOn",univGraphSet.contoursOn/*QString().setNum(contoursOn)*/ );
    settings.setValue("/recentFile",curFile);
    
    QStringList penColorList;
    std::map<unsigned short,QPen>::iterator penMitr;

    for( penMitr = univGraphSet.typePenMap.begin() ; penMitr != univGraphSet.typePenMap.end() ; ++penMitr ){
        penColorList+=QString().setNum(penMitr->first);
        penColorList+=penMitr->second.color().name();
    }
    settings.setValue("/typeColorMap", penColorList);
    settings.setValue("/zoomFactor",univGraphSet.zoomFactor);
    settings.setValue("/screenshotFrequency",(int)screenshotFrequency);
    settings.setValue("/screenUpdateFrequency",(int)screenUpdateFrequency);

    settings.setValue("/minConcentration",graphics2DPtr->getMinConcentration());
    settings.setValue("/minConcentrationFixed",graphics2DPtr->getMinConcentrationFixed());
    settings.setValue("/maxConcentration",graphics2DPtr->getMaxConcentration());
    settings.setValue("/maxConcentrationFixed",graphics2DPtr->getMaxConcentrationFixed());

    settings.setValue("/minMagnitude",graphics2DPtr->getMinMagnitude());
    settings.setValue("/minMagnitudeFixed",graphics2DPtr->getMinMagnitudeFixed());
    settings.setValue("/maxMagnitude",graphics2DPtr->getMaxMagnitude());
    settings.setValue("/maxMagnitudeFixed",graphics2DPtr->getMaxMagnitudeFixed());
    settings.setValue("/numberOfLegendBoxes",(int)graphics2DPtr->getNumberOfLegendBoxes());
    settings.setValue("/numberAccuracy",(int)graphics2DPtr->getNumberAccuracy());
    settings.setValue("/legendEnable",graphics2DPtr->getLegendEnable());
    
    settings.setValue("/arrowLength",graphics2DPtr->getArrowLength());
    settings.setValue("/numberOfLegendBoxesVector",(int)graphics2DPtr->getNumberOfLegendBoxesVector());
    settings.setValue("/numberAccuracyVector",(int)graphics2DPtr->getNumberAccuracyVector());
    settings.setValue("/legendEnableVector",graphics2DPtr->getLegendEnableVector());
    settings.setValue("/runPython",runPythonFlag);
    settings.setValue("/pythonFileName",pyConfData.pythonFileName);

    
    QStringList types3DinvisibleList;
    for(unsigned int i = 0 ; i < univGraphSet.types3DInvisibleVec.size() ; ++i){
      types3DinvisibleList+=QString().setNum(univGraphSet.types3DInvisibleVec[i]);
    }
    settings.setValue("/types3DInvisible", types3DinvisibleList);
    settings.endGroup();

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::readSettings(){
   
    QSettings settings("Biocomplexity","CompuCellPlayer");
   
    QString defaultBrushColor;
    QString defaultPenColor;
    QString borderPenColor;
    QString contourPenColor;

    
//     settings.setPath("physics.indiana.edu", "CompuCellPlayer.info");
       
    settings.beginGroup("/DefaultColors");
    defaultBrushColor=settings.value("/brush","white").toString();
    defaultPenColor=settings.value("/pen"," white").toString();
    borderPenColor=settings.value("/border","blue").toString();
    univGraphSet.bordersOn=settings.value("/bordersOn",false).toBool();
    univGraphSet.concentrationLimitsOn=settings.value("/concentrationLimitsOn",false).toBool();
    contourPenColor=settings.value("/contour","magenta").toString();
    univGraphSet.contoursOn=settings.value("/contoursOn",false).toBool();
    curFile=settings.value("/recentFile","xml").toString();
    

    univGraphSet.defaultBrush.setColor(QColor(defaultBrushColor));
    univGraphSet.defaultPen.setColor(QColor(defaultPenColor));
    univGraphSet.borderPen.setColor(QColor(borderPenColor));
    univGraphSet.contourPen.setColor(QColor(contourPenColor));

    univGraphSet.defaultColor=QColor(defaultPenColor);
    univGraphSet.borderColor=QColor(borderPenColor);
    univGraphSet.contourColor=QColor(contourPenColor);
    
        

    QString key,value;
    QStringList defaultPenColorList;
    defaultPenColorList+="0";
    defaultPenColorList+="black";
    defaultPenColorList+="1";
    defaultPenColorList+="green";
    defaultPenColorList+="2";
    defaultPenColorList+="blue";
    defaultPenColorList+="3";
    defaultPenColorList+="red";
    defaultPenColorList+="4";
    defaultPenColorList+="darkorange";
    defaultPenColorList+="5";
    defaultPenColorList+="darksalmon";
    defaultPenColorList+="6";
    defaultPenColorList+="darkviolet";
    defaultPenColorList+="7";
    defaultPenColorList+="navy";
    defaultPenColorList+="8";
    defaultPenColorList+="cyan";
    defaultPenColorList+="9";
    defaultPenColorList+="greenyellow";
    defaultPenColorList+="10";
    defaultPenColorList+="hotpink";


    



    
    
    QStringList penColorList=settings.value("/typeColorMap").toStringList();
    if(penColorList.empty()){
      penColorList=defaultPenColorList;
    }
    
    for ( QStringList::Iterator it = penColorList.begin(); it != penColorList.end();  ) {
         key=*it;
         ++it;
         value=*it;
         ++it;
         univGraphSet.typePenMap.insert(std::make_pair(key.toUShort(),QPen(QColor(value))));
         univGraphSet.typeBrushMap.insert(std::make_pair(key.toUShort(),QBrush(QColor(value))));
         univGraphSet.typeColorMap.insert(std::make_pair(key.toUShort(),QColor(value)));
      
    }

    univGraphSet.zoomFactor=settings.value("/zoomFactor",1).toInt();
    screenshotFrequency=settings.value("/screenshotFrequency",1).toInt();
    screenUpdateFrequency=settings.value("/screenUpdateFrequency",1).toInt();

    minConcentration = settings.value("/minConcentration",0.0).toDouble();
    minConcentrationFixed = settings.value("/minConcentrationFixed",false).toBool();
    maxConcentration = settings.value("/maxConcentration",1.0).toDouble();
    maxConcentrationFixed = settings.value("/maxConcentrationFixed",false).toBool();

    minMagnitude = settings.value("/minMagnitude",0.0).toDouble();
    minMagnitudeFixed = settings.value("/minMagnitudeFixed",false).toBool();
    maxMagnitude = settings.value("/maxMagnitude",1.0).toDouble();
    maxMagnitudeFixed = settings.value("/maxMagnitudeFixed",false).toBool();
    numberOfLegendBoxes=settings.value("/numberOfLegendBoxes",5).toInt();
    numberAccuracy=settings.value("/numberAccuracy",3).toInt();
    legendEnable=settings.value("/legendEnable",true).toBool();
    arrowLength = settings.value("/arrowLength",3).toInt();
    numberOfLegendBoxesVector=settings.value("/numberOfLegendBoxesVector",5).toInt();
    numberAccuracyVector=settings.value("/numberAccuracyVector",3).toInt();
    legendEnableVector=settings.value("/legendEnableVector",true).toBool();
    runPythonFlag=settings.value("/runPython",false).toBool();
    pyConfData.pythonFileName=settings.value("/pythonFileName","defaultCompuCellScript.py").toString();
    
    QStringList types3DinvisibleList=settings.value("/types3DInvisible").toStringList();
    
    univGraphSet.types3DInvisibleVec.clear();
    univGraphSet.types3DInvisibleVec.push_back(0);//by default avoid displaying medium in 3D
    for ( QStringList::Iterator it = types3DinvisibleList.begin(); it != types3DinvisibleList.end(); ++it ) {
      if((*it).toUShort() != 0)
        univGraphSet.types3DInvisibleVec.push_back((*it).toUShort());
    }

    
    settings.endGroup();

   
    
    
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ImageWindow_NOX::customEvent(QEvent *event){

QEvent::Type type=((CustomEvent*)event)->type();
// cerr<<"got event of the type:"<<type<<endl;
//    if (type == (QEvent::Type)TransactionStartEvent::TransactionStart) {
//       cerr<<"got START EVENT:"<<type<<endl;
//    }

   if (type == (QEvent::Type)TransactionStartEvent::TransactionStart) {

//       cerr<<" \n\n\n GOT START EVENT \n\n\n";

      GraphicsBase &graphics2D = *graphics2DPtr;
      for(unsigned int i  = 0 ; i < graphicsPtrVec.size() ; ++i){
         graphicsPtrVec[i]->setMinConcentrationFixed(minConcentrationFixed);
         graphicsPtrVec[i]->setMaxConcentrationFixed(maxConcentrationFixed);
         graphicsPtrVec[i]->setMinConcentration(minConcentration);
         graphicsPtrVec[i]->setMaxConcentration(maxConcentration);
         graphicsPtrVec[i]->setNumberOfLegendBoxes(numberOfLegendBoxes);
         graphicsPtrVec[i]->setNumberAccuracy(numberAccuracy);
         graphicsPtrVec[i]->setLegendEnable(legendEnable);
         graphicsPtrVec[i]->setArrowLength(arrowLength);
         graphicsPtrVec[i]->setNumberOfLegendBoxesVector(numberOfLegendBoxesVector);
         graphicsPtrVec[i]->setNumberAccuracyVector(numberAccuracyVector);
         graphicsPtrVec[i]->setLegendEnableVector(legendEnableVector);

      }

      


      TransactionStartEvent *transactionStartEvent = (TransactionStartEvent*)(event);

//       cerr<<"graphFieldsPtr->getSizeL()="<<graphFieldsPtr->getSizeL()<<endl;
//       cerr<<"graphFieldsPtr->getSizeM()="<<graphFieldsPtr->getSizeM()<<endl;
//       cerr<<"graphFieldsPtr->getSizeN()="<<graphFieldsPtr->getSizeN()<<endl;



//      cerr<<" \n\n\n GOT START EVENT 1 \n\n\n";
      ///initialize graphics obj

      Configure3DData data3D;
      if(transactionStartEvent->playerSettings.rotationXFlag){
         data3D.rotationX=transactionStartEvent->playerSettings.rotationX;
      }

      if(transactionStartEvent->playerSettings.rotationYFlag){
         data3D.rotationY=transactionStartEvent->playerSettings.rotationY;
      }
      if(transactionStartEvent->playerSettings.rotationZFlag){
         data3D.rotationZ=transactionStartEvent->playerSettings.rotationZ;
      }

      if(transactionStartEvent->playerSettings.sizeX3DFlag){
         data3D.sizeX=transactionStartEvent->playerSettings.sizeX3D;
      }else{
         data3D.sizeX=graphFieldsPtr->getSizeL();
      }

      if(transactionStartEvent->playerSettings.sizeY3DFlag){
         data3D.sizeY=transactionStartEvent->playerSettings.sizeY3D;
      }else{
         data3D.sizeY=graphFieldsPtr->getSizeM();
      }

      if(transactionStartEvent->playerSettings.sizeZ3DFlag){
         data3D.sizeZ=transactionStartEvent->playerSettings.sizeZ3D;
      }else{
         data3D.sizeZ=graphFieldsPtr->getSizeN();
      }

      data3D.sizeL=graphFieldsPtr->getSizeL();
      data3D.sizeM=graphFieldsPtr->getSizeM();
      data3D.sizeN=graphFieldsPtr->getSizeN();
//uncomment here
//        ((Display3D*)display3D)->setInitialConfigure3DData(data3D);




///      projDataPtr->imageLabelPtr=imageLabel;
      projDataPtr->sizeL = graphFieldsPtr->getSizeL(); //change it!
      projDataPtr->sizeM = graphFieldsPtr->getSizeM(); //change it!

      //default configuration
      projDataPtr->xMin = 0;
      projDataPtr->xMax = graphFieldsPtr->getSizeL();
      projDataPtr->yMin = 0;
      projDataPtr->yMax = graphFieldsPtr->getSizeM();
      projDataPtr->zMin = graphFieldsPtr->getSizeN()/2;
      projDataPtr->zMax = graphFieldsPtr->getSizeN()/2+1;
      projDataPtr->projection="xy";

//       cerr<<" \n\n\n GOT START EVENT 2 \n\n\n";


      ///initialize Combo box with field types
      GraphicsDataFields::floatField3DNameMapItr_t mitr;



      ///make tmp directory for storing pictures
      tmpDirName=curFileStripped;
      QDate date=QDate::currentDate();
      QTime time=QTime::currentTime();
      QString dirSuffix;

      dirSuffix+=QString("_");
      dirSuffix+=date.toString();
      dirSuffix+=QString("_");
      dirSuffix+=time.toString();
      tmpDirName+=dirSuffix;



      cerr<<"NAME OF THE TEMPORARY DIR: "<<tmpDirName.toStdString()<<endl;
      QDir dir;

      bool dirOK=dir.mkdir(tmpDirName);
      if(!dirOK){
         cerr<<"could not create directory: "<<tmpDirName.toStdString()<<endl;
         cerr<<"Make sure that directory with this name is removed"<<endl;
         exit(0);
      }

      ///opening graphics list file
      QString path=dir.absolutePath();
      simulationRootDir=QString(path+QString(QDir::separator())+tmpDirName);
      QString fullInventoryFileName(simulationRootDir+QString(QDir::separator())+inventoryFileName);
      cerr<<fullInventoryFileName.toStdString()<<endl;



      inventoryFile.open(fullInventoryFileName.toStdString().c_str());

      ///copying xml file to folder with graphics
      QString xmlFileFullName=simulationRootDir+QString(QDir::separator())+curFileStripped;
      copyFile( curFile.toStdString().c_str() , xmlFileFullName.toStdString().c_str());


      ///enabling zooms
//       if(univGraphSet.zoomFactor>1){
//          zoomOutAct->setEnabled(true);
//       }
//       zoomInAct->setEnabled(true);
      ///enabling show menu


//       if(univGraphSet.bordersOn){
//          showBordersAct->setChecked(true);
//       }
//       showBordersAct->setEnabled(true);
// 
//       if(univGraphSet.contoursOn){
//          showContoursAct->setChecked(true);
//       }
// 
//       if(univGraphSet.concentrationLimitsOn){
//          showConcentrationLimitsAct->setChecked(true);
//       }
//       showConcentrationLimitsAct->setEnabled(true);
// 
//       showContoursAct->setEnabled(true);



//       drawingAllowed=true;
//       ((Display3D*)display3D)->setDrawingAllowedFlag(true);


      ///init screenshot data
      if(silent && ! screenshotDescriptionFileName.isEmpty()){
         readScreenshotDescriptionList(screenshotDescriptionList,screenshotDescriptionFileName.toStdString());
         produceScreenshotDataList(screenshotDescriptionList);
      }


      //setting numScreenNameDigits;
      //this is not might be not greatest method for determining it, but it works
      ostringstream numStream;
      string numString;

      numStream<<transactionStartEvent->numSteps;

      numString=numStream.str();

      numScreenNameDigits=numString.size();

      return;

   }

   if (type == (QEvent::Type)TransactionRefreshEvent::TransactionRefresh) {
       TransactionRefreshEvent *refreshEvent = (TransactionRefreshEvent *)event;
//        ((Graphics2D_NOX*)graphics2DPtr)->getPixmap().fill();
//       ((Graphics2D_NOX*)graphics2DPtr)->getPixmap().fill(Qt::red);
      ///lock mutextransaction -prevents compucell thread "overrunning"

       //mutexTransaction.lock();
       bufferFillUsedSemPtr->acquire();
//        cerr<<"acquired bufferFillUsedSem in imagewindow"<<endl;

       mcStep=refreshEvent->mcStep;
       drawField();

       ///lock mutextransaction
       //mutexTransaction.unlock();
// 
//       ///screenshot
      outputScreenshot();

      bufferFillFreeSemPtr->release();
      
      

      return;
   }

   if (type == (QEvent::Type)TransactionFinishEvent::TransactionFinish) {

      TransactionFinishEvent *finishEvent = (TransactionFinishEvent *)event;
      cerr<<finishEvent->message.toStdString()<<endl;
      exit(0);

   }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::drawField(){
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///this function draws Field in 2D

void ImageWindow_NOX::drawField2D(){

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///this function draws Field in 3D
void ImageWindow_NOX::drawField3D(){
   return;
      
   
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::produceScreenshotDataList(const std::list<ScreenshotDescription> & _screenshotDescriptionList){
   //This function produces list of screenshot descriptions and stores them in a list. Then every screenshotFrequency MCS
   //this list is being read and screenshots are taken.
   
   //will clear screenshotDataList just in case...
   for (list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){

      delete *litr;
      *litr=0;
   }
   screenshotDataList.clear();

   int scrCounter=0;


   
   for ( list<ScreenshotDescription>::const_iterator litr = _screenshotDescriptionList.begin() ;
         litr != _screenshotDescriptionList.end() ;
         ++litr )
   {
      ScreenshotData * scshPtr=new ScreenshotData();
      if(litr->viewDimension=="3D"){
          scshPtr->graphicsPtr=new Display3D_NOX();
         scshPtr->setVisualizationWidgetType(QString("3D"));
//          ((Display3D*)scshPtr->graphicsPtr)->setVisible(false);
//          ((Display3D*)scshPtr->graphicsPtr)->resize( QSize(502, 456).expandedTo(minimumSizeHint()) );
         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
        ((Display3DBase * )scshPtr->graphicsPtr)->setSizeLMN(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN());
        ((Display3DBase * )scshPtr->graphicsPtr)->setDrawingAllowedFlag(true);
        ((Display3DBase * )scshPtr->graphicsPtr)->setConfigure3DData(litr->data3D);
        ((Display3DBase*)scshPtr->graphicsPtr)->setInitialConfigure3DData(litr->data3D);
      }else{
      
         //check if projData are within field boundaries
         if(! litr->projData.checkIfCompatibleWithField(graphFieldsPtr->getSizeL(),graphFieldsPtr->getSizeM(),graphFieldsPtr->getSizeN()) ){
            delete scshPtr ;
            continue;
         }
         
         scshPtr->graphicsPtr=new Graphics2D_NOX();
         scshPtr->setVisualizationWidgetType(QString("2D"));
         ((Graphics2D * )scshPtr->graphicsPtr)->projData=litr->projData;
         scshPtr->graphicsPtr->setGraphicsDataFieldPtr(graphFieldsPtr);
      }
      
      QString selectedPlotType=litr->plotName;
//       cerr<<" \n\n\n selectedPlotType="<<selectedPlotType.toStdString()<<" \n\n\n"<<endl;
      
      if( selectedPlotType == QString("Cell_Field") ){
         scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(scshPtr->graphicsPtr->getPaintLattice());
      }else{
         

         
         GraphicsDataFields::floatField3DNameMapItr_t mitr=
         scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().find(string(selectedPlotType.toStdString().c_str()));
   
//          cerr<<"LOOKING FOR A STRING:"<<string(selectedPlotType.toStdString().c_str())<<endl;
         
         if(mitr != scshPtr->graphicsPtr->getGraphFieldsPtr()->getFloatField3DNameMap().end() ){
         
//             cerr<<"FOUND:"<<string(selectedPlotType.toStdString().c_str())<<endl;
            scshPtr->graphicsPtr->setCurrentConcentrationFieldPtr(mitr->second);
   
            scshPtr->graphicsPtr->setCurrentPainitgFcnPtr(currentGraphicsPtr->getPaintConcentrationLattice());
                        
         }else{
            delete scshPtr ;
            continue;   
         }
      
      }
      
      if(screenshotDataList.size()<=maxScreenshotListLength){
      
         QString currentScreenshotName=screenshotCoreName+QString().setNum(scrCounter);
         scrCounter++;
         
         scshPtr->univGraphSet=univGraphSet;//copying current graphics settings - IMPORTANT
         
         scshPtr->setCoreName(currentScreenshotName.toStdString().c_str());
         scshPtr->setScreenshotIdName(currentScreenshotName);
         
         screenshotDataList.push_back(scshPtr);
         
         scshPtr->activate(simulationRootDir);
      }
   }

}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::outputScreenshot(){

   screenshotCounter=mcStep;

   if(screenshotCounter % screenshotFrequency){
//        ++screenshotCounter;
      return;
   }


   ostringstream imageFileFullNameStream("");
   ostringstream imageFileNameStream("");
   imageCoreFileName=curFileStripped.toStdString();
   imageFileExtension="png";
   imageFileFullNameStream<<tmpDirName.toStdString()<<QString(QDir::separator()).toStdString()<<imageCoreFileName<<".";

   imageFileFullNameStream.width(numScreenNameDigits);
   imageFileFullNameStream.fill('0');
   imageFileFullNameStream<<screenshotCounter<<"."<<imageFileExtension;

   imageFileNameStream<<imageCoreFileName<<".";
   imageFileNameStream.width(numScreenNameDigits);
   imageFileNameStream.fill('0');
   imageFileNameStream<<screenshotCounter<<"."<<imageFileExtension;
	       


   for(list<ScreenshotData*>::iterator litr = screenshotDataList.begin() ; litr != screenshotDataList.end() ; ++litr){
      (*litr)->outputScreenshot(screenshotCounter,numScreenNameDigits);
      
   }

   
   ++screenshotCounter;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



QString ImageWindow_NOX::strippedName(const QString &fullFileName)
{
    return QFileInfo(fullFileName).fileName();
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ImageWindow_NOX::simulation(){
    bool isLocked = true;
    if (mutexStartPause.tryLock()) {
        mutexStartPause.unlock();
        isLocked = false;
    }
    if(!isLocked){///this happens only once you start program
      cerr<<"name of the file simulation:"<<string(curFile.toAscii())<<endl;
//       CC3DTransaction *transactionCC3D= new CC3DTransaction(string(curFile.toAscii()));

      transactionCC3D= new CC3DTransaction(string(curFile.toAscii()));

      transactionCC3D->setPauseMutexPtr(&mutex);
      transactionCC3D->setFieldDrawMutexPtr(&mutexFieldDraw);
      transactionCC3D->setTransactionMutexPtr(&mutexTransaction);
      transactionCC3D->setBufferFreeSem(bufferFillFreeSemPtr);
      transactionCC3D->setBufferUsedSem(bufferFillUsedSemPtr);
      transactionCC3D->setRunPythonFlag(runPythonFlag);
      transactionCC3D->setPyDataConf(pyConfData);
      
      
      transactionCC3D->setGraphicsDataFieldPtr(graphFieldsPtr);
      transactionCC3D->setScreenUpdateFrequency(screenUpdateFrequency);

      addTransaction(transactionCC3D );

    }else{
      mutex.unlock();
      mutexStartPause.unlock();
      
    }

}
void ImageWindow_NOX::addTransaction(Transaction *transact){
    thread.addTransaction(transact);
}


void ImageWindow_NOX::readScreenshotDescriptionList(std::list<ScreenshotDescription> & _screenshotDescriptionList, const std::string &fileName){

   ifstream in(fileName.c_str());
   if(!in.good()){
      cerr<<"Could not open file "<<fileName<<endl;
      exit(1);
   }

   _screenshotDescriptionList.clear();
   
   while(!in.eof()){
      ScreenshotDescription scshDes;
      in>>scshDes;
      cerr<<" new scrDes:"<<endl;
      cerr<<scshDes<<endl;
      if(!in.fail()){
         _screenshotDescriptionList.push_back(scshDes);
      }
   }
   
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   

