# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SerializerDEPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SerializerDEPy')
    _SerializerDEPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SerializerDEPy', [dirname(__file__)])
        except ImportError:
            import _SerializerDEPy
            return _SerializerDEPy
        try:
            _mod = imp.load_module('_SerializerDEPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SerializerDEPy = swig_import_helper()
    del swig_import_helper
else:
    import _SerializerDEPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SerializerDEPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SerializerDEPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SerializerDEPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SerializerDEPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SerializerDEPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SerializerDEPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SerializerDEPy.SwigPyIterator_copy(self)

    def next(self):
        return _SerializerDEPy.SwigPyIterator_next(self)

    def __next__(self):
        return _SerializerDEPy.SwigPyIterator___next__(self)

    def previous(self):
        return _SerializerDEPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SerializerDEPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SerializerDEPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SerializerDEPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SerializerDEPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SerializerDEPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SerializerDEPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SerializerDEPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SerializerDEPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SerializerDEPy.vectorint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SerializerDEPy.vectorint___nonzero__(self)

    def __bool__(self):
        return _SerializerDEPy.vectorint___bool__(self)

    def __len__(self):
        return _SerializerDEPy.vectorint___len__(self)

    def __getslice__(self, i, j):
        return _SerializerDEPy.vectorint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SerializerDEPy.vectorint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SerializerDEPy.vectorint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SerializerDEPy.vectorint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SerializerDEPy.vectorint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SerializerDEPy.vectorint___setitem__(self, *args)

    def pop(self):
        return _SerializerDEPy.vectorint_pop(self)

    def append(self, x):
        return _SerializerDEPy.vectorint_append(self, x)

    def empty(self):
        return _SerializerDEPy.vectorint_empty(self)

    def size(self):
        return _SerializerDEPy.vectorint_size(self)

    def swap(self, v):
        return _SerializerDEPy.vectorint_swap(self, v)

    def begin(self):
        return _SerializerDEPy.vectorint_begin(self)

    def end(self):
        return _SerializerDEPy.vectorint_end(self)

    def rbegin(self):
        return _SerializerDEPy.vectorint_rbegin(self)

    def rend(self):
        return _SerializerDEPy.vectorint_rend(self)

    def clear(self):
        return _SerializerDEPy.vectorint_clear(self)

    def get_allocator(self):
        return _SerializerDEPy.vectorint_get_allocator(self)

    def pop_back(self):
        return _SerializerDEPy.vectorint_pop_back(self)

    def erase(self, *args):
        return _SerializerDEPy.vectorint_erase(self, *args)

    def __init__(self, *args):
        this = _SerializerDEPy.new_vectorint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _SerializerDEPy.vectorint_push_back(self, x)

    def front(self):
        return _SerializerDEPy.vectorint_front(self)

    def back(self):
        return _SerializerDEPy.vectorint_back(self)

    def assign(self, n, x):
        return _SerializerDEPy.vectorint_assign(self, n, x)

    def resize(self, *args):
        return _SerializerDEPy.vectorint_resize(self, *args)

    def insert(self, *args):
        return _SerializerDEPy.vectorint_insert(self, *args)

    def reserve(self, n):
        return _SerializerDEPy.vectorint_reserve(self, n)

    def capacity(self):
        return _SerializerDEPy.vectorint_capacity(self)
    __swig_destroy__ = _SerializerDEPy.delete_vectorint
    __del__ = lambda self: None
vectorint_swigregister = _SerializerDEPy.vectorint_swigregister
vectorint_swigregister(vectorint)

class vectorstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstring, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SerializerDEPy.vectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SerializerDEPy.vectorstring___nonzero__(self)

    def __bool__(self):
        return _SerializerDEPy.vectorstring___bool__(self)

    def __len__(self):
        return _SerializerDEPy.vectorstring___len__(self)

    def __getslice__(self, i, j):
        return _SerializerDEPy.vectorstring___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SerializerDEPy.vectorstring___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SerializerDEPy.vectorstring___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SerializerDEPy.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SerializerDEPy.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SerializerDEPy.vectorstring___setitem__(self, *args)

    def pop(self):
        return _SerializerDEPy.vectorstring_pop(self)

    def append(self, x):
        return _SerializerDEPy.vectorstring_append(self, x)

    def empty(self):
        return _SerializerDEPy.vectorstring_empty(self)

    def size(self):
        return _SerializerDEPy.vectorstring_size(self)

    def swap(self, v):
        return _SerializerDEPy.vectorstring_swap(self, v)

    def begin(self):
        return _SerializerDEPy.vectorstring_begin(self)

    def end(self):
        return _SerializerDEPy.vectorstring_end(self)

    def rbegin(self):
        return _SerializerDEPy.vectorstring_rbegin(self)

    def rend(self):
        return _SerializerDEPy.vectorstring_rend(self)

    def clear(self):
        return _SerializerDEPy.vectorstring_clear(self)

    def get_allocator(self):
        return _SerializerDEPy.vectorstring_get_allocator(self)

    def pop_back(self):
        return _SerializerDEPy.vectorstring_pop_back(self)

    def erase(self, *args):
        return _SerializerDEPy.vectorstring_erase(self, *args)

    def __init__(self, *args):
        this = _SerializerDEPy.new_vectorstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _SerializerDEPy.vectorstring_push_back(self, x)

    def front(self):
        return _SerializerDEPy.vectorstring_front(self)

    def back(self):
        return _SerializerDEPy.vectorstring_back(self)

    def assign(self, n, x):
        return _SerializerDEPy.vectorstring_assign(self, n, x)

    def resize(self, *args):
        return _SerializerDEPy.vectorstring_resize(self, *args)

    def insert(self, *args):
        return _SerializerDEPy.vectorstring_insert(self, *args)

    def reserve(self, n):
        return _SerializerDEPy.vectorstring_reserve(self, n)

    def capacity(self):
        return _SerializerDEPy.vectorstring_capacity(self)
    __swig_destroy__ = _SerializerDEPy.delete_vectorstring
    __del__ = lambda self: None
vectorstring_swigregister = _SerializerDEPy.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class SerializeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerializeData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SerializerDEPy.new_SerializeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["moduleName"] = _SerializerDEPy.SerializeData_moduleName_set
    __swig_getmethods__["moduleName"] = _SerializerDEPy.SerializeData_moduleName_get
    if _newclass:
        moduleName = _swig_property(_SerializerDEPy.SerializeData_moduleName_get, _SerializerDEPy.SerializeData_moduleName_set)
    __swig_setmethods__["moduleType"] = _SerializerDEPy.SerializeData_moduleType_set
    __swig_getmethods__["moduleType"] = _SerializerDEPy.SerializeData_moduleType_get
    if _newclass:
        moduleType = _swig_property(_SerializerDEPy.SerializeData_moduleType_get, _SerializerDEPy.SerializeData_moduleType_set)
    __swig_setmethods__["objectName"] = _SerializerDEPy.SerializeData_objectName_set
    __swig_getmethods__["objectName"] = _SerializerDEPy.SerializeData_objectName_get
    if _newclass:
        objectName = _swig_property(_SerializerDEPy.SerializeData_objectName_get, _SerializerDEPy.SerializeData_objectName_set)
    __swig_setmethods__["objectType"] = _SerializerDEPy.SerializeData_objectType_set
    __swig_getmethods__["objectType"] = _SerializerDEPy.SerializeData_objectType_get
    if _newclass:
        objectType = _swig_property(_SerializerDEPy.SerializeData_objectType_get, _SerializerDEPy.SerializeData_objectType_set)
    __swig_setmethods__["fileName"] = _SerializerDEPy.SerializeData_fileName_set
    __swig_getmethods__["fileName"] = _SerializerDEPy.SerializeData_fileName_get
    if _newclass:
        fileName = _swig_property(_SerializerDEPy.SerializeData_fileName_get, _SerializerDEPy.SerializeData_fileName_set)
    __swig_setmethods__["fileFormat"] = _SerializerDEPy.SerializeData_fileFormat_set
    __swig_getmethods__["fileFormat"] = _SerializerDEPy.SerializeData_fileFormat_get
    if _newclass:
        fileFormat = _swig_property(_SerializerDEPy.SerializeData_fileFormat_get, _SerializerDEPy.SerializeData_fileFormat_set)
    __swig_setmethods__["objectPtr"] = _SerializerDEPy.SerializeData_objectPtr_set
    __swig_getmethods__["objectPtr"] = _SerializerDEPy.SerializeData_objectPtr_get
    if _newclass:
        objectPtr = _swig_property(_SerializerDEPy.SerializeData_objectPtr_get, _SerializerDEPy.SerializeData_objectPtr_set)

    def generateXMlStub(self):
        return _SerializerDEPy.SerializeData_generateXMlStub(self)
    __swig_destroy__ = _SerializerDEPy.delete_SerializeData
    __del__ = lambda self: None
SerializeData_swigregister = _SerializerDEPy.SerializeData_swigregister
SerializeData_swigregister(SerializeData)

class SerializerDE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializerDE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerializerDE, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SerializerDEPy.new_SerializerDE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, _sim):
        return _SerializerDEPy.SerializerDE_init(self, _sim)
    __swig_destroy__ = _SerializerDEPy.delete_SerializerDE
    __del__ = lambda self: None

    def serializeConcentrationField(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeConcentrationField(self, _sd)

    def serializeCellField(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeCellField(self, _sd)

    def serializeScalarField(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeScalarField(self, _sd)

    def serializeScalarFieldCellLevel(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeScalarFieldCellLevel(self, _sd)

    def serializeVectorField(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeVectorField(self, _sd)

    def serializeVectorFieldCellLevel(self, _sd):
        return _SerializerDEPy.SerializerDE_serializeVectorFieldCellLevel(self, _sd)

    def loadCellField(self, _sd):
        return _SerializerDEPy.SerializerDE_loadCellField(self, _sd)

    def loadConcentrationField(self, _sd):
        return _SerializerDEPy.SerializerDE_loadConcentrationField(self, _sd)

    def loadScalarField(self, _sd):
        return _SerializerDEPy.SerializerDE_loadScalarField(self, _sd)

    def loadScalarFieldCellLevel(self, _sd):
        return _SerializerDEPy.SerializerDE_loadScalarFieldCellLevel(self, _sd)

    def loadVectorField(self, _sd):
        return _SerializerDEPy.SerializerDE_loadVectorField(self, _sd)

    def loadVectorFieldCellLevel(self, _sd):
        return _SerializerDEPy.SerializerDE_loadVectorFieldCellLevel(self, _sd)
    __swig_setmethods__["serializedDataVec"] = _SerializerDEPy.SerializerDE_serializedDataVec_set
    __swig_getmethods__["serializedDataVec"] = _SerializerDEPy.SerializerDE_serializedDataVec_get
    if _newclass:
        serializedDataVec = _swig_property(_SerializerDEPy.SerializerDE_serializedDataVec_get, _SerializerDEPy.SerializerDE_serializedDataVec_set)
SerializerDE_swigregister = _SerializerDEPy.SerializerDE_swigregister
SerializerDE_swigregister(SerializerDE)

# This file is compatible with both classic and new-style classes.


