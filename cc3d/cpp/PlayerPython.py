# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PlayerPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PlayerPython')
    _PlayerPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PlayerPython', [dirname(__file__)])
        except ImportError:
            import _PlayerPython
            return _PlayerPython
        try:
            _mod = imp.load_module('_PlayerPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PlayerPython = swig_import_helper()
    del swig_import_helper
else:
    import _PlayerPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PlayerPython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PlayerPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PlayerPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PlayerPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PlayerPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PlayerPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PlayerPython.SwigPyIterator_copy(self)

    def next(self):
        return _PlayerPython.SwigPyIterator_next(self)

    def __next__(self):
        return _PlayerPython.SwigPyIterator___next__(self)

    def previous(self):
        return _PlayerPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PlayerPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PlayerPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PlayerPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PlayerPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PlayerPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PlayerPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PlayerPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PlayerPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorCell, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorCell_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorCell___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorCell___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorCell___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorCell___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorCell___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorCell___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorCell___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorCell___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorCell___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorCell_pop(self)

    def append(self, x):
        return _PlayerPython.vectorCell_append(self, x)

    def empty(self):
        return _PlayerPython.vectorCell_empty(self)

    def size(self):
        return _PlayerPython.vectorCell_size(self)

    def swap(self, v):
        return _PlayerPython.vectorCell_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorCell_begin(self)

    def end(self):
        return _PlayerPython.vectorCell_end(self)

    def rbegin(self):
        return _PlayerPython.vectorCell_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorCell_rend(self)

    def clear(self):
        return _PlayerPython.vectorCell_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorCell_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorCell_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorCell_erase(self, *args)

    def __init__(self, *args):
        this = _PlayerPython.new_vectorCell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PlayerPython.vectorCell_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorCell_front(self)

    def back(self):
        return _PlayerPython.vectorCell_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorCell_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorCell_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorCell_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorCell_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorCell_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorCell
    __del__ = lambda self: None
vectorCell_swigregister = _PlayerPython.vectorCell_swigregister
vectorCell_swigregister(vectorCell)

class mapCellGPtrToFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapCellGPtrToFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapCellGPtrToFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.mapCellGPtrToFloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.mapCellGPtrToFloat___bool__(self)

    def __len__(self):
        return _PlayerPython.mapCellGPtrToFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___getitem__(self, key)

    def __delitem__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___delitem__(self, key)

    def has_key(self, key):
        return _PlayerPython.mapCellGPtrToFloat_has_key(self, key)

    def keys(self):
        return _PlayerPython.mapCellGPtrToFloat_keys(self)

    def values(self):
        return _PlayerPython.mapCellGPtrToFloat_values(self)

    def items(self):
        return _PlayerPython.mapCellGPtrToFloat_items(self)

    def __contains__(self, key):
        return _PlayerPython.mapCellGPtrToFloat___contains__(self, key)

    def key_iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_key_iterator(self)

    def value_iterator(self):
        return _PlayerPython.mapCellGPtrToFloat_value_iterator(self)

    def __setitem__(self, *args):
        return _PlayerPython.mapCellGPtrToFloat___setitem__(self, *args)

    def asdict(self):
        return _PlayerPython.mapCellGPtrToFloat_asdict(self)

    def __init__(self, *args):
        this = _PlayerPython.new_mapCellGPtrToFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _PlayerPython.mapCellGPtrToFloat_empty(self)

    def size(self):
        return _PlayerPython.mapCellGPtrToFloat_size(self)

    def swap(self, v):
        return _PlayerPython.mapCellGPtrToFloat_swap(self, v)

    def begin(self):
        return _PlayerPython.mapCellGPtrToFloat_begin(self)

    def end(self):
        return _PlayerPython.mapCellGPtrToFloat_end(self)

    def rbegin(self):
        return _PlayerPython.mapCellGPtrToFloat_rbegin(self)

    def rend(self):
        return _PlayerPython.mapCellGPtrToFloat_rend(self)

    def clear(self):
        return _PlayerPython.mapCellGPtrToFloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.mapCellGPtrToFloat_get_allocator(self)

    def count(self, x):
        return _PlayerPython.mapCellGPtrToFloat_count(self, x)

    def erase(self, *args):
        return _PlayerPython.mapCellGPtrToFloat_erase(self, *args)

    def find(self, x):
        return _PlayerPython.mapCellGPtrToFloat_find(self, x)

    def lower_bound(self, x):
        return _PlayerPython.mapCellGPtrToFloat_lower_bound(self, x)

    def upper_bound(self, x):
        return _PlayerPython.mapCellGPtrToFloat_upper_bound(self, x)
    __swig_destroy__ = _PlayerPython.delete_mapCellGPtrToFloat
    __del__ = lambda self: None
mapCellGPtrToFloat_swigregister = _PlayerPython.mapCellGPtrToFloat_swigregister
mapCellGPtrToFloat_swigregister(mapCellGPtrToFloat)

class Coodrinates3DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coodrinates3DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coodrinates3DFloat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PlayerPython.new_Coodrinates3DFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def X(self):
        return _PlayerPython.Coodrinates3DFloat_X(self)

    def Y(self):
        return _PlayerPython.Coodrinates3DFloat_Y(self)

    def Z(self):
        return _PlayerPython.Coodrinates3DFloat_Z(self)

    def XRef(self):
        return _PlayerPython.Coodrinates3DFloat_XRef(self)

    def YRef(self):
        return _PlayerPython.Coodrinates3DFloat_YRef(self)

    def ZRef(self):
        return _PlayerPython.Coodrinates3DFloat_ZRef(self)

    def __isub__(self, a):
        return _PlayerPython.Coodrinates3DFloat___isub__(self, a)

    def __iadd__(self, a):
        return _PlayerPython.Coodrinates3DFloat___iadd__(self, a)
    __swig_setmethods__["x"] = _PlayerPython.Coodrinates3DFloat_x_set
    __swig_getmethods__["x"] = _PlayerPython.Coodrinates3DFloat_x_get
    if _newclass:
        x = _swig_property(_PlayerPython.Coodrinates3DFloat_x_get, _PlayerPython.Coodrinates3DFloat_x_set)
    __swig_setmethods__["y"] = _PlayerPython.Coodrinates3DFloat_y_set
    __swig_getmethods__["y"] = _PlayerPython.Coodrinates3DFloat_y_get
    if _newclass:
        y = _swig_property(_PlayerPython.Coodrinates3DFloat_y_get, _PlayerPython.Coodrinates3DFloat_y_set)
    __swig_setmethods__["z"] = _PlayerPython.Coodrinates3DFloat_z_set
    __swig_getmethods__["z"] = _PlayerPython.Coodrinates3DFloat_z_get
    if _newclass:
        z = _swig_property(_PlayerPython.Coodrinates3DFloat_z_get, _PlayerPython.Coodrinates3DFloat_z_set)
    __swig_destroy__ = _PlayerPython.delete_Coodrinates3DFloat
    __del__ = lambda self: None
Coodrinates3DFloat_swigregister = _PlayerPython.Coodrinates3DFloat_swigregister
Coodrinates3DFloat_swigregister(Coodrinates3DFloat)

class mapCellGPtrToCoordinates3DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapCellGPtrToCoordinates3DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapCellGPtrToCoordinates3DFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___bool__(self)

    def __len__(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___getitem__(self, key)

    def __delitem__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___delitem__(self, key)

    def has_key(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_has_key(self, key)

    def keys(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_keys(self)

    def values(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_values(self)

    def items(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_items(self)

    def __contains__(self, key):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___contains__(self, key)

    def key_iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_key_iterator(self)

    def value_iterator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_value_iterator(self)

    def __setitem__(self, *args):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat___setitem__(self, *args)

    def asdict(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_asdict(self)

    def __init__(self, *args):
        this = _PlayerPython.new_mapCellGPtrToCoordinates3DFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_empty(self)

    def size(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_size(self)

    def swap(self, v):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_swap(self, v)

    def begin(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_begin(self)

    def end(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_end(self)

    def rbegin(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_rbegin(self)

    def rend(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_rend(self)

    def clear(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_get_allocator(self)

    def count(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_count(self, x)

    def erase(self, *args):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_erase(self, *args)

    def find(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_find(self, x)

    def lower_bound(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_lower_bound(self, x)

    def upper_bound(self, x):
        return _PlayerPython.mapCellGPtrToCoordinates3DFloat_upper_bound(self, x)
    __swig_destroy__ = _PlayerPython.delete_mapCellGPtrToCoordinates3DFloat
    __del__ = lambda self: None
mapCellGPtrToCoordinates3DFloat_swigregister = _PlayerPython.mapCellGPtrToCoordinates3DFloat_swigregister
mapCellGPtrToCoordinates3DFloat_swigregister(mapCellGPtrToCoordinates3DFloat)

class vectorint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorint___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorint___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorint___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorint___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorint_pop(self)

    def append(self, x):
        return _PlayerPython.vectorint_append(self, x)

    def empty(self):
        return _PlayerPython.vectorint_empty(self)

    def size(self):
        return _PlayerPython.vectorint_size(self)

    def swap(self, v):
        return _PlayerPython.vectorint_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorint_begin(self)

    def end(self):
        return _PlayerPython.vectorint_end(self)

    def rbegin(self):
        return _PlayerPython.vectorint_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorint_rend(self)

    def clear(self):
        return _PlayerPython.vectorint_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorint_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorint_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorint_erase(self, *args)

    def __init__(self, *args):
        this = _PlayerPython.new_vectorint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PlayerPython.vectorint_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorint_front(self)

    def back(self):
        return _PlayerPython.vectorint_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorint_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorint_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorint_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorint_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorint_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorint
    __del__ = lambda self: None
vectorint_swigregister = _PlayerPython.vectorint_swigregister
vectorint_swigregister(vectorint)

class vectorlong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorlong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorlong, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorlong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorlong___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorlong___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorlong___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorlong___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorlong___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorlong___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorlong___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorlong___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorlong___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorlong_pop(self)

    def append(self, x):
        return _PlayerPython.vectorlong_append(self, x)

    def empty(self):
        return _PlayerPython.vectorlong_empty(self)

    def size(self):
        return _PlayerPython.vectorlong_size(self)

    def swap(self, v):
        return _PlayerPython.vectorlong_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorlong_begin(self)

    def end(self):
        return _PlayerPython.vectorlong_end(self)

    def rbegin(self):
        return _PlayerPython.vectorlong_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorlong_rend(self)

    def clear(self):
        return _PlayerPython.vectorlong_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorlong_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorlong_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorlong_erase(self, *args)

    def __init__(self, *args):
        this = _PlayerPython.new_vectorlong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PlayerPython.vectorlong_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorlong_front(self)

    def back(self):
        return _PlayerPython.vectorlong_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorlong_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorlong_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorlong_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorlong_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorlong_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorlong
    __del__ = lambda self: None
vectorlong_swigregister = _PlayerPython.vectorlong_swigregister
vectorlong_swigregister(vectorlong)

class vectorfloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorfloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorfloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorfloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorfloat___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorfloat___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorfloat___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorfloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorfloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorfloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorfloat___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorfloat_pop(self)

    def append(self, x):
        return _PlayerPython.vectorfloat_append(self, x)

    def empty(self):
        return _PlayerPython.vectorfloat_empty(self)

    def size(self):
        return _PlayerPython.vectorfloat_size(self)

    def swap(self, v):
        return _PlayerPython.vectorfloat_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorfloat_begin(self)

    def end(self):
        return _PlayerPython.vectorfloat_end(self)

    def rbegin(self):
        return _PlayerPython.vectorfloat_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorfloat_rend(self)

    def clear(self):
        return _PlayerPython.vectorfloat_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorfloat_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorfloat_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorfloat_erase(self, *args)

    def __init__(self, *args):
        this = _PlayerPython.new_vectorfloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PlayerPython.vectorfloat_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorfloat_front(self)

    def back(self):
        return _PlayerPython.vectorfloat_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorfloat_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorfloat_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorfloat_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorfloat_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorfloat_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorfloat
    __del__ = lambda self: None
vectorfloat_swigregister = _PlayerPython.vectorfloat_swigregister
vectorfloat_swigregister(vectorfloat)

class vectorstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstring, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PlayerPython.vectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PlayerPython.vectorstring___nonzero__(self)

    def __bool__(self):
        return _PlayerPython.vectorstring___bool__(self)

    def __len__(self):
        return _PlayerPython.vectorstring___len__(self)

    def __getslice__(self, i, j):
        return _PlayerPython.vectorstring___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PlayerPython.vectorstring___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PlayerPython.vectorstring___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PlayerPython.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PlayerPython.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PlayerPython.vectorstring___setitem__(self, *args)

    def pop(self):
        return _PlayerPython.vectorstring_pop(self)

    def append(self, x):
        return _PlayerPython.vectorstring_append(self, x)

    def empty(self):
        return _PlayerPython.vectorstring_empty(self)

    def size(self):
        return _PlayerPython.vectorstring_size(self)

    def swap(self, v):
        return _PlayerPython.vectorstring_swap(self, v)

    def begin(self):
        return _PlayerPython.vectorstring_begin(self)

    def end(self):
        return _PlayerPython.vectorstring_end(self)

    def rbegin(self):
        return _PlayerPython.vectorstring_rbegin(self)

    def rend(self):
        return _PlayerPython.vectorstring_rend(self)

    def clear(self):
        return _PlayerPython.vectorstring_clear(self)

    def get_allocator(self):
        return _PlayerPython.vectorstring_get_allocator(self)

    def pop_back(self):
        return _PlayerPython.vectorstring_pop_back(self)

    def erase(self, *args):
        return _PlayerPython.vectorstring_erase(self, *args)

    def __init__(self, *args):
        this = _PlayerPython.new_vectorstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PlayerPython.vectorstring_push_back(self, x)

    def front(self):
        return _PlayerPython.vectorstring_front(self)

    def back(self):
        return _PlayerPython.vectorstring_back(self)

    def assign(self, n, x):
        return _PlayerPython.vectorstring_assign(self, n, x)

    def resize(self, *args):
        return _PlayerPython.vectorstring_resize(self, *args)

    def insert(self, *args):
        return _PlayerPython.vectorstring_insert(self, *args)

    def reserve(self, n):
        return _PlayerPython.vectorstring_reserve(self, n)

    def capacity(self):
        return _PlayerPython.vectorstring_capacity(self)
    __swig_destroy__ = _PlayerPython.delete_vectorstring
    __del__ = lambda self: None
vectorstring_swigregister = _PlayerPython.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class NdarrayAdapterDouble3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdarrayAdapterDouble3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NdarrayAdapterDouble3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _PlayerPython.NdarrayAdapterDouble3_data_set
    __swig_getmethods__["data"] = _PlayerPython.NdarrayAdapterDouble3_data_get
    if _newclass:
        data = _swig_property(_PlayerPython.NdarrayAdapterDouble3_data_get, _PlayerPython.NdarrayAdapterDouble3_data_set)

    def setStrides(self, _strides):
        return _PlayerPython.NdarrayAdapterDouble3_setStrides(self, _strides)

    def setShape(self, _shape):
        return _PlayerPython.NdarrayAdapterDouble3_setShape(self, _shape)

    def setData(self, _data):
        return _PlayerPython.NdarrayAdapterDouble3_setData(self, _data)

    def __init__(self, *args):
        this = _PlayerPython.new_NdarrayAdapterDouble3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getShape(self, axis):
        return _PlayerPython.NdarrayAdapterDouble3_getShape(self, axis)

    def clear(self):
        return _PlayerPython.NdarrayAdapterDouble3_clear(self)

    def initFromNumpy(self, _numpyArrayObj):
        return _PlayerPython.NdarrayAdapterDouble3_initFromNumpy(self, _numpyArrayObj)

    def getItem(self, _coord):
        return _PlayerPython.NdarrayAdapterDouble3_getItem(self, _coord)
    __swig_destroy__ = _PlayerPython.delete_NdarrayAdapterDouble3
    __del__ = lambda self: None
NdarrayAdapterDouble3_swigregister = _PlayerPython.NdarrayAdapterDouble3_swigregister
NdarrayAdapterDouble3_swigregister(NdarrayAdapterDouble3)

class NdarrayAdapterDouble4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdarrayAdapterDouble4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NdarrayAdapterDouble4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _PlayerPython.NdarrayAdapterDouble4_data_set
    __swig_getmethods__["data"] = _PlayerPython.NdarrayAdapterDouble4_data_get
    if _newclass:
        data = _swig_property(_PlayerPython.NdarrayAdapterDouble4_data_get, _PlayerPython.NdarrayAdapterDouble4_data_set)

    def setStrides(self, _strides):
        return _PlayerPython.NdarrayAdapterDouble4_setStrides(self, _strides)

    def setShape(self, _shape):
        return _PlayerPython.NdarrayAdapterDouble4_setShape(self, _shape)

    def setData(self, _data):
        return _PlayerPython.NdarrayAdapterDouble4_setData(self, _data)

    def __init__(self, *args):
        this = _PlayerPython.new_NdarrayAdapterDouble4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getShape(self, axis):
        return _PlayerPython.NdarrayAdapterDouble4_getShape(self, axis)

    def clear(self):
        return _PlayerPython.NdarrayAdapterDouble4_clear(self)

    def initFromNumpy(self, _numpyArrayObj):
        return _PlayerPython.NdarrayAdapterDouble4_initFromNumpy(self, _numpyArrayObj)

    def getItem(self, _coord):
        return _PlayerPython.NdarrayAdapterDouble4_getItem(self, _coord)
    __swig_destroy__ = _PlayerPython.delete_NdarrayAdapterDouble4
    __del__ = lambda self: None
NdarrayAdapterDouble4_swigregister = _PlayerPython.NdarrayAdapterDouble4_swigregister
NdarrayAdapterDouble4_swigregister(NdarrayAdapterDouble4)

class ScalarFieldCellLevel(mapCellGPtrToFloat):
    __swig_setmethods__ = {}
    for _s in [mapCellGPtrToFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFieldCellLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [mapCellGPtrToFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFieldCellLevel, name)
    __repr__ = _swig_repr

    def __setitem__(self, _cell, _val):
        return _PlayerPython.ScalarFieldCellLevel___setitem__(self, _cell, _val)

    def __getitem__(self, _cell):
        return _PlayerPython.ScalarFieldCellLevel___getitem__(self, _cell)

    def __init__(self):
        this = _PlayerPython.new_ScalarFieldCellLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_ScalarFieldCellLevel
    __del__ = lambda self: None
ScalarFieldCellLevel_swigregister = _PlayerPython.ScalarFieldCellLevel_swigregister
ScalarFieldCellLevel_swigregister(ScalarFieldCellLevel)

class VectorFieldCellLevel(mapCellGPtrToCoordinates3DFloat):
    __swig_setmethods__ = {}
    for _s in [mapCellGPtrToCoordinates3DFloat]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFieldCellLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [mapCellGPtrToCoordinates3DFloat]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFieldCellLevel, name)
    __repr__ = _swig_repr

    def __setitem__(self, _cell, _numpyArrayObj):
        return _PlayerPython.VectorFieldCellLevel___setitem__(self, _cell, _numpyArrayObj)

    def __getitem__(self, _cell):
        return _PlayerPython.VectorFieldCellLevel___getitem__(self, _cell)

    def __init__(self):
        this = _PlayerPython.new_VectorFieldCellLevel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_VectorFieldCellLevel
    __del__ = lambda self: None
VectorFieldCellLevel_swigregister = _PlayerPython.VectorFieldCellLevel_swigregister
VectorFieldCellLevel_swigregister(VectorFieldCellLevel)

class FieldStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldStorage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PlayerPython.new_FieldStorage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_FieldStorage
    __del__ = lambda self: None

    def setDim(self, _dim):
        return _PlayerPython.FieldStorage_setDim(self, _dim)

    def getDim(self):
        return _PlayerPython.FieldStorage_getDim(self)

    def allocateCellField(self, _dim):
        return _PlayerPython.FieldStorage_allocateCellField(self, _dim)

    def createFloatFieldPy(self, _dim, _fieldName):
        return _PlayerPython.FieldStorage_createFloatFieldPy(self, _dim, _fieldName)

    def clearScalarField(self, _dim, _fieldPtr):
        return _PlayerPython.FieldStorage_clearScalarField(self, _dim, _fieldPtr)

    def getScalarFieldNameVector(self):
        return _PlayerPython.FieldStorage_getScalarFieldNameVector(self)

    def getScalarFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getScalarFieldByName(self, _fieldName)

    def createVectorFieldPy(self, _dim, _fieldName):
        return _PlayerPython.FieldStorage_createVectorFieldPy(self, _dim, _fieldName)

    def clearVectorField(self, _dim, _fieldPtr):
        return _PlayerPython.FieldStorage_clearVectorField(self, _dim, _fieldPtr)

    def getVectorFieldNameVector(self):
        return _PlayerPython.FieldStorage_getVectorFieldNameVector(self)

    def getVectorFieldFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getVectorFieldFieldByName(self, _fieldName)

    def createVectorFieldCellLevelPy(self, _fieldName):
        return _PlayerPython.FieldStorage_createVectorFieldCellLevelPy(self, _fieldName)

    def clearVectorCellLevelField(self, _field):
        return _PlayerPython.FieldStorage_clearVectorCellLevelField(self, _field)

    def getVectorFieldCellLevelNameVector(self):
        return _PlayerPython.FieldStorage_getVectorFieldCellLevelNameVector(self)

    def getVectorFieldCellLevelFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getVectorFieldCellLevelFieldByName(self, _fieldName)

    def createScalarFieldCellLevelPy(self, _fieldName):
        return _PlayerPython.FieldStorage_createScalarFieldCellLevelPy(self, _fieldName)

    def clearScalarCellLevelField(self, _field):
        return _PlayerPython.FieldStorage_clearScalarCellLevelField(self, _field)

    def getScalarFieldCellLevelNameVector(self):
        return _PlayerPython.FieldStorage_getScalarFieldCellLevelNameVector(self)

    def getScalarFieldCellLevelFieldByName(self, _fieldName):
        return _PlayerPython.FieldStorage_getScalarFieldCellLevelFieldByName(self, _fieldName)

    def clearAllocatedFields(self):
        return _PlayerPython.FieldStorage_clearAllocatedFields(self)
    __swig_setmethods__["field3DGraphicsData"] = _PlayerPython.FieldStorage_field3DGraphicsData_set
    __swig_getmethods__["field3DGraphicsData"] = _PlayerPython.FieldStorage_field3DGraphicsData_get
    if _newclass:
        field3DGraphicsData = _swig_property(_PlayerPython.FieldStorage_field3DGraphicsData_get, _PlayerPython.FieldStorage_field3DGraphicsData_set)
FieldStorage_swigregister = _PlayerPython.FieldStorage_swigregister
FieldStorage_swigregister(FieldStorage)

class FieldExtractorBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldExtractorBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldExtractorBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PlayerPython.new_FieldExtractorBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_FieldExtractorBase
    __del__ = lambda self: None

    def pointOrder(self, _plane):
        return _PlayerPython.FieldExtractorBase_pointOrder(self, _plane)

    def dimOrder(self, _plane):
        return _PlayerPython.FieldExtractorBase_dimOrder(self, _plane)

    def HexCoordXY(self, x, y, z):
        return _PlayerPython.FieldExtractorBase_HexCoordXY(self, x, y, z)

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorBase_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorBase_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorBase_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorBase_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)
FieldExtractorBase_swigregister = _PlayerPython.FieldExtractorBase_swigregister
FieldExtractorBase_swigregister(FieldExtractorBase)

class FieldExtractor(FieldExtractorBase):
    __swig_setmethods__ = {}
    for _s in [FieldExtractorBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldExtractor, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldExtractorBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldExtractor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["potts"] = _PlayerPython.FieldExtractor_potts_set
    __swig_getmethods__["potts"] = _PlayerPython.FieldExtractor_potts_get
    if _newclass:
        potts = _swig_property(_PlayerPython.FieldExtractor_potts_get, _PlayerPython.FieldExtractor_potts_set)
    __swig_setmethods__["sim"] = _PlayerPython.FieldExtractor_sim_set
    __swig_getmethods__["sim"] = _PlayerPython.FieldExtractor_sim_get
    if _newclass:
        sim = _swig_property(_PlayerPython.FieldExtractor_sim_get, _PlayerPython.FieldExtractor_sim_set)

    def __init__(self):
        this = _PlayerPython.new_FieldExtractor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_FieldExtractor
    __del__ = lambda self: None

    def setFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldExtractor_setFieldStorage(self, _fsPtr)

    def getFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldExtractor_getFieldStorage(self, _fsPtr)

    def extractCellField(self):
        return _PlayerPython.FieldExtractor_extractCellField(self)

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex_old(self, _cellTypeArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2DHex_old(self, _cellTypeArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractor_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractor_fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractor_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractor_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractor_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def setVtkObj(self, _vtkObj):
        return _PlayerPython.FieldExtractor_setVtkObj(self, _vtkObj)

    def setVtkObjInt(self, _vtkObjAddr):
        return _PlayerPython.FieldExtractor_setVtkObjInt(self, _vtkObjAddr)

    def produceVtkIntArray(self):
        return _PlayerPython.FieldExtractor_produceVtkIntArray(self)

    def produceArray(self, _size):
        return _PlayerPython.FieldExtractor_produceArray(self, _size)

    def init(self, _sim):
        return _PlayerPython.FieldExtractor_init(self, _sim)
FieldExtractor_swigregister = _PlayerPython.FieldExtractor_swigregister
FieldExtractor_swigregister(FieldExtractor)

class FieldExtractorCML(FieldExtractorBase):
    __swig_setmethods__ = {}
    for _s in [FieldExtractorBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldExtractorCML, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldExtractorBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldExtractorCML, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PlayerPython.new_FieldExtractorCML()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_FieldExtractorCML
    __del__ = lambda self: None

    def fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2D(self, _cellTypeArrayAddr, _plane, _pos)

    def fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2DHex(self, _cellTypeArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData2DCartesian(self, _cellTypeArrayAddr, _cellsArrayAddr, _pointsArrayAddr, _plane, _pos)

    def fillBorder2D(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorder2D(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorder2DHex(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorder2DHex(self, arrayName, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillClusterBorderData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillClusterBorderData2DHex(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillCentroidData2D(self, _pointArrayAddr, _linesArrayAddr, _plane, _pos)

    def fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillConFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2D(self, _conArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2DHex(self, _conArrayAddr, _hexCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData2DCartesian(self, _conArrayAddr, _cartesianCellsArrayAddr, _pointsArrayAddr, _conFieldName, _plane, _pos)

    def fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData2D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData2DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName, _plane, _pos)

    def fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData3D(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName):
        return _PlayerPython.FieldExtractorCML_fillVectorFieldCellLevelData3DHex(self, _pointsArrayIntAddr, _vectorArrayIntAddr, _fieldName)

    def fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorCML_fillScalarFieldCellLevelData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly=False):
        return _PlayerPython.FieldExtractorCML_fillCellFieldData3D(self, _cellTypeArrayAddr, _cellIdArrayAddr, extractOuterShellOnly)

    def fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec):
        return _PlayerPython.FieldExtractorCML_fillConFieldData3D(self, _conArrayAddr, _cellTypeArrayAddr, _conFieldName, _typesInvisibeVec)

    def readVtkStructuredPointsData(self, _structuredPointsReaderAddr):
        return _PlayerPython.FieldExtractorCML_readVtkStructuredPointsData(self, _structuredPointsReaderAddr)

    def setFieldDim(self, _dim):
        return _PlayerPython.FieldExtractorCML_setFieldDim(self, _dim)

    def getFieldDim(self):
        return _PlayerPython.FieldExtractorCML_getFieldDim(self)

    def setSimulationData(self, _structuredPointsAddr):
        return _PlayerPython.FieldExtractorCML_setSimulationData(self, _structuredPointsAddr)

    def pointIndex(self, _x, _y, _z):
        return _PlayerPython.FieldExtractorCML_pointIndex(self, _x, _y, _z)

    def indexPoint3D(self, pt):
        return _PlayerPython.FieldExtractorCML_indexPoint3D(self, pt)
FieldExtractorCML_swigregister = _PlayerPython.FieldExtractorCML_swigregister
FieldExtractorCML_swigregister(FieldExtractorCML)

class FieldWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldWriter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["potts"] = _PlayerPython.FieldWriter_potts_set
    __swig_getmethods__["potts"] = _PlayerPython.FieldWriter_potts_get
    if _newclass:
        potts = _swig_property(_PlayerPython.FieldWriter_potts_get, _PlayerPython.FieldWriter_potts_set)
    __swig_setmethods__["sim"] = _PlayerPython.FieldWriter_sim_set
    __swig_getmethods__["sim"] = _PlayerPython.FieldWriter_sim_get
    if _newclass:
        sim = _swig_property(_PlayerPython.FieldWriter_sim_get, _PlayerPython.FieldWriter_sim_set)

    def __init__(self):
        this = _PlayerPython.new_FieldWriter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PlayerPython.delete_FieldWriter
    __del__ = lambda self: None

    def setFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldWriter_setFieldStorage(self, _fsPtr)

    def getFieldStorage(self, _fsPtr):
        return _PlayerPython.FieldWriter_getFieldStorage(self, _fsPtr)

    def init(self, _sim):
        return _PlayerPython.FieldWriter_init(self, _sim)

    def setFileTypeToBinary(self, flag):
        return _PlayerPython.FieldWriter_setFileTypeToBinary(self, flag)

    def addCellFieldForOutput(self):
        return _PlayerPython.FieldWriter_addCellFieldForOutput(self)

    def addConFieldForOutput(self, _conFieldName):
        return _PlayerPython.FieldWriter_addConFieldForOutput(self, _conFieldName)

    def addScalarFieldForOutput(self, _scalarFieldName):
        return _PlayerPython.FieldWriter_addScalarFieldForOutput(self, _scalarFieldName)

    def addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName):
        return _PlayerPython.FieldWriter_addScalarFieldCellLevelForOutput(self, _scalarFieldCellLevelName)

    def addVectorFieldForOutput(self, _vectorFieldName):
        return _PlayerPython.FieldWriter_addVectorFieldForOutput(self, _vectorFieldName)

    def addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName):
        return _PlayerPython.FieldWriter_addVectorFieldCellLevelForOutput(self, _vectorFieldCellLevelName)

    def clear(self):
        return _PlayerPython.FieldWriter_clear(self)

    def writeFields(self, _fileName):
        return _PlayerPython.FieldWriter_writeFields(self, _fileName)

    def generatePIFFileFromVTKOutput(self, _vtkFileName, _pifFileName, _dimX, _dimY, _dimZ, typeIdTypeNameMap):
        return _PlayerPython.FieldWriter_generatePIFFileFromVTKOutput(self, _vtkFileName, _pifFileName, _dimX, _dimY, _dimZ, typeIdTypeNameMap)

    def generatePIFFileFromCurrentStateOfSimulation(self, _pifFileName):
        return _PlayerPython.FieldWriter_generatePIFFileFromCurrentStateOfSimulation(self, _pifFileName)
FieldWriter_swigregister = _PlayerPython.FieldWriter_swigregister
FieldWriter_swigregister(FieldWriter)


def setSwigPtr(_ptr):
    return _PlayerPython.setSwigPtr(_ptr)
setSwigPtr = _PlayerPython.setSwigPtr

def add(a, b, result):
    return _PlayerPython.add(a, b, result)
add = _PlayerPython.add

def fillScalarValue(_numpyArrayObj, _x, _y, _z, _value):
    return _PlayerPython.fillScalarValue(_numpyArrayObj, _x, _y, _z, _value)
fillScalarValue = _PlayerPython.fillScalarValue

def clearScalarField(_dim, _numpyArrayObj):
    return _PlayerPython.clearScalarField(_dim, _numpyArrayObj)
clearScalarField = _PlayerPython.clearScalarField

def clearScalarValueCellLevel(_field):
    return _PlayerPython.clearScalarValueCellLevel(_field)
clearScalarValueCellLevel = _PlayerPython.clearScalarValueCellLevel

def fillScalarValueCellLevel(_field, _cell, _value):
    return _PlayerPython.fillScalarValueCellLevel(_field, _cell, _value)
fillScalarValueCellLevel = _PlayerPython.fillScalarValueCellLevel

def insertVectorIntoVectorField(_numpyArrayObj, _xPos, _yPos, _zPos, _x, _y, _z):
    return _PlayerPython.insertVectorIntoVectorField(_numpyArrayObj, _xPos, _yPos, _zPos, _x, _y, _z)
insertVectorIntoVectorField = _PlayerPython.insertVectorIntoVectorField

def insertVectorIntoVectorCellLevelField(_field, _cell, _x, _y, _z):
    return _PlayerPython.insertVectorIntoVectorCellLevelField(_field, _cell, _x, _y, _z)
insertVectorIntoVectorCellLevelField = _PlayerPython.insertVectorIntoVectorCellLevelField

def clearVectorCellLevelField(_field):
    return _PlayerPython.clearVectorCellLevelField(_field)
clearVectorCellLevelField = _PlayerPython.clearVectorCellLevelField

def clearVectorField(_dim, _numpyArrayObj):
    return _PlayerPython.clearVectorField(_dim, _numpyArrayObj)
clearVectorField = _PlayerPython.clearVectorField

def findVectorInVectorCellLEvelField(_field, _cell):
    return _PlayerPython.findVectorInVectorCellLEvelField(_field, _cell)
findVectorInVectorCellLEvelField = _PlayerPython.findVectorInVectorCellLEvelField
# This file is compatible with both classic and new-style classes.


